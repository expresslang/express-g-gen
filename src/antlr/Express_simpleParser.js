// Generated from java-escape by ANTLR 4.11.1
// jshint ignore: start
import antlr4 from 'antlr4';
import Express_simpleListener from './Express_simpleListener.js';
const serializedATN = [4,1,161,1643,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,
7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,85,
7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,2,92,7,
92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,2,99,7,99,
2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,2,105,7,105,
2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,2,111,7,111,
2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,2,117,7,117,
2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,7,122,2,123,7,123,
2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,
2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,
2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,
2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,7,153,
2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,2,159,7,159,
2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,7,164,2,165,7,165,
2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,2,170,7,170,2,171,7,171,
2,172,7,172,2,173,7,173,2,174,7,174,2,175,7,175,2,176,7,176,2,177,7,177,
2,178,7,178,2,179,7,179,2,180,7,180,2,181,7,181,2,182,7,182,2,183,7,183,
2,184,7,184,2,185,7,185,2,186,7,186,2,187,7,187,2,188,7,188,2,189,7,189,
2,190,7,190,2,191,7,191,2,192,7,192,2,193,7,193,2,194,7,194,2,195,7,195,
2,196,7,196,2,197,7,197,2,198,7,198,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,
1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,
1,13,1,13,1,14,1,14,1,15,1,15,1,15,1,15,1,16,1,16,1,16,3,16,436,8,16,1,17,
1,17,1,17,1,17,5,17,442,8,17,10,17,12,17,445,9,17,1,17,1,17,1,18,1,18,1,
19,1,19,1,19,1,19,5,19,455,8,19,10,19,12,19,458,9,19,3,19,460,8,19,1,19,
1,19,1,20,1,20,1,21,1,21,1,21,3,21,469,8,21,1,21,1,21,1,21,1,22,1,22,1,22,
1,22,3,22,478,8,22,1,23,5,23,481,8,23,10,23,12,23,484,9,23,1,23,3,23,487,
8,23,1,23,3,23,490,8,23,1,24,1,24,1,24,1,24,1,24,5,24,497,8,24,10,24,12,
24,500,9,24,1,24,1,24,1,24,5,24,505,8,24,10,24,12,24,508,9,24,1,24,1,24,
1,24,1,25,1,25,1,25,1,25,3,25,517,8,25,1,25,3,25,520,8,25,1,25,1,25,1,26,
1,26,5,26,526,8,26,10,26,12,26,529,9,26,1,26,1,26,1,26,1,26,1,27,1,27,3,
27,537,8,27,1,28,1,28,1,29,1,29,1,29,1,30,1,30,3,30,546,8,30,1,30,1,30,1,
30,1,31,1,31,3,31,553,8,31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,35,
1,35,1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,39,5,39,576,8,39,
10,39,12,39,579,9,39,1,39,1,39,1,39,1,40,1,40,1,41,1,41,1,41,1,41,5,41,590,
8,41,10,41,12,41,593,9,41,1,41,1,41,1,41,3,41,598,8,41,1,41,1,41,1,41,1,
42,1,42,1,42,5,42,606,8,42,10,42,12,42,609,9,42,1,42,1,42,1,42,1,43,1,43,
1,43,3,43,617,8,43,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,45,1,45,1,45,5,45,
629,8,45,10,45,12,45,632,9,45,1,45,1,45,1,45,1,46,1,46,3,46,639,8,46,1,47,
1,47,1,48,1,48,3,48,645,8,48,1,49,1,49,1,49,1,49,1,49,3,49,652,8,49,1,50,
1,50,1,50,1,50,1,50,1,50,1,50,1,51,1,51,1,51,5,51,664,8,51,10,51,12,51,667,
9,51,1,52,1,52,1,52,3,52,672,8,52,1,52,1,52,1,53,1,53,1,53,3,53,679,8,53,
1,54,5,54,682,8,54,10,54,12,54,685,9,54,1,54,3,54,688,8,54,1,54,3,54,691,
8,54,1,54,3,54,694,8,54,1,54,3,54,697,8,54,1,55,1,55,1,55,1,55,1,55,5,55,
704,8,55,10,55,12,55,707,9,55,3,55,709,8,55,1,55,1,55,1,56,1,56,1,56,1,56,
1,56,1,57,1,57,1,57,1,57,1,57,1,58,1,58,1,59,1,59,1,59,1,59,3,59,729,8,59,
1,60,1,60,1,61,1,61,1,61,1,61,5,61,737,8,61,10,61,12,61,740,9,61,1,61,1,
61,1,62,1,62,1,63,1,63,1,63,3,63,749,8,63,1,63,1,63,1,64,3,64,754,8,64,1,
64,1,64,1,64,1,64,3,64,760,8,64,1,65,1,65,1,65,1,66,1,66,1,66,5,66,768,8,
66,10,66,12,66,771,9,66,1,66,1,66,3,66,775,8,66,1,66,1,66,1,66,1,67,1,67,
1,67,1,67,3,67,784,8,67,1,68,1,68,1,68,3,68,789,8,68,1,69,1,69,1,69,5,69,
794,8,69,10,69,12,69,797,9,69,1,69,1,69,1,69,1,70,1,70,3,70,804,8,70,1,70,
3,70,807,8,70,1,71,1,71,1,71,1,71,5,71,813,8,71,10,71,12,71,816,9,71,1,71,
1,71,1,71,1,72,1,72,1,72,1,72,1,72,1,72,5,72,827,8,72,10,72,12,72,830,9,
72,1,72,1,72,3,72,834,8,72,1,72,1,72,1,72,1,72,1,73,1,73,1,74,1,74,1,74,
1,74,3,74,846,8,74,1,75,1,75,1,75,1,75,3,75,852,8,75,1,76,1,76,3,76,856,
8,76,1,76,1,76,3,76,860,8,76,1,76,3,76,863,8,76,1,76,1,76,1,77,1,77,3,77,
869,8,77,1,77,1,77,1,77,1,78,1,78,3,78,876,8,78,1,78,1,78,3,78,880,8,78,
1,78,1,78,1,79,1,79,3,79,886,8,79,1,80,1,80,3,80,890,8,80,1,80,1,80,1,80,
1,81,1,81,1,81,3,81,898,8,81,1,82,1,82,1,82,3,82,903,8,82,1,83,1,83,1,83,
1,84,1,84,1,84,1,84,1,84,1,84,3,84,914,8,84,1,84,1,84,1,84,1,85,1,85,5,85,
921,8,85,10,85,12,85,924,9,85,1,86,1,86,5,86,928,8,86,10,86,12,86,931,9,
86,1,87,1,87,1,88,1,88,1,88,1,88,1,88,1,88,1,88,3,88,942,8,88,1,89,1,89,
1,90,1,90,1,91,1,91,1,92,1,92,1,92,1,92,3,92,954,8,92,1,92,1,92,1,93,1,93,
3,93,960,8,93,1,94,1,94,1,95,1,95,3,95,966,8,95,1,96,1,96,1,96,1,96,1,96,
1,96,1,96,1,96,1,97,1,97,1,98,1,98,1,99,1,99,1,100,1,100,1,101,1,101,1,101,
1,101,1,101,1,101,1,101,3,101,991,8,101,1,101,1,101,1,101,1,102,1,102,3,
102,998,8,102,1,102,3,102,1001,8,102,1,102,1,102,1,103,1,103,1,103,5,103,
1008,8,103,10,103,12,103,1011,9,103,1,104,1,104,3,104,1015,8,104,1,104,1,
104,3,104,1019,8,104,1,104,1,104,1,105,1,105,1,105,1,105,1,105,3,105,1028,
8,105,1,106,1,106,1,106,5,106,1033,8,106,10,106,12,106,1036,9,106,1,106,
1,106,1,106,1,107,1,107,1,107,5,107,1044,8,107,10,107,12,107,1047,9,107,
1,107,1,107,1,107,1,107,3,107,1053,8,107,1,107,1,107,1,108,1,108,1,109,1,
109,1,110,1,110,1,111,1,111,1,112,1,112,3,112,1067,8,112,1,113,1,113,1,113,
1,113,3,113,1073,8,113,3,113,1075,8,113,1,114,1,114,1,115,1,115,1,116,1,
116,1,117,1,117,1,117,1,117,1,117,5,117,1088,8,117,10,117,12,117,1091,9,
117,1,117,1,117,1,118,1,118,1,119,1,119,1,120,1,120,1,120,3,120,1102,8,120,
1,121,1,121,1,122,1,122,1,123,1,123,1,123,5,123,1111,8,123,10,123,12,123,
1114,9,123,3,123,1116,8,123,1,124,1,124,3,124,1120,8,124,1,124,3,124,1123,
8,124,1,124,1,124,1,125,1,125,1,125,5,125,1130,8,125,10,125,12,125,1133,
9,125,1,125,1,125,1,125,1,126,1,126,1,126,1,126,1,126,1,126,5,126,1144,8,
126,10,126,12,126,1147,9,126,1,126,1,126,3,126,1151,8,126,1,126,1,126,1,
127,3,127,1156,8,127,1,127,1,127,1,128,1,128,1,129,1,129,1,129,1,129,1,129,
3,129,1167,8,129,1,130,1,130,1,130,1,130,1,131,1,131,1,131,3,131,1176,8,
131,1,132,1,132,1,132,1,132,1,132,1,132,1,132,1,132,1,132,1,133,1,133,1,
133,1,133,1,133,3,133,1192,8,133,1,134,1,134,1,134,3,134,1197,8,134,1,135,
1,135,3,135,1201,8,135,1,136,1,136,1,136,1,136,1,136,1,136,1,136,5,136,1210,
8,136,10,136,12,136,1213,9,136,1,136,1,136,3,136,1217,8,136,1,136,1,136,
1,137,1,137,1,138,1,138,1,138,3,138,1226,8,138,1,139,1,139,1,139,1,139,1,
139,3,139,1233,8,139,1,140,3,140,1236,8,140,1,140,3,140,1239,8,140,1,140,
3,140,1242,8,140,1,141,1,141,1,141,1,141,1,141,5,141,1249,8,141,10,141,12,
141,1252,9,141,1,141,1,141,1,141,1,142,1,142,1,143,1,143,1,143,3,143,1262,
8,143,1,144,1,144,1,144,1,144,1,144,3,144,1269,8,144,1,145,1,145,1,145,1,
145,1,145,3,145,1276,8,145,1,145,1,145,1,146,1,146,1,146,5,146,1283,8,146,
10,146,12,146,1286,9,146,1,146,1,146,1,146,1,146,1,147,1,147,1,147,1,147,
1,147,1,147,1,147,5,147,1299,8,147,10,147,12,147,1302,9,147,1,147,1,147,
1,147,1,148,1,148,1,149,1,149,1,150,5,150,1312,8,150,10,150,12,150,1315,
9,150,1,150,3,150,1318,8,150,1,150,5,150,1321,8,150,10,150,12,150,1324,9,
150,1,151,1,151,3,151,1328,8,151,1,152,1,152,1,152,3,152,1333,8,152,1,152,
1,152,1,152,1,152,1,152,1,153,1,153,1,154,1,154,1,155,1,155,1,156,1,156,
1,156,1,156,3,156,1350,8,156,1,157,1,157,1,157,1,157,5,157,1356,8,157,10,
157,12,157,1359,9,157,1,157,1,157,1,158,1,158,3,158,1365,8,158,3,158,1367,
8,158,1,158,1,158,1,158,3,158,1372,8,158,1,159,1,159,3,159,1376,8,159,1,
159,1,159,1,159,1,160,1,160,1,160,1,160,5,160,1385,8,160,10,160,12,160,1388,
9,160,1,161,1,161,1,161,1,161,1,161,1,161,1,161,3,161,1397,8,161,1,162,1,
162,1,162,1,162,1,162,3,162,1404,8,162,1,163,1,163,1,163,1,164,1,164,1,164,
1,164,1,164,1,164,1,164,3,164,1416,8,164,1,165,1,165,1,165,1,166,1,166,1,
166,1,166,1,166,1,166,1,166,1,166,1,166,1,166,1,166,3,166,1432,8,166,1,167,
1,167,1,168,1,168,3,168,1438,8,168,1,169,3,169,1441,8,169,1,169,3,169,1444,
8,169,1,170,1,170,1,170,1,170,1,170,1,171,3,171,1452,8,171,1,171,3,171,1455,
8,171,1,171,1,171,1,171,3,171,1460,8,171,1,172,1,172,1,172,1,172,1,172,1,
173,1,173,1,173,1,173,1,173,1,173,1,174,1,174,1,175,1,175,1,175,1,175,1,
175,1,175,5,175,1481,8,175,10,175,12,175,1484,9,175,1,175,1,175,1,176,1,
176,1,176,3,176,1491,8,176,1,177,1,177,1,177,5,177,1496,8,177,10,177,12,
177,1499,9,177,1,178,1,178,1,178,5,178,1504,8,178,10,178,12,178,1507,9,178,
1,179,1,179,1,179,1,180,1,180,1,180,1,180,1,180,1,180,3,180,1518,8,180,1,
181,4,181,1521,8,181,11,181,12,181,1522,1,181,1,181,1,182,1,182,1,182,1,
182,5,182,1531,8,182,10,182,12,182,1534,9,182,1,183,1,183,1,183,1,183,1,
183,5,183,1541,8,183,10,183,12,183,1544,9,183,1,183,1,183,1,183,1,184,1,
184,1,184,1,184,1,184,1,184,3,184,1555,8,184,1,184,1,184,1,184,1,185,1,185,
1,186,1,186,3,186,1564,8,186,1,187,1,187,1,188,1,188,1,189,1,189,3,189,1572,
8,189,1,190,1,190,1,190,1,190,1,190,1,190,5,190,1580,8,190,10,190,12,190,
1583,9,190,1,191,1,191,1,191,3,191,1588,8,191,1,191,1,191,1,191,5,191,1593,
8,191,10,191,12,191,1596,9,191,1,192,1,192,1,192,1,193,1,193,1,193,1,193,
1,193,1,193,1,193,5,193,1608,8,193,10,193,12,193,1611,9,193,1,193,1,193,
3,193,1615,8,193,1,193,1,193,1,194,1,194,1,195,1,195,1,195,1,195,1,195,1,
195,5,195,1627,8,195,10,195,12,195,1630,9,195,1,196,1,196,1,196,1,197,1,
197,1,198,1,198,1,198,1,198,3,198,1641,8,198,1,198,0,0,199,0,2,4,6,8,10,
12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,
60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,
106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,
142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,
178,180,182,184,186,188,190,192,194,196,198,200,202,204,206,208,210,212,
214,216,218,220,222,224,226,228,230,232,234,236,238,240,242,244,246,248,
250,252,254,256,258,260,262,264,266,268,270,272,274,276,278,280,282,284,
286,288,290,292,294,296,298,300,302,304,306,308,310,312,314,316,318,320,
322,324,326,328,330,332,334,336,338,340,342,344,346,348,350,352,354,356,
358,360,362,364,366,368,370,372,374,376,378,380,382,384,386,388,390,392,
394,396,0,11,3,0,5,6,108,108,152,152,4,0,13,13,63,63,110,110,123,123,19,
0,43,43,45,45,52,53,58,58,64,64,72,73,78,78,83,84,90,90,93,93,95,97,99,99,
103,104,119,119,125,126,128,128,133,133,138,138,144,147,2,0,87,87,115,115,
1,0,23,24,2,0,54,54,124,124,3,0,75,75,136,136,141,141,4,0,26,28,48,48,66,
66,100,100,2,0,23,24,32,37,2,0,154,154,158,158,2,0,5,6,101,101,1642,0,398,
1,0,0,0,2,400,1,0,0,0,4,402,1,0,0,0,6,404,1,0,0,0,8,406,1,0,0,0,10,408,1,
0,0,0,12,410,1,0,0,0,14,412,1,0,0,0,16,414,1,0,0,0,18,416,1,0,0,0,20,418,
1,0,0,0,22,420,1,0,0,0,24,422,1,0,0,0,26,424,1,0,0,0,28,426,1,0,0,0,30,428,
1,0,0,0,32,432,1,0,0,0,34,437,1,0,0,0,36,448,1,0,0,0,38,450,1,0,0,0,40,463,
1,0,0,0,42,465,1,0,0,0,44,477,1,0,0,0,46,482,1,0,0,0,48,491,1,0,0,0,50,512,
1,0,0,0,52,523,1,0,0,0,54,536,1,0,0,0,56,538,1,0,0,0,58,540,1,0,0,0,60,543,
1,0,0,0,62,550,1,0,0,0,64,554,1,0,0,0,66,556,1,0,0,0,68,558,1,0,0,0,70,560,
1,0,0,0,72,566,1,0,0,0,74,568,1,0,0,0,76,570,1,0,0,0,78,572,1,0,0,0,80,583,
1,0,0,0,82,585,1,0,0,0,84,602,1,0,0,0,86,616,1,0,0,0,88,618,1,0,0,0,90,625,
1,0,0,0,92,638,1,0,0,0,94,640,1,0,0,0,96,644,1,0,0,0,98,651,1,0,0,0,100,
653,1,0,0,0,102,660,1,0,0,0,104,671,1,0,0,0,106,675,1,0,0,0,108,683,1,0,
0,0,110,698,1,0,0,0,112,712,1,0,0,0,114,717,1,0,0,0,116,722,1,0,0,0,118,
724,1,0,0,0,120,730,1,0,0,0,122,732,1,0,0,0,124,743,1,0,0,0,126,748,1,0,
0,0,128,753,1,0,0,0,130,761,1,0,0,0,132,764,1,0,0,0,134,779,1,0,0,0,136,
785,1,0,0,0,138,790,1,0,0,0,140,803,1,0,0,0,142,808,1,0,0,0,144,820,1,0,
0,0,146,839,1,0,0,0,148,845,1,0,0,0,150,851,1,0,0,0,152,853,1,0,0,0,154,
866,1,0,0,0,156,873,1,0,0,0,158,885,1,0,0,0,160,887,1,0,0,0,162,894,1,0,
0,0,164,899,1,0,0,0,166,904,1,0,0,0,168,907,1,0,0,0,170,918,1,0,0,0,172,
925,1,0,0,0,174,932,1,0,0,0,176,934,1,0,0,0,178,943,1,0,0,0,180,945,1,0,
0,0,182,947,1,0,0,0,184,949,1,0,0,0,186,959,1,0,0,0,188,961,1,0,0,0,190,
965,1,0,0,0,192,967,1,0,0,0,194,975,1,0,0,0,196,977,1,0,0,0,198,979,1,0,
0,0,200,981,1,0,0,0,202,983,1,0,0,0,204,1000,1,0,0,0,206,1004,1,0,0,0,208,
1012,1,0,0,0,210,1027,1,0,0,0,212,1029,1,0,0,0,214,1040,1,0,0,0,216,1056,
1,0,0,0,218,1058,1,0,0,0,220,1060,1,0,0,0,222,1062,1,0,0,0,224,1066,1,0,
0,0,226,1068,1,0,0,0,228,1076,1,0,0,0,230,1078,1,0,0,0,232,1080,1,0,0,0,
234,1082,1,0,0,0,236,1094,1,0,0,0,238,1096,1,0,0,0,240,1101,1,0,0,0,242,
1103,1,0,0,0,244,1105,1,0,0,0,246,1115,1,0,0,0,248,1119,1,0,0,0,250,1126,
1,0,0,0,252,1137,1,0,0,0,254,1155,1,0,0,0,256,1159,1,0,0,0,258,1166,1,0,
0,0,260,1168,1,0,0,0,262,1175,1,0,0,0,264,1177,1,0,0,0,266,1186,1,0,0,0,
268,1193,1,0,0,0,270,1200,1,0,0,0,272,1202,1,0,0,0,274,1220,1,0,0,0,276,
1225,1,0,0,0,278,1232,1,0,0,0,280,1235,1,0,0,0,282,1243,1,0,0,0,284,1256,
1,0,0,0,286,1258,1,0,0,0,288,1268,1,0,0,0,290,1270,1,0,0,0,292,1279,1,0,
0,0,294,1291,1,0,0,0,296,1306,1,0,0,0,298,1308,1,0,0,0,300,1313,1,0,0,0,
302,1327,1,0,0,0,304,1329,1,0,0,0,306,1339,1,0,0,0,308,1341,1,0,0,0,310,
1343,1,0,0,0,312,1345,1,0,0,0,314,1351,1,0,0,0,316,1366,1,0,0,0,318,1373,
1,0,0,0,320,1380,1,0,0,0,322,1396,1,0,0,0,324,1403,1,0,0,0,326,1405,1,0,
0,0,328,1415,1,0,0,0,330,1417,1,0,0,0,332,1431,1,0,0,0,334,1433,1,0,0,0,
336,1435,1,0,0,0,338,1440,1,0,0,0,340,1445,1,0,0,0,342,1451,1,0,0,0,344,
1461,1,0,0,0,346,1466,1,0,0,0,348,1472,1,0,0,0,350,1474,1,0,0,0,352,1490,
1,0,0,0,354,1492,1,0,0,0,356,1500,1,0,0,0,358,1508,1,0,0,0,360,1517,1,0,
0,0,362,1520,1,0,0,0,364,1526,1,0,0,0,366,1535,1,0,0,0,368,1548,1,0,0,0,
370,1559,1,0,0,0,372,1563,1,0,0,0,374,1565,1,0,0,0,376,1567,1,0,0,0,378,
1571,1,0,0,0,380,1573,1,0,0,0,382,1587,1,0,0,0,384,1597,1,0,0,0,386,1600,
1,0,0,0,388,1618,1,0,0,0,390,1620,1,0,0,0,392,1631,1,0,0,0,394,1634,1,0,
0,0,396,1636,1,0,0,0,398,399,3,56,28,0,399,1,1,0,0,0,400,401,3,94,47,0,401,
3,1,0,0,0,402,403,3,116,58,0,403,5,1,0,0,0,404,405,3,120,60,0,405,7,1,0,
0,0,406,407,3,146,73,0,407,9,1,0,0,0,408,409,3,238,119,0,409,11,1,0,0,0,
410,411,3,256,128,0,411,13,1,0,0,0,412,413,3,298,149,0,413,15,1,0,0,0,414,
415,3,296,148,0,415,17,1,0,0,0,416,417,3,306,153,0,417,19,1,0,0,0,418,419,
3,348,174,0,419,21,1,0,0,0,420,421,3,374,187,0,421,23,1,0,0,0,422,423,3,
370,185,0,423,25,1,0,0,0,424,425,3,388,194,0,425,27,1,0,0,0,426,427,5,44,
0,0,427,29,1,0,0,0,428,429,5,44,0,0,429,430,5,132,0,0,430,431,5,1,0,0,431,
31,1,0,0,0,432,433,5,44,0,0,433,435,5,132,0,0,434,436,3,340,170,0,435,434,
1,0,0,0,435,436,1,0,0,0,436,33,1,0,0,0,437,438,5,2,0,0,438,443,3,236,118,
0,439,440,5,3,0,0,440,442,3,236,118,0,441,439,1,0,0,0,442,445,1,0,0,0,443,
441,1,0,0,0,443,444,1,0,0,0,444,446,1,0,0,0,445,443,1,0,0,0,446,447,5,4,
0,0,447,35,1,0,0,0,448,449,7,0,0,0,449,37,1,0,0,0,450,459,5,7,0,0,451,456,
3,106,53,0,452,453,5,3,0,0,453,455,3,106,53,0,454,452,1,0,0,0,455,458,1,
0,0,0,456,454,1,0,0,0,456,457,1,0,0,0,457,460,1,0,0,0,458,456,1,0,0,0,459,
451,1,0,0,0,459,460,1,0,0,0,460,461,1,0,0,0,461,462,5,8,0,0,462,39,1,0,0,
0,463,464,3,320,160,0,464,41,1,0,0,0,465,468,5,46,0,0,466,467,5,9,0,0,467,
469,3,372,186,0,468,466,1,0,0,0,468,469,1,0,0,0,469,470,1,0,0,0,470,471,
5,105,0,0,471,472,3,240,120,0,472,43,1,0,0,0,473,478,3,50,25,0,474,478,3,
60,30,0,475,478,3,208,104,0,476,478,3,318,159,0,477,473,1,0,0,0,477,474,
1,0,0,0,477,475,1,0,0,0,477,476,1,0,0,0,478,45,1,0,0,0,479,481,3,98,49,0,
480,479,1,0,0,0,481,484,1,0,0,0,482,480,1,0,0,0,482,483,1,0,0,0,483,486,
1,0,0,0,484,482,1,0,0,0,485,487,3,90,45,0,486,485,1,0,0,0,486,487,1,0,0,
0,487,489,1,0,0,0,488,490,3,212,106,0,489,488,1,0,0,0,489,490,1,0,0,0,490,
47,1,0,0,0,491,492,5,47,0,0,492,493,3,388,194,0,493,494,5,77,0,0,494,498,
3,158,79,0,495,497,3,262,131,0,496,495,1,0,0,0,497,500,1,0,0,0,498,496,1,
0,0,0,498,499,1,0,0,0,499,501,1,0,0,0,500,498,1,0,0,0,501,502,5,1,0,0,502,
506,3,332,166,0,503,505,3,332,166,0,504,503,1,0,0,0,505,508,1,0,0,0,506,
504,1,0,0,0,506,507,1,0,0,0,507,509,1,0,0,0,508,506,1,0,0,0,509,510,5,10,
0,0,510,511,5,1,0,0,511,49,1,0,0,0,512,513,5,50,0,0,513,514,3,70,35,0,514,
516,5,105,0,0,515,517,5,107,0,0,516,515,1,0,0,0,516,517,1,0,0,0,517,519,
1,0,0,0,518,520,5,140,0,0,519,518,1,0,0,0,519,520,1,0,0,0,520,521,1,0,0,
0,521,522,3,186,93,0,522,51,1,0,0,0,523,527,3,158,79,0,524,526,3,262,131,
0,525,524,1,0,0,0,526,529,1,0,0,0,527,525,1,0,0,0,527,528,1,0,0,0,528,530,
1,0,0,0,529,527,1,0,0,0,530,531,5,11,0,0,531,532,3,134,67,0,532,533,5,1,
0,0,533,53,1,0,0,0,534,537,3,56,28,0,535,537,3,268,134,0,536,534,1,0,0,0,
536,535,1,0,0,0,537,55,1,0,0,0,538,539,5,157,0,0,539,57,1,0,0,0,540,541,
5,12,0,0,541,542,3,0,0,0,542,59,1,0,0,0,543,545,5,54,0,0,544,546,3,70,35,
0,545,544,1,0,0,0,545,546,1,0,0,0,546,547,1,0,0,0,547,548,5,105,0,0,548,
549,3,186,93,0,549,61,1,0,0,0,550,552,5,57,0,0,551,553,3,396,198,0,552,551,
1,0,0,0,552,553,1,0,0,0,553,63,1,0,0,0,554,555,5,59,0,0,555,65,1,0,0,0,556,
557,3,232,116,0,557,67,1,0,0,0,558,559,3,232,116,0,559,69,1,0,0,0,560,561,
5,7,0,0,561,562,3,66,33,0,562,563,5,9,0,0,563,564,3,68,34,0,564,565,5,8,
0,0,565,71,1,0,0,0,566,567,7,1,0,0,567,73,1,0,0,0,568,569,7,2,0,0,569,75,
1,0,0,0,570,571,7,3,0,0,571,77,1,0,0,0,572,577,3,80,40,0,573,574,5,3,0,0,
574,576,3,80,40,0,575,573,1,0,0,0,576,579,1,0,0,0,577,575,1,0,0,0,577,578,
1,0,0,0,578,580,1,0,0,0,579,577,1,0,0,0,580,581,5,9,0,0,581,582,3,332,166,
0,582,79,1,0,0,0,583,584,3,134,67,0,584,81,1,0,0,0,585,586,5,61,0,0,586,
587,3,310,155,0,587,591,5,105,0,0,588,590,3,78,39,0,589,588,1,0,0,0,590,
593,1,0,0,0,591,589,1,0,0,0,591,592,1,0,0,0,592,597,1,0,0,0,593,591,1,0,
0,0,594,595,5,109,0,0,595,596,5,9,0,0,596,598,3,332,166,0,597,594,1,0,0,
0,597,598,1,0,0,0,598,599,1,0,0,0,599,600,5,14,0,0,600,601,5,1,0,0,601,83,
1,0,0,0,602,603,5,56,0,0,603,607,3,332,166,0,604,606,3,332,166,0,605,604,
1,0,0,0,606,609,1,0,0,0,607,605,1,0,0,0,607,608,1,0,0,0,608,610,1,0,0,0,
609,607,1,0,0,0,610,611,5,68,0,0,611,612,5,1,0,0,612,85,1,0,0,0,613,617,
3,44,22,0,614,617,3,328,164,0,615,617,3,24,12,0,616,613,1,0,0,0,616,614,
1,0,0,0,616,615,1,0,0,0,617,87,1,0,0,0,618,619,3,94,47,0,619,620,5,9,0,0,
620,621,3,186,93,0,621,622,5,11,0,0,622,623,3,134,67,0,623,624,5,1,0,0,624,
89,1,0,0,0,625,626,5,62,0,0,626,630,3,88,44,0,627,629,3,88,44,0,628,627,
1,0,0,0,629,632,1,0,0,0,630,628,1,0,0,0,630,631,1,0,0,0,631,633,1,0,0,0,
632,630,1,0,0,0,633,634,5,15,0,0,634,635,5,1,0,0,635,91,1,0,0,0,636,639,
3,72,36,0,637,639,3,2,1,0,638,636,1,0,0,0,638,637,1,0,0,0,639,93,1,0,0,0,
640,641,5,157,0,0,641,95,1,0,0,0,642,645,3,128,64,0,643,645,3,316,158,0,
644,642,1,0,0,0,644,643,1,0,0,0,645,97,1,0,0,0,646,652,3,112,56,0,647,652,
3,142,71,0,648,652,3,250,125,0,649,652,3,344,172,0,650,652,3,368,184,0,651,
646,1,0,0,0,651,647,1,0,0,0,651,648,1,0,0,0,651,649,1,0,0,0,651,650,1,0,
0,0,652,99,1,0,0,0,653,654,3,54,27,0,654,655,5,9,0,0,655,656,3,240,120,0,
656,657,5,11,0,0,657,658,3,134,67,0,658,659,5,1,0,0,659,101,1,0,0,0,660,
661,5,65,0,0,661,665,3,100,50,0,662,664,3,100,50,0,663,662,1,0,0,0,664,667,
1,0,0,0,665,663,1,0,0,0,665,666,1,0,0,0,666,103,1,0,0,0,667,665,1,0,0,0,
668,669,3,298,149,0,669,670,5,9,0,0,670,672,1,0,0,0,671,668,1,0,0,0,671,
672,1,0,0,0,672,673,1,0,0,0,673,674,3,134,67,0,674,105,1,0,0,0,675,678,3,
134,67,0,676,677,5,9,0,0,677,679,3,284,142,0,678,676,1,0,0,0,678,679,1,0,
0,0,679,107,1,0,0,0,680,682,3,132,66,0,681,680,1,0,0,0,682,685,1,0,0,0,683,
681,1,0,0,0,683,684,1,0,0,0,684,687,1,0,0,0,685,683,1,0,0,0,686,688,3,102,
51,0,687,686,1,0,0,0,687,688,1,0,0,0,688,690,1,0,0,0,689,691,3,206,103,0,
690,689,1,0,0,0,690,691,1,0,0,0,691,693,1,0,0,0,692,694,3,380,190,0,693,
692,1,0,0,0,693,694,1,0,0,0,694,696,1,0,0,0,695,697,3,390,195,0,696,695,
1,0,0,0,696,697,1,0,0,0,697,109,1,0,0,0,698,699,3,4,2,0,699,708,5,2,0,0,
700,705,3,134,67,0,701,702,5,3,0,0,702,704,3,134,67,0,703,701,1,0,0,0,704,
707,1,0,0,0,705,703,1,0,0,0,705,706,1,0,0,0,706,709,1,0,0,0,707,705,1,0,
0,0,708,700,1,0,0,0,708,709,1,0,0,0,709,710,1,0,0,0,710,711,5,4,0,0,711,
111,1,0,0,0,712,713,3,114,57,0,713,714,3,108,54,0,714,715,5,16,0,0,715,716,
5,1,0,0,716,113,1,0,0,0,717,718,5,69,0,0,718,719,3,116,58,0,719,720,3,338,
169,0,720,721,5,1,0,0,721,115,1,0,0,0,722,723,5,157,0,0,723,117,1,0,0,0,
724,725,5,55,0,0,725,728,3,24,12,0,726,727,5,149,0,0,727,729,3,122,61,0,
728,726,1,0,0,0,728,729,1,0,0,0,729,119,1,0,0,0,730,731,5,157,0,0,731,121,
1,0,0,0,732,733,5,2,0,0,733,738,3,124,62,0,734,735,5,3,0,0,735,737,3,124,
62,0,736,734,1,0,0,0,737,740,1,0,0,0,738,736,1,0,0,0,738,739,1,0,0,0,739,
741,1,0,0,0,740,738,1,0,0,0,741,742,5,4,0,0,742,123,1,0,0,0,743,744,3,120,
60,0,744,125,1,0,0,0,745,746,3,24,12,0,746,747,5,12,0,0,747,749,1,0,0,0,
748,745,1,0,0,0,748,749,1,0,0,0,749,750,1,0,0,0,750,751,3,6,3,0,751,127,
1,0,0,0,752,754,5,74,0,0,753,752,1,0,0,0,753,754,1,0,0,0,754,755,1,0,0,0,
755,759,5,70,0,0,756,757,5,105,0,0,757,760,3,122,61,0,758,760,3,118,59,0,
759,756,1,0,0,0,759,758,1,0,0,0,759,760,1,0,0,0,760,129,1,0,0,0,761,762,
5,71,0,0,762,763,5,1,0,0,763,131,1,0,0,0,764,769,3,54,27,0,765,766,5,3,0,
0,766,768,3,54,27,0,767,765,1,0,0,0,768,771,1,0,0,0,769,767,1,0,0,0,769,
770,1,0,0,0,770,772,1,0,0,0,771,769,1,0,0,0,772,774,5,9,0,0,773,775,5,107,
0,0,774,773,1,0,0,0,774,775,1,0,0,0,775,776,1,0,0,0,776,777,3,240,120,0,
777,778,5,1,0,0,778,133,1,0,0,0,779,783,3,320,160,0,780,781,3,276,138,0,
781,782,3,320,160,0,782,784,1,0,0,0,783,780,1,0,0,0,783,784,1,0,0,0,784,
135,1,0,0,0,785,788,3,322,161,0,786,787,5,17,0,0,787,789,3,322,161,0,788,
786,1,0,0,0,788,789,1,0,0,0,789,137,1,0,0,0,790,795,3,238,119,0,791,792,
5,3,0,0,792,794,3,238,119,0,793,791,1,0,0,0,794,797,1,0,0,0,795,793,1,0,
0,0,795,796,1,0,0,0,796,798,1,0,0,0,797,795,1,0,0,0,798,799,5,9,0,0,799,
800,3,240,120,0,800,139,1,0,0,0,801,804,3,74,37,0,802,804,3,8,4,0,803,801,
1,0,0,0,803,802,1,0,0,0,804,806,1,0,0,0,805,807,3,34,17,0,806,805,1,0,0,
0,806,807,1,0,0,0,807,141,1,0,0,0,808,809,3,144,72,0,809,810,3,46,23,0,810,
814,3,332,166,0,811,813,3,332,166,0,812,811,1,0,0,0,813,816,1,0,0,0,814,
812,1,0,0,0,814,815,1,0,0,0,815,817,1,0,0,0,816,814,1,0,0,0,817,818,5,18,
0,0,818,819,5,1,0,0,819,143,1,0,0,0,820,821,5,80,0,0,821,833,3,146,73,0,
822,823,5,2,0,0,823,828,3,138,69,0,824,825,5,1,0,0,825,827,3,138,69,0,826,
824,1,0,0,0,827,830,1,0,0,0,828,826,1,0,0,0,828,829,1,0,0,0,829,831,1,0,
0,0,830,828,1,0,0,0,831,832,5,4,0,0,832,834,1,0,0,0,833,822,1,0,0,0,833,
834,1,0,0,0,834,835,1,0,0,0,835,836,5,9,0,0,836,837,3,240,120,0,837,838,
5,1,0,0,838,145,1,0,0,0,839,840,5,157,0,0,840,147,1,0,0,0,841,846,3,42,21,
0,842,846,3,150,75,0,843,846,3,162,81,0,844,846,3,164,82,0,845,841,1,0,0,
0,845,842,1,0,0,0,845,843,1,0,0,0,845,844,1,0,0,0,846,149,1,0,0,0,847,852,
3,152,76,0,848,852,3,154,77,0,849,852,3,156,78,0,850,852,3,160,80,0,851,
847,1,0,0,0,851,848,1,0,0,0,851,849,1,0,0,0,851,850,1,0,0,0,852,151,1,0,
0,0,853,855,5,50,0,0,854,856,3,70,35,0,855,854,1,0,0,0,855,856,1,0,0,0,856,
857,1,0,0,0,857,859,5,105,0,0,858,860,5,107,0,0,859,858,1,0,0,0,859,860,
1,0,0,0,860,862,1,0,0,0,861,863,5,140,0,0,862,861,1,0,0,0,862,863,1,0,0,
0,863,864,1,0,0,0,864,865,3,240,120,0,865,153,1,0,0,0,866,868,5,54,0,0,867,
869,3,70,35,0,868,867,1,0,0,0,868,869,1,0,0,0,869,870,1,0,0,0,870,871,5,
105,0,0,871,872,3,240,120,0,872,155,1,0,0,0,873,875,5,92,0,0,874,876,3,70,
35,0,875,874,1,0,0,0,875,876,1,0,0,0,876,877,1,0,0,0,877,879,5,105,0,0,878,
880,5,140,0,0,879,878,1,0,0,0,879,880,1,0,0,0,880,881,1,0,0,0,881,882,3,
240,120,0,882,157,1,0,0,0,883,886,3,10,5,0,884,886,3,388,194,0,885,883,1,
0,0,0,885,884,1,0,0,0,886,159,1,0,0,0,887,889,5,124,0,0,888,890,3,70,35,
0,889,888,1,0,0,0,889,890,1,0,0,0,890,891,1,0,0,0,891,892,5,105,0,0,892,
893,3,240,120,0,893,161,1,0,0,0,894,897,5,82,0,0,895,896,5,9,0,0,896,898,
3,372,186,0,897,895,1,0,0,0,897,898,1,0,0,0,898,163,1,0,0,0,899,902,5,81,
0,0,900,901,5,9,0,0,901,903,3,372,186,0,902,900,1,0,0,0,902,903,1,0,0,0,
903,165,1,0,0,0,904,905,5,19,0,0,905,906,3,4,2,0,906,167,1,0,0,0,907,908,
5,85,0,0,908,909,3,216,108,0,909,910,5,134,0,0,910,913,3,170,85,0,911,912,
5,67,0,0,912,914,3,172,86,0,913,911,1,0,0,0,913,914,1,0,0,0,914,915,1,0,
0,0,915,916,5,20,0,0,916,917,5,1,0,0,917,169,1,0,0,0,918,922,3,332,166,0,
919,921,3,332,166,0,920,919,1,0,0,0,921,924,1,0,0,0,922,920,1,0,0,0,922,
923,1,0,0,0,923,171,1,0,0,0,924,922,1,0,0,0,925,929,3,332,166,0,926,928,
3,332,166,0,927,926,1,0,0,0,928,931,1,0,0,0,929,927,1,0,0,0,929,930,1,0,
0,0,930,173,1,0,0,0,931,929,1,0,0,0,932,933,3,232,116,0,933,175,1,0,0,0,
934,935,3,388,194,0,935,936,5,11,0,0,936,937,3,66,33,0,937,938,5,135,0,0,
938,941,3,68,34,0,939,940,5,60,0,0,940,942,3,174,87,0,941,939,1,0,0,0,941,
942,1,0,0,0,942,177,1,0,0,0,943,944,3,232,116,0,944,179,1,0,0,0,945,946,
3,178,89,0,946,181,1,0,0,0,947,948,3,178,89,0,948,183,1,0,0,0,949,950,5,
7,0,0,950,953,3,180,90,0,951,952,5,9,0,0,952,954,3,182,91,0,953,951,1,0,
0,0,953,954,1,0,0,0,954,955,1,0,0,0,955,956,5,8,0,0,956,185,1,0,0,0,957,
960,3,86,43,0,958,960,3,4,2,0,959,957,1,0,0,0,959,958,1,0,0,0,960,187,1,
0,0,0,961,962,5,88,0,0,962,189,1,0,0,0,963,966,3,272,136,0,964,966,3,386,
193,0,965,963,1,0,0,0,965,964,1,0,0,0,966,191,1,0,0,0,967,968,5,21,0,0,968,
969,3,198,99,0,969,970,3,200,100,0,970,971,3,196,98,0,971,972,3,200,100,
0,972,973,3,194,97,0,973,974,5,22,0,0,974,193,1,0,0,0,975,976,3,320,160,
0,976,195,1,0,0,0,977,978,3,320,160,0,978,197,1,0,0,0,979,980,3,320,160,
0,980,199,1,0,0,0,981,982,7,4,0,0,982,201,1,0,0,0,983,984,3,54,27,0,984,
985,5,9,0,0,985,986,3,204,102,0,986,990,5,77,0,0,987,988,3,4,2,0,988,989,
5,12,0,0,989,991,1,0,0,0,990,987,1,0,0,0,990,991,1,0,0,0,991,992,1,0,0,0,
992,993,3,0,0,0,993,994,5,1,0,0,994,203,1,0,0,0,995,997,7,5,0,0,996,998,
3,70,35,0,997,996,1,0,0,0,997,998,1,0,0,0,998,999,1,0,0,0,999,1001,5,105,
0,0,1000,995,1,0,0,0,1000,1001,1,0,0,0,1001,1002,1,0,0,0,1002,1003,3,4,2,
0,1003,205,1,0,0,0,1004,1005,5,89,0,0,1005,1009,3,202,101,0,1006,1008,3,
202,101,0,1007,1006,1,0,0,0,1008,1011,1,0,0,0,1009,1007,1,0,0,0,1009,1010,
1,0,0,0,1010,207,1,0,0,0,1011,1009,1,0,0,0,1012,1014,5,92,0,0,1013,1015,
3,70,35,0,1014,1013,1,0,0,0,1014,1015,1,0,0,0,1015,1016,1,0,0,0,1016,1018,
5,105,0,0,1017,1019,5,140,0,0,1018,1017,1,0,0,0,1018,1019,1,0,0,0,1019,1020,
1,0,0,0,1020,1021,3,186,93,0,1021,209,1,0,0,0,1022,1028,5,153,0,0,1023,1028,
5,155,0,0,1024,1028,3,218,109,0,1025,1028,5,156,0,0,1026,1028,3,334,167,
0,1027,1022,1,0,0,0,1027,1023,1,0,0,0,1027,1024,1,0,0,0,1027,1025,1,0,0,
0,1027,1026,1,0,0,0,1028,211,1,0,0,0,1029,1030,5,94,0,0,1030,1034,3,214,
107,0,1031,1033,3,214,107,0,1032,1031,1,0,0,0,1033,1036,1,0,0,0,1034,1032,
1,0,0,0,1034,1035,1,0,0,0,1035,1037,1,0,0,0,1036,1034,1,0,0,0,1037,1038,
5,25,0,0,1038,1039,5,1,0,0,1039,213,1,0,0,0,1040,1045,3,388,194,0,1041,1042,
5,3,0,0,1042,1044,3,388,194,0,1043,1041,1,0,0,0,1044,1047,1,0,0,0,1045,1043,
1,0,0,0,1045,1046,1,0,0,0,1046,1048,1,0,0,0,1047,1045,1,0,0,0,1048,1049,
5,9,0,0,1049,1052,3,240,120,0,1050,1051,5,11,0,0,1051,1053,3,134,67,0,1052,
1050,1,0,0,0,1052,1053,1,0,0,0,1053,1054,1,0,0,0,1054,1055,5,1,0,0,1055,
215,1,0,0,0,1056,1057,3,134,67,0,1057,217,1,0,0,0,1058,1059,7,6,0,0,1059,
219,1,0,0,0,1060,1061,5,98,0,0,1061,221,1,0,0,0,1062,1063,7,7,0,0,1063,223,
1,0,0,0,1064,1067,3,4,2,0,1065,1067,3,24,12,0,1066,1064,1,0,0,0,1066,1065,
1,0,0,0,1067,225,1,0,0,0,1068,1074,3,224,112,0,1069,1072,5,51,0,0,1070,1073,
3,116,58,0,1071,1073,3,370,185,0,1072,1070,1,0,0,0,1072,1071,1,0,0,0,1073,
1075,1,0,0,0,1074,1069,1,0,0,0,1074,1075,1,0,0,0,1075,227,1,0,0,0,1076,1077,
5,1,0,0,1077,229,1,0,0,0,1078,1079,5,102,0,0,1079,231,1,0,0,0,1080,1081,
3,320,160,0,1081,233,1,0,0,0,1082,1083,5,106,0,0,1083,1084,5,2,0,0,1084,
1089,3,354,177,0,1085,1086,5,3,0,0,1086,1088,3,354,177,0,1087,1085,1,0,0,
0,1088,1091,1,0,0,0,1089,1087,1,0,0,0,1089,1090,1,0,0,0,1090,1092,1,0,0,
0,1091,1089,1,0,0,0,1092,1093,5,4,0,0,1093,235,1,0,0,0,1094,1095,3,134,67,
0,1095,237,1,0,0,0,1096,1097,5,157,0,0,1097,239,1,0,0,0,1098,1102,3,148,
74,0,1099,1102,3,224,112,0,1100,1102,3,328,164,0,1101,1098,1,0,0,0,1101,
1099,1,0,0,0,1101,1100,1,0,0,0,1102,241,1,0,0,0,1103,1104,3,4,2,0,1104,243,
1,0,0,0,1105,1106,3,232,116,0,1106,245,1,0,0,0,1107,1116,3,210,105,0,1108,
1112,3,258,129,0,1109,1111,3,262,131,0,1110,1109,1,0,0,0,1111,1114,1,0,0,
0,1112,1110,1,0,0,0,1112,1113,1,0,0,0,1113,1116,1,0,0,0,1114,1112,1,0,0,
0,1115,1107,1,0,0,0,1115,1108,1,0,0,0,1116,247,1,0,0,0,1117,1120,3,76,38,
0,1118,1120,3,12,6,0,1119,1117,1,0,0,0,1119,1118,1,0,0,0,1120,1122,1,0,0,
0,1121,1123,3,34,17,0,1122,1121,1,0,0,0,1122,1123,1,0,0,0,1123,1124,1,0,
0,0,1124,1125,5,1,0,0,1125,249,1,0,0,0,1126,1127,3,252,126,0,1127,1131,3,
46,23,0,1128,1130,3,332,166,0,1129,1128,1,0,0,0,1130,1133,1,0,0,0,1131,1129,
1,0,0,0,1131,1132,1,0,0,0,1132,1134,1,0,0,0,1133,1131,1,0,0,0,1134,1135,
5,29,0,0,1135,1136,5,1,0,0,1136,251,1,0,0,0,1137,1138,5,111,0,0,1138,1150,
3,256,128,0,1139,1140,5,2,0,0,1140,1145,3,254,127,0,1141,1142,5,1,0,0,1142,
1144,3,254,127,0,1143,1141,1,0,0,0,1144,1147,1,0,0,0,1145,1143,1,0,0,0,1145,
1146,1,0,0,0,1146,1148,1,0,0,0,1147,1145,1,0,0,0,1148,1149,5,4,0,0,1149,
1151,1,0,0,0,1150,1139,1,0,0,0,1150,1151,1,0,0,0,1151,1152,1,0,0,0,1152,
1153,5,1,0,0,1153,253,1,0,0,0,1154,1156,5,148,0,0,1155,1154,1,0,0,0,1155,
1156,1,0,0,0,1156,1157,1,0,0,0,1157,1158,3,138,69,0,1158,255,1,0,0,0,1159,
1160,5,157,0,0,1160,257,1,0,0,0,1161,1167,3,0,0,0,1162,1167,3,92,46,0,1163,
1167,3,140,70,0,1164,1167,3,158,79,0,1165,1167,3,242,121,0,1166,1161,1,0,
0,0,1166,1162,1,0,0,0,1166,1163,1,0,0,0,1166,1164,1,0,0,0,1166,1165,1,0,
0,0,1167,259,1,0,0,0,1168,1169,5,123,0,0,1169,1170,3,166,83,0,1170,1171,
3,58,29,0,1171,261,1,0,0,0,1172,1176,3,58,29,0,1173,1176,3,166,83,0,1174,
1176,3,184,92,0,1175,1172,1,0,0,0,1175,1173,1,0,0,0,1175,1174,1,0,0,0,1176,
263,1,0,0,0,1177,1178,5,112,0,0,1178,1179,5,2,0,0,1179,1180,3,388,194,0,
1180,1181,5,30,0,0,1181,1182,3,40,20,0,1182,1183,5,31,0,0,1183,1184,3,216,
108,0,1184,1185,5,4,0,0,1185,265,1,0,0,0,1186,1191,5,113,0,0,1187,1188,5,
2,0,0,1188,1189,3,244,122,0,1189,1190,5,4,0,0,1190,1192,1,0,0,0,1191,1187,
1,0,0,0,1191,1192,1,0,0,0,1192,267,1,0,0,0,1193,1196,3,260,130,0,1194,1195,
5,116,0,0,1195,1197,3,56,28,0,1196,1194,1,0,0,0,1196,1197,1,0,0,0,1197,269,
1,0,0,0,1198,1201,3,0,0,0,1199,1201,3,260,130,0,1200,1198,1,0,0,0,1200,1199,
1,0,0,0,1201,271,1,0,0,0,1202,1203,5,114,0,0,1203,1204,5,79,0,0,1204,1216,
3,18,9,0,1205,1206,5,2,0,0,1206,1211,3,286,143,0,1207,1208,5,3,0,0,1208,
1210,3,286,143,0,1209,1207,1,0,0,0,1210,1213,1,0,0,0,1211,1209,1,0,0,0,1211,
1212,1,0,0,0,1212,1214,1,0,0,0,1213,1211,1,0,0,0,1214,1215,5,4,0,0,1215,
1217,1,0,0,0,1216,1205,1,0,0,0,1216,1217,1,0,0,0,1217,1218,1,0,0,0,1218,
1219,5,1,0,0,1219,273,1,0,0,0,1220,1221,7,8,0,0,1221,275,1,0,0,0,1222,1226,
3,274,137,0,1223,1226,5,86,0,0,1224,1226,5,91,0,0,1225,1222,1,0,0,0,1225,
1223,1,0,0,0,1225,1224,1,0,0,0,1226,277,1,0,0,0,1227,1233,3,94,47,0,1228,
1233,3,116,58,0,1229,1233,3,146,73,0,1230,1233,3,256,128,0,1231,1233,3,370,
185,0,1232,1227,1,0,0,0,1232,1228,1,0,0,0,1232,1229,1,0,0,0,1232,1230,1,
0,0,0,1232,1231,1,0,0,0,1233,279,1,0,0,0,1234,1236,3,176,88,0,1235,1234,
1,0,0,0,1235,1236,1,0,0,0,1236,1238,1,0,0,0,1237,1239,3,392,196,0,1238,1237,
1,0,0,0,1238,1239,1,0,0,0,1239,1241,1,0,0,0,1240,1242,3,384,192,0,1241,1240,
1,0,0,0,1241,1242,1,0,0,0,1242,281,1,0,0,0,1243,1244,5,117,0,0,1244,1245,
3,280,140,0,1245,1246,5,1,0,0,1246,1250,3,332,166,0,1247,1249,3,332,166,
0,1248,1247,1,0,0,0,1249,1252,1,0,0,0,1250,1248,1,0,0,0,1250,1251,1,0,0,
0,1251,1253,1,0,0,0,1252,1250,1,0,0,0,1253,1254,5,38,0,0,1254,1255,5,1,0,
0,1255,283,1,0,0,0,1256,1257,3,232,116,0,1257,285,1,0,0,0,1258,1261,3,288,
144,0,1259,1260,5,51,0,0,1260,1262,3,278,139,0,1261,1259,1,0,0,0,1261,1262,
1,0,0,0,1262,287,1,0,0,0,1263,1269,3,2,1,0,1264,1269,3,4,2,0,1265,1269,3,
8,4,0,1266,1269,3,12,6,0,1267,1269,3,24,12,0,1268,1263,1,0,0,0,1268,1264,
1,0,0,0,1268,1265,1,0,0,0,1268,1266,1,0,0,0,1268,1267,1,0,0,0,1269,289,1,
0,0,0,1270,1275,5,118,0,0,1271,1272,5,2,0,0,1272,1273,3,134,67,0,1273,1274,
5,4,0,0,1274,1276,1,0,0,0,1275,1271,1,0,0,0,1275,1276,1,0,0,0,1276,1277,
1,0,0,0,1277,1278,5,1,0,0,1278,291,1,0,0,0,1279,1280,3,294,147,0,1280,1284,
3,46,23,0,1281,1283,3,332,166,0,1282,1281,1,0,0,0,1283,1286,1,0,0,0,1284,
1282,1,0,0,0,1284,1285,1,0,0,0,1285,1287,1,0,0,0,1286,1284,1,0,0,0,1287,
1288,3,390,195,0,1288,1289,5,39,0,0,1289,1290,5,1,0,0,1290,293,1,0,0,0,1291,
1292,5,120,0,0,1292,1293,3,296,148,0,1293,1294,5,77,0,0,1294,1295,5,2,0,
0,1295,1300,3,4,2,0,1296,1297,5,3,0,0,1297,1299,3,4,2,0,1298,1296,1,0,0,
0,1299,1302,1,0,0,0,1300,1298,1,0,0,0,1300,1301,1,0,0,0,1301,1303,1,0,0,
0,1302,1300,1,0,0,0,1303,1304,5,4,0,0,1304,1305,5,1,0,0,1305,295,1,0,0,0,
1306,1307,5,157,0,0,1307,297,1,0,0,0,1308,1309,5,157,0,0,1309,299,1,0,0,
0,1310,1312,3,190,95,0,1311,1310,1,0,0,0,1312,1315,1,0,0,0,1313,1311,1,0,
0,0,1313,1314,1,0,0,0,1314,1317,1,0,0,0,1315,1313,1,0,0,0,1316,1318,3,90,
45,0,1317,1316,1,0,0,0,1317,1318,1,0,0,0,1318,1322,1,0,0,0,1319,1321,3,302,
151,0,1320,1319,1,0,0,0,1321,1324,1,0,0,0,1322,1320,1,0,0,0,1322,1323,1,
0,0,0,1323,301,1,0,0,0,1324,1322,1,0,0,0,1325,1328,3,98,49,0,1326,1328,3,
292,146,0,1327,1325,1,0,0,0,1327,1326,1,0,0,0,1328,303,1,0,0,0,1329,1330,
5,121,0,0,1330,1332,3,306,153,0,1331,1333,3,308,154,0,1332,1331,1,0,0,0,
1332,1333,1,0,0,0,1333,1334,1,0,0,0,1334,1335,5,1,0,0,1335,1336,3,300,150,
0,1336,1337,5,40,0,0,1337,1338,5,1,0,0,1338,305,1,0,0,0,1339,1340,5,157,
0,0,1340,307,1,0,0,0,1341,1342,3,334,167,0,1342,309,1,0,0,0,1343,1344,3,
134,67,0,1344,311,1,0,0,0,1345,1346,5,55,0,0,1346,1349,3,24,12,0,1347,1348,
5,149,0,0,1348,1350,3,314,157,0,1349,1347,1,0,0,0,1349,1350,1,0,0,0,1350,
313,1,0,0,0,1351,1352,5,2,0,0,1352,1357,3,224,112,0,1353,1354,5,3,0,0,1354,
1356,3,224,112,0,1355,1353,1,0,0,0,1356,1359,1,0,0,0,1357,1355,1,0,0,0,1357,
1358,1,0,0,0,1358,1360,1,0,0,0,1359,1357,1,0,0,0,1360,1361,5,4,0,0,1361,
315,1,0,0,0,1362,1364,5,74,0,0,1363,1365,5,82,0,0,1364,1363,1,0,0,0,1364,
1365,1,0,0,0,1365,1367,1,0,0,0,1366,1362,1,0,0,0,1366,1367,1,0,0,0,1367,
1368,1,0,0,0,1368,1371,5,122,0,0,1369,1372,3,314,157,0,1370,1372,3,312,156,
0,1371,1369,1,0,0,0,1371,1370,1,0,0,0,1371,1372,1,0,0,0,1372,317,1,0,0,0,
1373,1375,5,124,0,0,1374,1376,3,70,35,0,1375,1374,1,0,0,0,1375,1376,1,0,
0,0,1376,1377,1,0,0,0,1377,1378,5,105,0,0,1378,1379,3,186,93,0,1379,319,
1,0,0,0,1380,1386,3,364,182,0,1381,1382,3,36,18,0,1382,1383,3,364,182,0,
1383,1385,1,0,0,0,1384,1381,1,0,0,0,1385,1388,1,0,0,0,1386,1384,1,0,0,0,
1386,1387,1,0,0,0,1387,321,1,0,0,0,1388,1386,1,0,0,0,1389,1397,3,38,19,0,
1390,1397,3,110,55,0,1391,1397,3,126,63,0,1392,1397,3,192,96,0,1393,1397,
3,264,132,0,1394,1397,3,324,162,0,1395,1397,3,326,163,0,1396,1389,1,0,0,
0,1396,1390,1,0,0,0,1396,1391,1,0,0,0,1396,1392,1,0,0,0,1396,1393,1,0,0,
0,1396,1394,1,0,0,0,1396,1395,1,0,0,0,1397,323,1,0,0,0,1398,1399,5,2,0,0,
1399,1400,3,134,67,0,1400,1401,5,4,0,0,1401,1404,1,0,0,0,1402,1404,3,246,
123,0,1403,1398,1,0,0,0,1403,1402,1,0,0,0,1404,325,1,0,0,0,1405,1406,3,376,
188,0,1406,1407,3,324,162,0,1407,327,1,0,0,0,1408,1416,3,62,31,0,1409,1416,
3,64,32,0,1410,1416,3,188,94,0,1411,1416,3,220,110,0,1412,1416,3,230,115,
0,1413,1416,3,266,133,0,1414,1416,3,336,168,0,1415,1408,1,0,0,0,1415,1409,
1,0,0,0,1415,1410,1,0,0,0,1415,1411,1,0,0,0,1415,1412,1,0,0,0,1415,1413,
1,0,0,0,1415,1414,1,0,0,0,1416,329,1,0,0,0,1417,1418,5,127,0,0,1418,1419,
5,1,0,0,1419,331,1,0,0,0,1420,1432,3,48,24,0,1421,1432,3,52,26,0,1422,1432,
3,82,41,0,1423,1432,3,84,42,0,1424,1432,3,130,65,0,1425,1432,3,168,84,0,
1426,1432,3,228,114,0,1427,1432,3,248,124,0,1428,1432,3,282,141,0,1429,1432,
3,290,145,0,1430,1432,3,330,165,0,1431,1420,1,0,0,0,1431,1421,1,0,0,0,1431,
1422,1,0,0,0,1431,1423,1,0,0,0,1431,1424,1,0,0,0,1431,1425,1,0,0,0,1431,
1426,1,0,0,0,1431,1427,1,0,0,0,1431,1428,1,0,0,0,1431,1429,1,0,0,0,1431,
1430,1,0,0,0,1432,333,1,0,0,0,1433,1434,7,9,0,0,1434,335,1,0,0,0,1435,1437,
5,129,0,0,1436,1438,3,396,198,0,1437,1436,1,0,0,0,1437,1438,1,0,0,0,1438,
337,1,0,0,0,1439,1441,3,352,176,0,1440,1439,1,0,0,0,1440,1441,1,0,0,0,1441,
1443,1,0,0,0,1442,1444,3,350,175,0,1443,1442,1,0,0,0,1443,1444,1,0,0,0,1444,
339,1,0,0,0,1445,1446,5,105,0,0,1446,1447,5,2,0,0,1447,1448,3,354,177,0,
1448,1449,5,4,0,0,1449,341,1,0,0,0,1450,1452,3,30,15,0,1451,1450,1,0,0,0,
1451,1452,1,0,0,0,1452,1454,1,0,0,0,1453,1455,3,366,183,0,1454,1453,1,0,
0,0,1454,1455,1,0,0,0,1455,1459,1,0,0,0,1456,1457,3,354,177,0,1457,1458,
5,1,0,0,1458,1460,1,0,0,0,1459,1456,1,0,0,0,1459,1460,1,0,0,0,1460,343,1,
0,0,0,1461,1462,3,346,173,0,1462,1463,3,342,171,0,1463,1464,5,41,0,0,1464,
1465,5,1,0,0,1465,345,1,0,0,0,1466,1467,5,131,0,0,1467,1468,3,348,174,0,
1468,1469,5,77,0,0,1469,1470,3,4,2,0,1470,1471,5,1,0,0,1471,347,1,0,0,0,
1472,1473,5,157,0,0,1473,349,1,0,0,0,1474,1475,5,130,0,0,1475,1476,5,105,
0,0,1476,1477,5,2,0,0,1477,1482,3,4,2,0,1478,1479,5,3,0,0,1479,1481,3,4,
2,0,1480,1478,1,0,0,0,1481,1484,1,0,0,0,1482,1480,1,0,0,0,1482,1483,1,0,
0,0,1483,1485,1,0,0,0,1484,1482,1,0,0,0,1485,1486,5,4,0,0,1486,351,1,0,0,
0,1487,1491,3,28,14,0,1488,1491,3,32,16,0,1489,1491,3,358,179,0,1490,1487,
1,0,0,0,1490,1488,1,0,0,0,1490,1489,1,0,0,0,1491,353,1,0,0,0,1492,1497,3,
356,178,0,1493,1494,5,49,0,0,1494,1496,3,356,178,0,1495,1493,1,0,0,0,1496,
1499,1,0,0,0,1497,1495,1,0,0,0,1497,1498,1,0,0,0,1498,355,1,0,0,0,1499,1497,
1,0,0,0,1500,1505,3,360,180,0,1501,1502,5,48,0,0,1502,1504,3,360,180,0,1503,
1501,1,0,0,0,1504,1507,1,0,0,0,1505,1503,1,0,0,0,1505,1506,1,0,0,0,1506,
357,1,0,0,0,1507,1505,1,0,0,0,1508,1509,5,132,0,0,1509,1510,3,340,170,0,
1510,359,1,0,0,0,1511,1518,3,4,2,0,1512,1518,3,234,117,0,1513,1514,5,2,0,
0,1514,1515,3,354,177,0,1515,1516,5,4,0,0,1516,1518,1,0,0,0,1517,1511,1,
0,0,0,1517,1512,1,0,0,0,1517,1513,1,0,0,0,1518,361,1,0,0,0,1519,1521,3,304,
152,0,1520,1519,1,0,0,0,1521,1522,1,0,0,0,1522,1520,1,0,0,0,1522,1523,1,
0,0,0,1523,1524,1,0,0,0,1524,1525,5,0,0,1,1525,363,1,0,0,0,1526,1532,3,136,
68,0,1527,1528,3,222,111,0,1528,1529,3,136,68,0,1529,1531,1,0,0,0,1530,1527,
1,0,0,0,1531,1534,1,0,0,0,1532,1530,1,0,0,0,1532,1533,1,0,0,0,1533,365,1,
0,0,0,1534,1532,1,0,0,0,1535,1536,5,139,0,0,1536,1537,5,2,0,0,1537,1542,
3,4,2,0,1538,1539,5,3,0,0,1539,1541,3,4,2,0,1540,1538,1,0,0,0,1541,1544,
1,0,0,0,1542,1540,1,0,0,0,1542,1543,1,0,0,0,1543,1545,1,0,0,0,1544,1542,
1,0,0,0,1545,1546,5,4,0,0,1546,1547,5,1,0,0,1547,367,1,0,0,0,1548,1549,5,
137,0,0,1549,1550,3,370,185,0,1550,1551,5,35,0,0,1551,1552,3,378,189,0,1552,
1554,5,1,0,0,1553,1555,3,390,195,0,1554,1553,1,0,0,0,1554,1555,1,0,0,0,1555,
1556,1,0,0,0,1556,1557,5,42,0,0,1557,1558,5,1,0,0,1558,369,1,0,0,0,1559,
1560,5,157,0,0,1560,371,1,0,0,0,1561,1564,3,374,187,0,1562,1564,3,22,11,
0,1563,1561,1,0,0,0,1563,1562,1,0,0,0,1564,373,1,0,0,0,1565,1566,5,157,0,
0,1566,375,1,0,0,0,1567,1568,7,10,0,0,1568,377,1,0,0,0,1569,1572,3,86,43,
0,1570,1572,3,96,48,0,1571,1569,1,0,0,0,1571,1570,1,0,0,0,1572,379,1,0,0,
0,1573,1574,5,140,0,0,1574,1575,3,382,191,0,1575,1581,5,1,0,0,1576,1577,
3,382,191,0,1577,1578,5,1,0,0,1578,1580,1,0,0,0,1579,1576,1,0,0,0,1580,1583,
1,0,0,0,1581,1579,1,0,0,0,1581,1582,1,0,0,0,1582,381,1,0,0,0,1583,1581,1,
0,0,0,1584,1585,3,298,149,0,1585,1586,5,9,0,0,1586,1588,1,0,0,0,1587,1584,
1,0,0,0,1587,1588,1,0,0,0,1588,1589,1,0,0,0,1589,1594,3,270,135,0,1590,1591,
5,3,0,0,1591,1593,3,270,135,0,1592,1590,1,0,0,0,1593,1596,1,0,0,0,1594,1592,
1,0,0,0,1594,1595,1,0,0,0,1595,383,1,0,0,0,1596,1594,1,0,0,0,1597,1598,5,
142,0,0,1598,1599,3,216,108,0,1599,385,1,0,0,0,1600,1601,5,143,0,0,1601,
1602,5,79,0,0,1602,1614,3,18,9,0,1603,1604,5,2,0,0,1604,1609,3,226,113,0,
1605,1606,5,3,0,0,1606,1608,3,226,113,0,1607,1605,1,0,0,0,1608,1611,1,0,
0,0,1609,1607,1,0,0,0,1609,1610,1,0,0,0,1610,1612,1,0,0,0,1611,1609,1,0,
0,0,1612,1613,5,4,0,0,1613,1615,1,0,0,0,1614,1603,1,0,0,0,1614,1615,1,0,
0,0,1615,1616,1,0,0,0,1616,1617,5,1,0,0,1617,387,1,0,0,0,1618,1619,5,157,
0,0,1619,389,1,0,0,0,1620,1621,5,150,0,0,1621,1622,3,104,52,0,1622,1628,
5,1,0,0,1623,1624,3,104,52,0,1624,1625,5,1,0,0,1625,1627,1,0,0,0,1626,1623,
1,0,0,0,1627,1630,1,0,0,0,1628,1626,1,0,0,0,1628,1629,1,0,0,0,1629,391,1,
0,0,0,1630,1628,1,0,0,0,1631,1632,5,151,0,0,1632,1633,3,216,108,0,1633,393,
1,0,0,0,1634,1635,3,232,116,0,1635,395,1,0,0,0,1636,1637,5,2,0,0,1637,1638,
3,394,197,0,1638,1640,5,4,0,0,1639,1641,5,76,0,0,1640,1639,1,0,0,0,1640,
1641,1,0,0,0,1641,397,1,0,0,0,151,435,443,456,459,468,477,482,486,489,498,
506,516,519,527,536,545,552,577,591,597,607,616,630,638,644,651,665,671,
678,683,687,690,693,696,705,708,728,738,748,753,759,769,774,783,788,795,
803,806,814,828,833,845,851,855,859,862,868,875,879,885,889,897,902,913,
922,929,941,953,959,965,990,997,1000,1009,1014,1018,1027,1034,1045,1052,
1066,1072,1074,1089,1101,1112,1115,1119,1122,1131,1145,1150,1155,1166,1175,
1191,1196,1200,1211,1216,1225,1232,1235,1238,1241,1250,1261,1268,1275,1284,
1300,1313,1317,1322,1327,1332,1349,1357,1364,1366,1371,1375,1386,1396,1403,
1415,1431,1437,1440,1443,1451,1454,1459,1482,1490,1497,1505,1517,1522,1532,
1542,1554,1563,1571,1581,1587,1594,1609,1614,1628,1640];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.PredictionContextCache();

export default class Express_simpleParser extends antlr4.Parser {

    static grammarFileName = "java-escape";
    static literalNames = [ null, "';'", "'('", "','", "')'", "'+'", "'-'", 
                            "'['", "']'", "':'", "'END_ALIAS'", "':='", 
                            "'.'", "'?'", "'END_CASE'", "'END_CONSTANT'", 
                            "'END_ENTITY'", "'**'", "'END_FUNCTION'", "'\\'", 
                            "'END_IF'", "'{'", "'}'", "'<'", "'<='", "'END_LOCAL'", 
                            "'*'", "'/'", "'||'", "'END_PROCEDURE'", "'<*'", 
                            "'|'", "'>'", "'>='", "'<>'", "'='", "':<>:'", 
                            "':=:'", "'END_REPEAT'", "'END_RULE'", "'END_SCHEMA'", 
                            "'END_SUBTYPE_CONSTRAINT'", "'END_TYPE'", "'ABS'", 
                            "'ABSTRACT'", "'ACOS'", "'AGGREGATE'", "'ALIAS'", 
                            "'AND'", "'ANDOR'", "'ARRAY'", "'AS'", "'ASIN'", 
                            "'ATAN'", "'BAG'", "'BASED_ON'", "'BEGIN'", 
                            "'BINARY'", "'BLENGTH'", "'BOOLEAN'", "'BY'", 
                            "'CASE'", "'CONSTANT'", "'CONST_E'", "'COS'", 
                            "'DERIVE'", "'DIV'", "'ELSE'", "'END'", "'ENTITY'", 
                            "'ENUMERATION'", "'ESCAPE'", "'EXISTS'", "'EXP'", 
                            "'EXTENSIBLE'", "'FALSE'", "'FIXED'", "'FOR'", 
                            "'FORMAT'", "'FROM'", "'FUNCTION'", "'GENERIC'", 
                            "'GENERIC_ENTITY'", "'HIBOUND'", "'HIINDEX'", 
                            "'IF'", "'IN'", "'INSERT'", "'INTEGER'", "'INVERSE'", 
                            "'LENGTH'", "'LIKE'", "'LIST'", "'LOBOUND'", 
                            "'LOCAL'", "'LOG'", "'LOG10'", "'LOG2'", "'LOGICAL'", 
                            "'LOINDEX'", "'MOD'", "'NOT'", "'NUMBER'", "'NVL'", 
                            "'ODD'", "'OF'", "'ONEOF'", "'OPTIONAL'", "'OR'", 
                            "'OTHERWISE'", "'PI'", "'PROCEDURE'", "'QUERY'", 
                            "'REAL'", "'REFERENCE'", "'REMOVE'", "'RENAMED'", 
                            "'REPEAT'", "'RETURN'", "'ROLESOF'", "'RULE'", 
                            "'SCHEMA'", "'SELECT'", "'SELF'", "'SET'", "'SIN'", 
                            "'SIZEOF'", "'SKIP'", "'SQRT'", "'STRING'", 
                            "'SUBTYPE'", "'SUBTYPE_CONSTRAINT'", "'SUPERTYPE'", 
                            "'TAN'", "'THEN'", "'TO'", "'TRUE'", "'TYPE'", 
                            "'TYPEOF'", "'TOTAL_OVER'", "'UNIQUE'", "'UNKNOWN'", 
                            "'UNTIL'", "'USE'", "'USEDIN'", "'VALUE'", "'VALUE_IN'", 
                            "'VALUE_UNIQUE'", "'VAR'", "'WITH'", "'WHERE'", 
                            "'WHILE'", "'XOR'" ];
    static symbolicNames = [ null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, "ABS", "ABSTRACT", "ACOS", 
                             "AGGREGATE", "ALIAS", "AND", "ANDOR", "ARRAY", 
                             "AS", "ASIN", "ATAN", "BAG", "BASED_ON", "BEGIN_", 
                             "BINARY", "BLENGTH", "BOOLEAN", "BY", "CASE", 
                             "CONSTANT", "CONST_E", "COS", "DERIVE", "DIV", 
                             "ELSE", "END_", "ENTITY", "ENUMERATION", "ESCAPE", 
                             "EXISTS", "EXP", "EXTENSIBLE", "FALSE", "FIXED", 
                             "FOR", "FORMAT", "FROM", "FUNCTION", "GENERIC", 
                             "GENERIC_ENTITY", "HIBOUND", "HIINDEX", "IF", 
                             "IN", "INSERT", "INTEGER", "INVERSE", "LENGTH", 
                             "LIKE", "LIST", "LOBOUND", "LOCAL", "LOG", 
                             "LOG10", "LOG2", "LOGICAL", "LOINDEX", "MOD", 
                             "NOT", "NUMBER", "NVL", "ODD", "OF", "ONEOF", 
                             "OPTIONAL", "OR", "OTHERWISE", "PI", "PROCEDURE", 
                             "QUERY", "REAL", "REFERENCE", "REMOVE", "RENAMED", 
                             "REPEAT", "RETURN", "ROLESOF", "RULE", "SCHEMA", 
                             "SELECT", "SELF", "SET", "SIN", "SIZEOF", "SKIP_", 
                             "SQRT", "STRING", "SUBTYPE", "SUBTYPE_CONSTRAINT", 
                             "SUPERTYPE", "TAN", "THEN", "TO", "TRUE", "TYPE", 
                             "TYPEOF", "TOTAL_OVER", "UNIQUE", "UNKNOWN", 
                             "UNTIL", "USE", "USEDIN", "VALUE_", "VALUE_IN", 
                             "VALUE_UNIQUE", "VAR", "WITH", "WHERE", "WHILE", 
                             "XOR", "BinaryLiteral", "EncodedStringLiteral", 
                             "IntegerLiteral", "RealLiteral", "SimpleId", 
                             "SimpleStringLiteral", "EmbeddedRemark", "TailRemark", 
                             "Whitespace" ];
    static ruleNames = [ "attributeRef", "constantRef", "entityRef", "enumerationRef", 
                         "functionRef", "parameterRef", "procedureRef", 
                         "ruleLabelRef", "ruleRef", "schemaRef", "subtypeConstraintRef", 
                         "typeLabelRef", "typeRef", "variableRef", "abstractEntityDeclaration", 
                         "abstractSupertype", "abstractSupertypeDeclaration", 
                         "actualParameterList", "addLikeOp", "aggregateInitializer", 
                         "aggregateSource", "aggregateType", "aggregationTypes", 
                         "algorithmHead", "aliasStmt", "arrayType", "assignmentStmt", 
                         "attributeDecl", "attributeId", "attributeQualifier", 
                         "bagType", "binaryType", "booleanType", "bound1", 
                         "bound2", "boundSpec", "builtInConstant", "builtInFunction", 
                         "builtInProcedure", "caseAction", "caseLabel", 
                         "caseStmt", "compoundStmt", "concreteTypes", "constantBody", 
                         "constantDecl", "constantFactor", "constantId", 
                         "constructedTypes", "declaration", "derivedAttr", 
                         "deriveClause", "domainRule", "element", "entityBody", 
                         "entityConstructor", "entityDecl", "entityHead", 
                         "entityId", "enumerationExtension", "enumerationId", 
                         "enumerationItems", "enumerationItem", "enumerationReference", 
                         "enumerationType", "escapeStmt", "explicitAttr", 
                         "expression", "factor", "formalParameter", "functionCall", 
                         "functionDecl", "functionHead", "functionId", "generalizedTypes", 
                         "generalAggregationTypes", "generalArrayType", 
                         "generalBagType", "generalListType", "generalRef", 
                         "generalSetType", "genericEntityType", "genericType", 
                         "groupQualifier", "ifStmt", "ifStmtStatements", 
                         "ifStmtElseStatements", "increment", "incrementControl", 
                         "index", "index1", "index2", "indexQualifier", 
                         "instantiableType", "integerType", "interfaceSpecification", 
                         "interval", "intervalHigh", "intervalItem", "intervalLow", 
                         "intervalOp", "inverseAttr", "inverseAttrType", 
                         "inverseClause", "listType", "literal", "localDecl", 
                         "localVariable", "logicalExpression", "logicalLiteral", 
                         "logicalType", "multiplicationLikeOp", "namedTypes", 
                         "namedTypeOrRename", "nullStmt", "numberType", 
                         "numericExpression", "oneOf", "parameter", "parameterId", 
                         "parameterType", "population", "precisionSpec", 
                         "primary", "procedureCallStmt", "procedureDecl", 
                         "procedureHead", "procedureHeadParameter", "procedureId", 
                         "qualifiableFactor", "qualifiedAttribute", "qualifier", 
                         "queryExpression", "realType", "redeclaredAttribute", 
                         "referencedAttribute", "referenceClause", "relOp", 
                         "relOpExtended", "renameId", "repeatControl", "repeatStmt", 
                         "repetition", "resourceOrRename", "resourceRef", 
                         "returnStmt", "ruleDecl", "ruleHead", "ruleId", 
                         "ruleLabelId", "schemaBody", "schemaBodyDeclaration", 
                         "schemaDecl", "schemaId", "schemaVersionId", "selector", 
                         "selectExtension", "selectList", "selectType", 
                         "setType", "simpleExpression", "simpleFactor", 
                         "simpleFactorExpression", "simpleFactorUnaryExpression", 
                         "simpleTypes", "skipStmt", "stmt", "stringLiteral", 
                         "stringType", "subsuper", "subtypeConstraint", 
                         "subtypeConstraintBody", "subtypeConstraintDecl", 
                         "subtypeConstraintHead", "subtypeConstraintId", 
                         "subtypeDeclaration", "supertypeConstraint", "supertypeExpression", 
                         "supertypeFactor", "supertypeRule", "supertypeTerm", 
                         "syntax", "term", "totalOver", "typeDecl", "typeId", 
                         "typeLabel", "typeLabelId", "unaryOp", "underlyingType", 
                         "uniqueClause", "uniqueRule", "untilControl", "useClause", 
                         "variableId", "whereClause", "whileControl", "width", 
                         "widthSpec" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = Express_simpleParser.ruleNames;
        this.literalNames = Express_simpleParser.literalNames;
        this.symbolicNames = Express_simpleParser.symbolicNames;
    }

    get atn() {
        return atn;
    }



	attributeRef() {
	    let localctx = new AttributeRefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, Express_simpleParser.RULE_attributeRef);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 398;
	        this.attributeId();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constantRef() {
	    let localctx = new ConstantRefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, Express_simpleParser.RULE_constantRef);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 400;
	        this.constantId();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	entityRef() {
	    let localctx = new EntityRefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, Express_simpleParser.RULE_entityRef);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 402;
	        this.entityId();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumerationRef() {
	    let localctx = new EnumerationRefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, Express_simpleParser.RULE_enumerationRef);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 404;
	        this.enumerationId();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionRef() {
	    let localctx = new FunctionRefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, Express_simpleParser.RULE_functionRef);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 406;
	        this.functionId();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parameterRef() {
	    let localctx = new ParameterRefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, Express_simpleParser.RULE_parameterRef);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 408;
	        this.parameterId();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	procedureRef() {
	    let localctx = new ProcedureRefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, Express_simpleParser.RULE_procedureRef);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 410;
	        this.procedureId();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ruleLabelRef() {
	    let localctx = new RuleLabelRefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, Express_simpleParser.RULE_ruleLabelRef);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 412;
	        this.ruleLabelId();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ruleRef() {
	    let localctx = new RuleRefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, Express_simpleParser.RULE_ruleRef);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 414;
	        this.ruleId();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	schemaRef() {
	    let localctx = new SchemaRefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, Express_simpleParser.RULE_schemaRef);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 416;
	        this.schemaId();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	subtypeConstraintRef() {
	    let localctx = new SubtypeConstraintRefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, Express_simpleParser.RULE_subtypeConstraintRef);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 418;
	        this.subtypeConstraintId();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeLabelRef() {
	    let localctx = new TypeLabelRefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, Express_simpleParser.RULE_typeLabelRef);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 420;
	        this.typeLabelId();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeRef() {
	    let localctx = new TypeRefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, Express_simpleParser.RULE_typeRef);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 422;
	        this.typeId();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableRef() {
	    let localctx = new VariableRefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, Express_simpleParser.RULE_variableRef);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 424;
	        this.variableId();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	abstractEntityDeclaration() {
	    let localctx = new AbstractEntityDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, Express_simpleParser.RULE_abstractEntityDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 426;
	        this.match(Express_simpleParser.ABSTRACT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	abstractSupertype() {
	    let localctx = new AbstractSupertypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, Express_simpleParser.RULE_abstractSupertype);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 428;
	        this.match(Express_simpleParser.ABSTRACT);
	        this.state = 429;
	        this.match(Express_simpleParser.SUPERTYPE);
	        this.state = 430;
	        this.match(Express_simpleParser.T__0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	abstractSupertypeDeclaration() {
	    let localctx = new AbstractSupertypeDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, Express_simpleParser.RULE_abstractSupertypeDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 432;
	        this.match(Express_simpleParser.ABSTRACT);
	        this.state = 433;
	        this.match(Express_simpleParser.SUPERTYPE);
	        this.state = 435;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===105) {
	            this.state = 434;
	            this.subtypeConstraint();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	actualParameterList() {
	    let localctx = new ActualParameterListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, Express_simpleParser.RULE_actualParameterList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 437;
	        this.match(Express_simpleParser.T__1);
	        this.state = 438;
	        this.parameter();
	        this.state = 443;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===3) {
	            this.state = 439;
	            this.match(Express_simpleParser.T__2);
	            this.state = 440;
	            this.parameter();
	            this.state = 445;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 446;
	        this.match(Express_simpleParser.T__3);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	addLikeOp() {
	    let localctx = new AddLikeOpContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, Express_simpleParser.RULE_addLikeOp);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 448;
	        _la = this._input.LA(1);
	        if(!(_la===5 || _la===6 || _la===108 || _la===152)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	aggregateInitializer() {
	    let localctx = new AggregateInitializerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, Express_simpleParser.RULE_aggregateInitializer);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 450;
	        this.match(Express_simpleParser.T__6);
	        this.state = 459;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & 2105572) !== 0) || ((((_la - 43)) & ~0x1f) == 0 && ((1 << (_la - 43)) & 1613792773) !== 0) || ((((_la - 75)) & ~0x1f) == 0 && ((1 << (_la - 75)) & 896828169) !== 0) || ((((_la - 110)) & ~0x1f) == 0 && ((1 << (_la - 110)) & 2491785733) !== 0) || ((((_la - 144)) & ~0x1f) == 0 && ((1 << (_la - 144)) & 32271) !== 0)) {
	            this.state = 451;
	            this.element();
	            this.state = 456;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===3) {
	                this.state = 452;
	                this.match(Express_simpleParser.T__2);
	                this.state = 453;
	                this.element();
	                this.state = 458;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 461;
	        this.match(Express_simpleParser.T__7);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	aggregateSource() {
	    let localctx = new AggregateSourceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, Express_simpleParser.RULE_aggregateSource);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 463;
	        this.simpleExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	aggregateType() {
	    let localctx = new AggregateTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, Express_simpleParser.RULE_aggregateType);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 465;
	        this.match(Express_simpleParser.AGGREGATE);
	        this.state = 468;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===9) {
	            this.state = 466;
	            this.match(Express_simpleParser.T__8);
	            this.state = 467;
	            this.typeLabel();
	        }

	        this.state = 470;
	        this.match(Express_simpleParser.OF);
	        this.state = 471;
	        this.parameterType();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	aggregationTypes() {
	    let localctx = new AggregationTypesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, Express_simpleParser.RULE_aggregationTypes);
	    try {
	        this.state = 477;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 50:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 473;
	            this.arrayType();
	            break;
	        case 54:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 474;
	            this.bagType();
	            break;
	        case 92:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 475;
	            this.listType();
	            break;
	        case 124:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 476;
	            this.setType();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	algorithmHead() {
	    let localctx = new AlgorithmHeadContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, Express_simpleParser.RULE_algorithmHead);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 482;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===69 || _la===80 || ((((_la - 111)) & ~0x1f) == 0 && ((1 << (_la - 111)) & 68157441) !== 0)) {
	            this.state = 479;
	            this.declaration();
	            this.state = 484;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 486;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===62) {
	            this.state = 485;
	            this.constantDecl();
	        }

	        this.state = 489;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===94) {
	            this.state = 488;
	            this.localDecl();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	aliasStmt() {
	    let localctx = new AliasStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, Express_simpleParser.RULE_aliasStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 491;
	        this.match(Express_simpleParser.ALIAS);
	        this.state = 492;
	        this.variableId();
	        this.state = 493;
	        this.match(Express_simpleParser.FOR);
	        this.state = 494;
	        this.generalRef();
	        this.state = 498;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & 528512) !== 0)) {
	            this.state = 495;
	            this.qualifier();
	            this.state = 500;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 501;
	        this.match(Express_simpleParser.T__0);
	        this.state = 502;
	        this.stmt();
	        this.state = 506;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===1 || ((((_la - 47)) & ~0x1f) == 0 && ((1 << (_la - 47)) & 16794113) !== 0) || ((((_la - 85)) & ~0x1f) == 0 && ((1 << (_la - 85)) & 1073741829) !== 0) || ((((_la - 117)) & ~0x1f) == 0 && ((1 << (_la - 117)) & 1027) !== 0) || _la===157) {
	            this.state = 503;
	            this.stmt();
	            this.state = 508;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 509;
	        this.match(Express_simpleParser.T__9);
	        this.state = 510;
	        this.match(Express_simpleParser.T__0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arrayType() {
	    let localctx = new ArrayTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, Express_simpleParser.RULE_arrayType);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 512;
	        this.match(Express_simpleParser.ARRAY);
	        this.state = 513;
	        this.boundSpec();
	        this.state = 514;
	        this.match(Express_simpleParser.OF);
	        this.state = 516;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===107) {
	            this.state = 515;
	            this.match(Express_simpleParser.OPTIONAL);
	        }

	        this.state = 519;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===140) {
	            this.state = 518;
	            this.match(Express_simpleParser.UNIQUE);
	        }

	        this.state = 521;
	        this.instantiableType();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assignmentStmt() {
	    let localctx = new AssignmentStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, Express_simpleParser.RULE_assignmentStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 523;
	        this.generalRef();
	        this.state = 527;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & 528512) !== 0)) {
	            this.state = 524;
	            this.qualifier();
	            this.state = 529;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 530;
	        this.match(Express_simpleParser.T__10);
	        this.state = 531;
	        this.expression();
	        this.state = 532;
	        this.match(Express_simpleParser.T__0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	attributeDecl() {
	    let localctx = new AttributeDeclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, Express_simpleParser.RULE_attributeDecl);
	    try {
	        this.state = 536;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 157:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 534;
	            this.attributeId();
	            break;
	        case 123:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 535;
	            this.redeclaredAttribute();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	attributeId() {
	    let localctx = new AttributeIdContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, Express_simpleParser.RULE_attributeId);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 538;
	        this.match(Express_simpleParser.SimpleId);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	attributeQualifier() {
	    let localctx = new AttributeQualifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, Express_simpleParser.RULE_attributeQualifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 540;
	        this.match(Express_simpleParser.T__11);
	        this.state = 541;
	        this.attributeRef();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bagType() {
	    let localctx = new BagTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, Express_simpleParser.RULE_bagType);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 543;
	        this.match(Express_simpleParser.BAG);
	        this.state = 545;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===7) {
	            this.state = 544;
	            this.boundSpec();
	        }

	        this.state = 547;
	        this.match(Express_simpleParser.OF);
	        this.state = 548;
	        this.instantiableType();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	binaryType() {
	    let localctx = new BinaryTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, Express_simpleParser.RULE_binaryType);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 550;
	        this.match(Express_simpleParser.BINARY);
	        this.state = 552;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===2) {
	            this.state = 551;
	            this.widthSpec();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	booleanType() {
	    let localctx = new BooleanTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, Express_simpleParser.RULE_booleanType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 554;
	        this.match(Express_simpleParser.BOOLEAN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bound1() {
	    let localctx = new Bound1Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, Express_simpleParser.RULE_bound1);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 556;
	        this.numericExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bound2() {
	    let localctx = new Bound2Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, Express_simpleParser.RULE_bound2);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 558;
	        this.numericExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	boundSpec() {
	    let localctx = new BoundSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, Express_simpleParser.RULE_boundSpec);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 560;
	        this.match(Express_simpleParser.T__6);
	        this.state = 561;
	        this.bound1();
	        this.state = 562;
	        this.match(Express_simpleParser.T__8);
	        this.state = 563;
	        this.bound2();
	        this.state = 564;
	        this.match(Express_simpleParser.T__7);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	builtInConstant() {
	    let localctx = new BuiltInConstantContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, Express_simpleParser.RULE_builtInConstant);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 566;
	        _la = this._input.LA(1);
	        if(!(_la===13 || _la===63 || _la===110 || _la===123)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	builtInFunction() {
	    let localctx = new BuiltInFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, Express_simpleParser.RULE_builtInFunction);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 568;
	        _la = this._input.LA(1);
	        if(!(((((_la - 43)) & ~0x1f) == 0 && ((1 << (_la - 43)) & 1612744197) !== 0) || ((((_la - 78)) & ~0x1f) == 0 && ((1 << (_la - 78)) & 103714913) !== 0) || ((((_la - 119)) & ~0x1f) == 0 && ((1 << (_la - 119)) & 503857857) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	builtInProcedure() {
	    let localctx = new BuiltInProcedureContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, Express_simpleParser.RULE_builtInProcedure);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 570;
	        _la = this._input.LA(1);
	        if(!(_la===87 || _la===115)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	caseAction() {
	    let localctx = new CaseActionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, Express_simpleParser.RULE_caseAction);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 572;
	        this.caseLabel();
	        this.state = 577;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===3) {
	            this.state = 573;
	            this.match(Express_simpleParser.T__2);
	            this.state = 574;
	            this.caseLabel();
	            this.state = 579;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 580;
	        this.match(Express_simpleParser.T__8);
	        this.state = 581;
	        this.stmt();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	caseLabel() {
	    let localctx = new CaseLabelContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, Express_simpleParser.RULE_caseLabel);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 583;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	caseStmt() {
	    let localctx = new CaseStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, Express_simpleParser.RULE_caseStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 585;
	        this.match(Express_simpleParser.CASE);
	        this.state = 586;
	        this.selector();
	        this.state = 587;
	        this.match(Express_simpleParser.OF);
	        this.state = 591;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & 2105572) !== 0) || ((((_la - 43)) & ~0x1f) == 0 && ((1 << (_la - 43)) & 1613792773) !== 0) || ((((_la - 75)) & ~0x1f) == 0 && ((1 << (_la - 75)) & 896828169) !== 0) || ((((_la - 110)) & ~0x1f) == 0 && ((1 << (_la - 110)) & 2491785733) !== 0) || ((((_la - 144)) & ~0x1f) == 0 && ((1 << (_la - 144)) & 32271) !== 0)) {
	            this.state = 588;
	            this.caseAction();
	            this.state = 593;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 597;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===109) {
	            this.state = 594;
	            this.match(Express_simpleParser.OTHERWISE);
	            this.state = 595;
	            this.match(Express_simpleParser.T__8);
	            this.state = 596;
	            this.stmt();
	        }

	        this.state = 599;
	        this.match(Express_simpleParser.T__13);
	        this.state = 600;
	        this.match(Express_simpleParser.T__0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	compoundStmt() {
	    let localctx = new CompoundStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, Express_simpleParser.RULE_compoundStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 602;
	        this.match(Express_simpleParser.BEGIN_);
	        this.state = 603;
	        this.stmt();
	        this.state = 607;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===1 || ((((_la - 47)) & ~0x1f) == 0 && ((1 << (_la - 47)) & 16794113) !== 0) || ((((_la - 85)) & ~0x1f) == 0 && ((1 << (_la - 85)) & 1073741829) !== 0) || ((((_la - 117)) & ~0x1f) == 0 && ((1 << (_la - 117)) & 1027) !== 0) || _la===157) {
	            this.state = 604;
	            this.stmt();
	            this.state = 609;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 610;
	        this.match(Express_simpleParser.END_);
	        this.state = 611;
	        this.match(Express_simpleParser.T__0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	concreteTypes() {
	    let localctx = new ConcreteTypesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, Express_simpleParser.RULE_concreteTypes);
	    try {
	        this.state = 616;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 50:
	        case 54:
	        case 92:
	        case 124:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 613;
	            this.aggregationTypes();
	            break;
	        case 57:
	        case 59:
	        case 88:
	        case 98:
	        case 102:
	        case 113:
	        case 129:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 614;
	            this.simpleTypes();
	            break;
	        case 157:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 615;
	            this.typeRef();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constantBody() {
	    let localctx = new ConstantBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, Express_simpleParser.RULE_constantBody);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 618;
	        this.constantId();
	        this.state = 619;
	        this.match(Express_simpleParser.T__8);
	        this.state = 620;
	        this.instantiableType();
	        this.state = 621;
	        this.match(Express_simpleParser.T__10);
	        this.state = 622;
	        this.expression();
	        this.state = 623;
	        this.match(Express_simpleParser.T__0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constantDecl() {
	    let localctx = new ConstantDeclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, Express_simpleParser.RULE_constantDecl);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 625;
	        this.match(Express_simpleParser.CONSTANT);
	        this.state = 626;
	        this.constantBody();
	        this.state = 630;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===157) {
	            this.state = 627;
	            this.constantBody();
	            this.state = 632;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 633;
	        this.match(Express_simpleParser.T__14);
	        this.state = 634;
	        this.match(Express_simpleParser.T__0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constantFactor() {
	    let localctx = new ConstantFactorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, Express_simpleParser.RULE_constantFactor);
	    try {
	        this.state = 638;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 13:
	        case 63:
	        case 110:
	        case 123:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 636;
	            this.builtInConstant();
	            break;
	        case 157:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 637;
	            this.constantRef();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constantId() {
	    let localctx = new ConstantIdContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, Express_simpleParser.RULE_constantId);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 640;
	        this.match(Express_simpleParser.SimpleId);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constructedTypes() {
	    let localctx = new ConstructedTypesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, Express_simpleParser.RULE_constructedTypes);
	    try {
	        this.state = 644;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,24,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 642;
	            this.enumerationType();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 643;
	            this.selectType();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	declaration() {
	    let localctx = new DeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, Express_simpleParser.RULE_declaration);
	    try {
	        this.state = 651;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 69:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 646;
	            this.entityDecl();
	            break;
	        case 80:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 647;
	            this.functionDecl();
	            break;
	        case 111:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 648;
	            this.procedureDecl();
	            break;
	        case 131:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 649;
	            this.subtypeConstraintDecl();
	            break;
	        case 137:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 650;
	            this.typeDecl();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	derivedAttr() {
	    let localctx = new DerivedAttrContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, Express_simpleParser.RULE_derivedAttr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 653;
	        this.attributeDecl();
	        this.state = 654;
	        this.match(Express_simpleParser.T__8);
	        this.state = 655;
	        this.parameterType();
	        this.state = 656;
	        this.match(Express_simpleParser.T__10);
	        this.state = 657;
	        this.expression();
	        this.state = 658;
	        this.match(Express_simpleParser.T__0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	deriveClause() {
	    let localctx = new DeriveClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, Express_simpleParser.RULE_deriveClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 660;
	        this.match(Express_simpleParser.DERIVE);
	        this.state = 661;
	        this.derivedAttr();
	        this.state = 665;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===123 || _la===157) {
	            this.state = 662;
	            this.derivedAttr();
	            this.state = 667;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	domainRule() {
	    let localctx = new DomainRuleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, Express_simpleParser.RULE_domainRule);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 671;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,27,this._ctx);
	        if(la_===1) {
	            this.state = 668;
	            this.ruleLabelId();
	            this.state = 669;
	            this.match(Express_simpleParser.T__8);

	        }
	        this.state = 673;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	element() {
	    let localctx = new ElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, Express_simpleParser.RULE_element);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 675;
	        this.expression();
	        this.state = 678;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===9) {
	            this.state = 676;
	            this.match(Express_simpleParser.T__8);
	            this.state = 677;
	            this.repetition();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	entityBody() {
	    let localctx = new EntityBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, Express_simpleParser.RULE_entityBody);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 683;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===123 || _la===157) {
	            this.state = 680;
	            this.explicitAttr();
	            this.state = 685;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 687;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===65) {
	            this.state = 686;
	            this.deriveClause();
	        }

	        this.state = 690;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===89) {
	            this.state = 689;
	            this.inverseClause();
	        }

	        this.state = 693;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===140) {
	            this.state = 692;
	            this.uniqueClause();
	        }

	        this.state = 696;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===150) {
	            this.state = 695;
	            this.whereClause();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	entityConstructor() {
	    let localctx = new EntityConstructorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, Express_simpleParser.RULE_entityConstructor);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 698;
	        this.entityRef();
	        this.state = 699;
	        this.match(Express_simpleParser.T__1);
	        this.state = 708;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & 2105572) !== 0) || ((((_la - 43)) & ~0x1f) == 0 && ((1 << (_la - 43)) & 1613792773) !== 0) || ((((_la - 75)) & ~0x1f) == 0 && ((1 << (_la - 75)) & 896828169) !== 0) || ((((_la - 110)) & ~0x1f) == 0 && ((1 << (_la - 110)) & 2491785733) !== 0) || ((((_la - 144)) & ~0x1f) == 0 && ((1 << (_la - 144)) & 32271) !== 0)) {
	            this.state = 700;
	            this.expression();
	            this.state = 705;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===3) {
	                this.state = 701;
	                this.match(Express_simpleParser.T__2);
	                this.state = 702;
	                this.expression();
	                this.state = 707;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 710;
	        this.match(Express_simpleParser.T__3);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	entityDecl() {
	    let localctx = new EntityDeclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, Express_simpleParser.RULE_entityDecl);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 712;
	        this.entityHead();
	        this.state = 713;
	        this.entityBody();
	        this.state = 714;
	        this.match(Express_simpleParser.T__15);
	        this.state = 715;
	        this.match(Express_simpleParser.T__0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	entityHead() {
	    let localctx = new EntityHeadContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, Express_simpleParser.RULE_entityHead);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 717;
	        this.match(Express_simpleParser.ENTITY);
	        this.state = 718;
	        this.entityId();
	        this.state = 719;
	        this.subsuper();
	        this.state = 720;
	        this.match(Express_simpleParser.T__0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	entityId() {
	    let localctx = new EntityIdContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, Express_simpleParser.RULE_entityId);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 722;
	        this.match(Express_simpleParser.SimpleId);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumerationExtension() {
	    let localctx = new EnumerationExtensionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, Express_simpleParser.RULE_enumerationExtension);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 724;
	        this.match(Express_simpleParser.BASED_ON);
	        this.state = 725;
	        this.typeRef();
	        this.state = 728;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===149) {
	            this.state = 726;
	            this.match(Express_simpleParser.WITH);
	            this.state = 727;
	            this.enumerationItems();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumerationId() {
	    let localctx = new EnumerationIdContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, Express_simpleParser.RULE_enumerationId);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 730;
	        this.match(Express_simpleParser.SimpleId);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumerationItems() {
	    let localctx = new EnumerationItemsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, Express_simpleParser.RULE_enumerationItems);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 732;
	        this.match(Express_simpleParser.T__1);
	        this.state = 733;
	        this.enumerationItem();
	        this.state = 738;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===3) {
	            this.state = 734;
	            this.match(Express_simpleParser.T__2);
	            this.state = 735;
	            this.enumerationItem();
	            this.state = 740;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 741;
	        this.match(Express_simpleParser.T__3);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumerationItem() {
	    let localctx = new EnumerationItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, Express_simpleParser.RULE_enumerationItem);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 743;
	        this.enumerationId();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumerationReference() {
	    let localctx = new EnumerationReferenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, Express_simpleParser.RULE_enumerationReference);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 748;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,38,this._ctx);
	        if(la_===1) {
	            this.state = 745;
	            this.typeRef();
	            this.state = 746;
	            this.match(Express_simpleParser.T__11);

	        }
	        this.state = 750;
	        this.enumerationRef();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumerationType() {
	    let localctx = new EnumerationTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, Express_simpleParser.RULE_enumerationType);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 753;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===74) {
	            this.state = 752;
	            this.match(Express_simpleParser.EXTENSIBLE);
	        }

	        this.state = 755;
	        this.match(Express_simpleParser.ENUMERATION);
	        this.state = 759;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case 105:
	        	this.state = 756;
	        	this.match(Express_simpleParser.OF);
	        	this.state = 757;
	        	this.enumerationItems();
	        	break;
	        case 55:
	        	this.state = 758;
	        	this.enumerationExtension();
	        	break;
	        case 1:
	        	break;
	        default:
	        	break;
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	escapeStmt() {
	    let localctx = new EscapeStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, Express_simpleParser.RULE_escapeStmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 761;
	        this.match(Express_simpleParser.ESCAPE);
	        this.state = 762;
	        this.match(Express_simpleParser.T__0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	explicitAttr() {
	    let localctx = new ExplicitAttrContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, Express_simpleParser.RULE_explicitAttr);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 764;
	        this.attributeDecl();
	        this.state = 769;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===3) {
	            this.state = 765;
	            this.match(Express_simpleParser.T__2);
	            this.state = 766;
	            this.attributeDecl();
	            this.state = 771;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 772;
	        this.match(Express_simpleParser.T__8);
	        this.state = 774;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===107) {
	            this.state = 773;
	            this.match(Express_simpleParser.OPTIONAL);
	        }

	        this.state = 776;
	        this.parameterType();
	        this.state = 777;
	        this.match(Express_simpleParser.T__0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expression() {
	    let localctx = new ExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, Express_simpleParser.RULE_expression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 779;
	        this.simpleExpression();
	        this.state = 783;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 23)) & ~0x1f) == 0 && ((1 << (_la - 23)) & 32259) !== 0) || _la===86 || _la===91) {
	            this.state = 780;
	            this.relOpExtended();
	            this.state = 781;
	            this.simpleExpression();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	factor() {
	    let localctx = new FactorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, Express_simpleParser.RULE_factor);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 785;
	        this.simpleFactor();
	        this.state = 788;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===17) {
	            this.state = 786;
	            this.match(Express_simpleParser.T__16);
	            this.state = 787;
	            this.simpleFactor();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	formalParameter() {
	    let localctx = new FormalParameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, Express_simpleParser.RULE_formalParameter);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 790;
	        this.parameterId();
	        this.state = 795;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===3) {
	            this.state = 791;
	            this.match(Express_simpleParser.T__2);
	            this.state = 792;
	            this.parameterId();
	            this.state = 797;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 798;
	        this.match(Express_simpleParser.T__8);
	        this.state = 799;
	        this.parameterType();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionCall() {
	    let localctx = new FunctionCallContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, Express_simpleParser.RULE_functionCall);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 803;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 43:
	        case 45:
	        case 52:
	        case 53:
	        case 58:
	        case 64:
	        case 72:
	        case 73:
	        case 78:
	        case 83:
	        case 84:
	        case 90:
	        case 93:
	        case 95:
	        case 96:
	        case 97:
	        case 99:
	        case 103:
	        case 104:
	        case 119:
	        case 125:
	        case 126:
	        case 128:
	        case 133:
	        case 138:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	            this.state = 801;
	            this.builtInFunction();
	            break;
	        case 157:
	            this.state = 802;
	            this.functionRef();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 806;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===2) {
	            this.state = 805;
	            this.actualParameterList();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionDecl() {
	    let localctx = new FunctionDeclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, Express_simpleParser.RULE_functionDecl);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 808;
	        this.functionHead();
	        this.state = 809;
	        this.algorithmHead();
	        this.state = 810;
	        this.stmt();
	        this.state = 814;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===1 || ((((_la - 47)) & ~0x1f) == 0 && ((1 << (_la - 47)) & 16794113) !== 0) || ((((_la - 85)) & ~0x1f) == 0 && ((1 << (_la - 85)) & 1073741829) !== 0) || ((((_la - 117)) & ~0x1f) == 0 && ((1 << (_la - 117)) & 1027) !== 0) || _la===157) {
	            this.state = 811;
	            this.stmt();
	            this.state = 816;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 817;
	        this.match(Express_simpleParser.T__17);
	        this.state = 818;
	        this.match(Express_simpleParser.T__0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionHead() {
	    let localctx = new FunctionHeadContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, Express_simpleParser.RULE_functionHead);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 820;
	        this.match(Express_simpleParser.FUNCTION);
	        this.state = 821;
	        this.functionId();
	        this.state = 833;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===2) {
	            this.state = 822;
	            this.match(Express_simpleParser.T__1);
	            this.state = 823;
	            this.formalParameter();
	            this.state = 828;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===1) {
	                this.state = 824;
	                this.match(Express_simpleParser.T__0);
	                this.state = 825;
	                this.formalParameter();
	                this.state = 830;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 831;
	            this.match(Express_simpleParser.T__3);
	        }

	        this.state = 835;
	        this.match(Express_simpleParser.T__8);
	        this.state = 836;
	        this.parameterType();
	        this.state = 837;
	        this.match(Express_simpleParser.T__0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionId() {
	    let localctx = new FunctionIdContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, Express_simpleParser.RULE_functionId);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 839;
	        this.match(Express_simpleParser.SimpleId);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	generalizedTypes() {
	    let localctx = new GeneralizedTypesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, Express_simpleParser.RULE_generalizedTypes);
	    try {
	        this.state = 845;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 46:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 841;
	            this.aggregateType();
	            break;
	        case 50:
	        case 54:
	        case 92:
	        case 124:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 842;
	            this.generalAggregationTypes();
	            break;
	        case 82:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 843;
	            this.genericEntityType();
	            break;
	        case 81:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 844;
	            this.genericType();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	generalAggregationTypes() {
	    let localctx = new GeneralAggregationTypesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, Express_simpleParser.RULE_generalAggregationTypes);
	    try {
	        this.state = 851;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 50:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 847;
	            this.generalArrayType();
	            break;
	        case 54:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 848;
	            this.generalBagType();
	            break;
	        case 92:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 849;
	            this.generalListType();
	            break;
	        case 124:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 850;
	            this.generalSetType();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	generalArrayType() {
	    let localctx = new GeneralArrayTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 152, Express_simpleParser.RULE_generalArrayType);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 853;
	        this.match(Express_simpleParser.ARRAY);
	        this.state = 855;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===7) {
	            this.state = 854;
	            this.boundSpec();
	        }

	        this.state = 857;
	        this.match(Express_simpleParser.OF);
	        this.state = 859;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===107) {
	            this.state = 858;
	            this.match(Express_simpleParser.OPTIONAL);
	        }

	        this.state = 862;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===140) {
	            this.state = 861;
	            this.match(Express_simpleParser.UNIQUE);
	        }

	        this.state = 864;
	        this.parameterType();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	generalBagType() {
	    let localctx = new GeneralBagTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 154, Express_simpleParser.RULE_generalBagType);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 866;
	        this.match(Express_simpleParser.BAG);
	        this.state = 868;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===7) {
	            this.state = 867;
	            this.boundSpec();
	        }

	        this.state = 870;
	        this.match(Express_simpleParser.OF);
	        this.state = 871;
	        this.parameterType();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	generalListType() {
	    let localctx = new GeneralListTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 156, Express_simpleParser.RULE_generalListType);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 873;
	        this.match(Express_simpleParser.LIST);
	        this.state = 875;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===7) {
	            this.state = 874;
	            this.boundSpec();
	        }

	        this.state = 877;
	        this.match(Express_simpleParser.OF);
	        this.state = 879;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===140) {
	            this.state = 878;
	            this.match(Express_simpleParser.UNIQUE);
	        }

	        this.state = 881;
	        this.parameterType();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	generalRef() {
	    let localctx = new GeneralRefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 158, Express_simpleParser.RULE_generalRef);
	    try {
	        this.state = 885;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,59,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 883;
	            this.parameterRef();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 884;
	            this.variableId();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	generalSetType() {
	    let localctx = new GeneralSetTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 160, Express_simpleParser.RULE_generalSetType);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 887;
	        this.match(Express_simpleParser.SET);
	        this.state = 889;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===7) {
	            this.state = 888;
	            this.boundSpec();
	        }

	        this.state = 891;
	        this.match(Express_simpleParser.OF);
	        this.state = 892;
	        this.parameterType();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	genericEntityType() {
	    let localctx = new GenericEntityTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 162, Express_simpleParser.RULE_genericEntityType);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 894;
	        this.match(Express_simpleParser.GENERIC_ENTITY);
	        this.state = 897;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===9) {
	            this.state = 895;
	            this.match(Express_simpleParser.T__8);
	            this.state = 896;
	            this.typeLabel();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	genericType() {
	    let localctx = new GenericTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 164, Express_simpleParser.RULE_genericType);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 899;
	        this.match(Express_simpleParser.GENERIC);
	        this.state = 902;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===9) {
	            this.state = 900;
	            this.match(Express_simpleParser.T__8);
	            this.state = 901;
	            this.typeLabel();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	groupQualifier() {
	    let localctx = new GroupQualifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 166, Express_simpleParser.RULE_groupQualifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 904;
	        this.match(Express_simpleParser.T__18);
	        this.state = 905;
	        this.entityRef();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ifStmt() {
	    let localctx = new IfStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 168, Express_simpleParser.RULE_ifStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 907;
	        this.match(Express_simpleParser.IF);
	        this.state = 908;
	        this.logicalExpression();
	        this.state = 909;
	        this.match(Express_simpleParser.THEN);
	        this.state = 910;
	        this.ifStmtStatements();
	        this.state = 913;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===67) {
	            this.state = 911;
	            this.match(Express_simpleParser.ELSE);
	            this.state = 912;
	            this.ifStmtElseStatements();
	        }

	        this.state = 915;
	        this.match(Express_simpleParser.T__19);
	        this.state = 916;
	        this.match(Express_simpleParser.T__0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ifStmtStatements() {
	    let localctx = new IfStmtStatementsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 170, Express_simpleParser.RULE_ifStmtStatements);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 918;
	        this.stmt();
	        this.state = 922;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===1 || ((((_la - 47)) & ~0x1f) == 0 && ((1 << (_la - 47)) & 16794113) !== 0) || ((((_la - 85)) & ~0x1f) == 0 && ((1 << (_la - 85)) & 1073741829) !== 0) || ((((_la - 117)) & ~0x1f) == 0 && ((1 << (_la - 117)) & 1027) !== 0) || _la===157) {
	            this.state = 919;
	            this.stmt();
	            this.state = 924;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ifStmtElseStatements() {
	    let localctx = new IfStmtElseStatementsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 172, Express_simpleParser.RULE_ifStmtElseStatements);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 925;
	        this.stmt();
	        this.state = 929;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===1 || ((((_la - 47)) & ~0x1f) == 0 && ((1 << (_la - 47)) & 16794113) !== 0) || ((((_la - 85)) & ~0x1f) == 0 && ((1 << (_la - 85)) & 1073741829) !== 0) || ((((_la - 117)) & ~0x1f) == 0 && ((1 << (_la - 117)) & 1027) !== 0) || _la===157) {
	            this.state = 926;
	            this.stmt();
	            this.state = 931;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	increment() {
	    let localctx = new IncrementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 174, Express_simpleParser.RULE_increment);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 932;
	        this.numericExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	incrementControl() {
	    let localctx = new IncrementControlContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 176, Express_simpleParser.RULE_incrementControl);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 934;
	        this.variableId();
	        this.state = 935;
	        this.match(Express_simpleParser.T__10);
	        this.state = 936;
	        this.bound1();
	        this.state = 937;
	        this.match(Express_simpleParser.TO);
	        this.state = 938;
	        this.bound2();
	        this.state = 941;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===60) {
	            this.state = 939;
	            this.match(Express_simpleParser.BY);
	            this.state = 940;
	            this.increment();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	index() {
	    let localctx = new IndexContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 178, Express_simpleParser.RULE_index);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 943;
	        this.numericExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	index1() {
	    let localctx = new Index1Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 180, Express_simpleParser.RULE_index1);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 945;
	        this.index();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	index2() {
	    let localctx = new Index2Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 182, Express_simpleParser.RULE_index2);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 947;
	        this.index();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	indexQualifier() {
	    let localctx = new IndexQualifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 184, Express_simpleParser.RULE_indexQualifier);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 949;
	        this.match(Express_simpleParser.T__6);
	        this.state = 950;
	        this.index1();
	        this.state = 953;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===9) {
	            this.state = 951;
	            this.match(Express_simpleParser.T__8);
	            this.state = 952;
	            this.index2();
	        }

	        this.state = 955;
	        this.match(Express_simpleParser.T__7);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	instantiableType() {
	    let localctx = new InstantiableTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 186, Express_simpleParser.RULE_instantiableType);
	    try {
	        this.state = 959;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,68,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 957;
	            this.concreteTypes();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 958;
	            this.entityRef();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	integerType() {
	    let localctx = new IntegerTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 188, Express_simpleParser.RULE_integerType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 961;
	        this.match(Express_simpleParser.INTEGER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interfaceSpecification() {
	    let localctx = new InterfaceSpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 190, Express_simpleParser.RULE_interfaceSpecification);
	    try {
	        this.state = 965;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 114:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 963;
	            this.referenceClause();
	            break;
	        case 143:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 964;
	            this.useClause();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interval() {
	    let localctx = new IntervalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 192, Express_simpleParser.RULE_interval);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 967;
	        this.match(Express_simpleParser.T__20);
	        this.state = 968;
	        this.intervalLow();
	        this.state = 969;
	        this.intervalOp();
	        this.state = 970;
	        this.intervalItem();
	        this.state = 971;
	        this.intervalOp();
	        this.state = 972;
	        this.intervalHigh();
	        this.state = 973;
	        this.match(Express_simpleParser.T__21);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	intervalHigh() {
	    let localctx = new IntervalHighContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 194, Express_simpleParser.RULE_intervalHigh);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 975;
	        this.simpleExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	intervalItem() {
	    let localctx = new IntervalItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 196, Express_simpleParser.RULE_intervalItem);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 977;
	        this.simpleExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	intervalLow() {
	    let localctx = new IntervalLowContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 198, Express_simpleParser.RULE_intervalLow);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 979;
	        this.simpleExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	intervalOp() {
	    let localctx = new IntervalOpContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 200, Express_simpleParser.RULE_intervalOp);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 981;
	        _la = this._input.LA(1);
	        if(!(_la===23 || _la===24)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inverseAttr() {
	    let localctx = new InverseAttrContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 202, Express_simpleParser.RULE_inverseAttr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 983;
	        this.attributeDecl();
	        this.state = 984;
	        this.match(Express_simpleParser.T__8);
	        this.state = 985;
	        this.inverseAttrType();
	        this.state = 986;
	        this.match(Express_simpleParser.FOR);
	        this.state = 990;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,70,this._ctx);
	        if(la_===1) {
	            this.state = 987;
	            this.entityRef();
	            this.state = 988;
	            this.match(Express_simpleParser.T__11);

	        }
	        this.state = 992;
	        this.attributeRef();
	        this.state = 993;
	        this.match(Express_simpleParser.T__0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inverseAttrType() {
	    let localctx = new InverseAttrTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 204, Express_simpleParser.RULE_inverseAttrType);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1000;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===54 || _la===124) {
	            this.state = 995;
	            _la = this._input.LA(1);
	            if(!(_la===54 || _la===124)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 997;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===7) {
	                this.state = 996;
	                this.boundSpec();
	            }

	            this.state = 999;
	            this.match(Express_simpleParser.OF);
	        }

	        this.state = 1002;
	        this.entityRef();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inverseClause() {
	    let localctx = new InverseClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 206, Express_simpleParser.RULE_inverseClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1004;
	        this.match(Express_simpleParser.INVERSE);
	        this.state = 1005;
	        this.inverseAttr();
	        this.state = 1009;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===123 || _la===157) {
	            this.state = 1006;
	            this.inverseAttr();
	            this.state = 1011;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	listType() {
	    let localctx = new ListTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 208, Express_simpleParser.RULE_listType);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1012;
	        this.match(Express_simpleParser.LIST);
	        this.state = 1014;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===7) {
	            this.state = 1013;
	            this.boundSpec();
	        }

	        this.state = 1016;
	        this.match(Express_simpleParser.OF);
	        this.state = 1018;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===140) {
	            this.state = 1017;
	            this.match(Express_simpleParser.UNIQUE);
	        }

	        this.state = 1020;
	        this.instantiableType();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	literal() {
	    let localctx = new LiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 210, Express_simpleParser.RULE_literal);
	    try {
	        this.state = 1027;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 153:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1022;
	            this.match(Express_simpleParser.BinaryLiteral);
	            break;
	        case 155:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1023;
	            this.match(Express_simpleParser.IntegerLiteral);
	            break;
	        case 75:
	        case 136:
	        case 141:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1024;
	            this.logicalLiteral();
	            break;
	        case 156:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1025;
	            this.match(Express_simpleParser.RealLiteral);
	            break;
	        case 154:
	        case 158:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1026;
	            this.stringLiteral();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	localDecl() {
	    let localctx = new LocalDeclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 212, Express_simpleParser.RULE_localDecl);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1029;
	        this.match(Express_simpleParser.LOCAL);
	        this.state = 1030;
	        this.localVariable();
	        this.state = 1034;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===157) {
	            this.state = 1031;
	            this.localVariable();
	            this.state = 1036;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1037;
	        this.match(Express_simpleParser.T__24);
	        this.state = 1038;
	        this.match(Express_simpleParser.T__0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	localVariable() {
	    let localctx = new LocalVariableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 214, Express_simpleParser.RULE_localVariable);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1040;
	        this.variableId();
	        this.state = 1045;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===3) {
	            this.state = 1041;
	            this.match(Express_simpleParser.T__2);
	            this.state = 1042;
	            this.variableId();
	            this.state = 1047;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1048;
	        this.match(Express_simpleParser.T__8);
	        this.state = 1049;
	        this.parameterType();
	        this.state = 1052;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===11) {
	            this.state = 1050;
	            this.match(Express_simpleParser.T__10);
	            this.state = 1051;
	            this.expression();
	        }

	        this.state = 1054;
	        this.match(Express_simpleParser.T__0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	logicalExpression() {
	    let localctx = new LogicalExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 216, Express_simpleParser.RULE_logicalExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1056;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	logicalLiteral() {
	    let localctx = new LogicalLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 218, Express_simpleParser.RULE_logicalLiteral);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1058;
	        _la = this._input.LA(1);
	        if(!(_la===75 || _la===136 || _la===141)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	logicalType() {
	    let localctx = new LogicalTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 220, Express_simpleParser.RULE_logicalType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1060;
	        this.match(Express_simpleParser.LOGICAL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	multiplicationLikeOp() {
	    let localctx = new MultiplicationLikeOpContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 222, Express_simpleParser.RULE_multiplicationLikeOp);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1062;
	        _la = this._input.LA(1);
	        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & 469762048) !== 0) || _la===48 || _la===66 || _la===100)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	namedTypes() {
	    let localctx = new NamedTypesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 224, Express_simpleParser.RULE_namedTypes);
	    try {
	        this.state = 1066;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,80,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1064;
	            this.entityRef();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1065;
	            this.typeRef();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	namedTypeOrRename() {
	    let localctx = new NamedTypeOrRenameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 226, Express_simpleParser.RULE_namedTypeOrRename);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1068;
	        this.namedTypes();
	        this.state = 1074;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===51) {
	            this.state = 1069;
	            this.match(Express_simpleParser.AS);
	            this.state = 1072;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,81,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 1070;
	                this.entityId();
	                break;

	            case 2:
	                this.state = 1071;
	                this.typeId();
	                break;

	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nullStmt() {
	    let localctx = new NullStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 228, Express_simpleParser.RULE_nullStmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1076;
	        this.match(Express_simpleParser.T__0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	numberType() {
	    let localctx = new NumberTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 230, Express_simpleParser.RULE_numberType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1078;
	        this.match(Express_simpleParser.NUMBER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	numericExpression() {
	    let localctx = new NumericExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 232, Express_simpleParser.RULE_numericExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1080;
	        this.simpleExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oneOf() {
	    let localctx = new OneOfContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 234, Express_simpleParser.RULE_oneOf);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1082;
	        this.match(Express_simpleParser.ONEOF);
	        this.state = 1083;
	        this.match(Express_simpleParser.T__1);
	        this.state = 1084;
	        this.supertypeExpression();
	        this.state = 1089;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===3) {
	            this.state = 1085;
	            this.match(Express_simpleParser.T__2);
	            this.state = 1086;
	            this.supertypeExpression();
	            this.state = 1091;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1092;
	        this.match(Express_simpleParser.T__3);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parameter() {
	    let localctx = new ParameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 236, Express_simpleParser.RULE_parameter);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1094;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parameterId() {
	    let localctx = new ParameterIdContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 238, Express_simpleParser.RULE_parameterId);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1096;
	        this.match(Express_simpleParser.SimpleId);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parameterType() {
	    let localctx = new ParameterTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 240, Express_simpleParser.RULE_parameterType);
	    try {
	        this.state = 1101;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 46:
	        case 50:
	        case 54:
	        case 81:
	        case 82:
	        case 92:
	        case 124:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1098;
	            this.generalizedTypes();
	            break;
	        case 157:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1099;
	            this.namedTypes();
	            break;
	        case 57:
	        case 59:
	        case 88:
	        case 98:
	        case 102:
	        case 113:
	        case 129:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1100;
	            this.simpleTypes();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	population() {
	    let localctx = new PopulationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 242, Express_simpleParser.RULE_population);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1103;
	        this.entityRef();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	precisionSpec() {
	    let localctx = new PrecisionSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 244, Express_simpleParser.RULE_precisionSpec);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1105;
	        this.numericExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primary() {
	    let localctx = new PrimaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 246, Express_simpleParser.RULE_primary);
	    var _la = 0; // Token type
	    try {
	        this.state = 1115;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 75:
	        case 136:
	        case 141:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 158:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1107;
	            this.literal();
	            break;
	        case 13:
	        case 43:
	        case 45:
	        case 52:
	        case 53:
	        case 58:
	        case 63:
	        case 64:
	        case 72:
	        case 73:
	        case 78:
	        case 83:
	        case 84:
	        case 90:
	        case 93:
	        case 95:
	        case 96:
	        case 97:
	        case 99:
	        case 103:
	        case 104:
	        case 110:
	        case 119:
	        case 123:
	        case 125:
	        case 126:
	        case 128:
	        case 133:
	        case 138:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 157:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1108;
	            this.qualifiableFactor();
	            this.state = 1112;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while((((_la) & ~0x1f) == 0 && ((1 << _la) & 528512) !== 0)) {
	                this.state = 1109;
	                this.qualifier();
	                this.state = 1114;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	procedureCallStmt() {
	    let localctx = new ProcedureCallStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 248, Express_simpleParser.RULE_procedureCallStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1119;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 87:
	        case 115:
	            this.state = 1117;
	            this.builtInProcedure();
	            break;
	        case 157:
	            this.state = 1118;
	            this.procedureRef();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 1122;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===2) {
	            this.state = 1121;
	            this.actualParameterList();
	        }

	        this.state = 1124;
	        this.match(Express_simpleParser.T__0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	procedureDecl() {
	    let localctx = new ProcedureDeclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 250, Express_simpleParser.RULE_procedureDecl);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1126;
	        this.procedureHead();
	        this.state = 1127;
	        this.algorithmHead();
	        this.state = 1131;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===1 || ((((_la - 47)) & ~0x1f) == 0 && ((1 << (_la - 47)) & 16794113) !== 0) || ((((_la - 85)) & ~0x1f) == 0 && ((1 << (_la - 85)) & 1073741829) !== 0) || ((((_la - 117)) & ~0x1f) == 0 && ((1 << (_la - 117)) & 1027) !== 0) || _la===157) {
	            this.state = 1128;
	            this.stmt();
	            this.state = 1133;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1134;
	        this.match(Express_simpleParser.T__28);
	        this.state = 1135;
	        this.match(Express_simpleParser.T__0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	procedureHead() {
	    let localctx = new ProcedureHeadContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 252, Express_simpleParser.RULE_procedureHead);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1137;
	        this.match(Express_simpleParser.PROCEDURE);
	        this.state = 1138;
	        this.procedureId();
	        this.state = 1150;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===2) {
	            this.state = 1139;
	            this.match(Express_simpleParser.T__1);
	            this.state = 1140;
	            this.procedureHeadParameter();
	            this.state = 1145;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===1) {
	                this.state = 1141;
	                this.match(Express_simpleParser.T__0);
	                this.state = 1142;
	                this.procedureHeadParameter();
	                this.state = 1147;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1148;
	            this.match(Express_simpleParser.T__3);
	        }

	        this.state = 1152;
	        this.match(Express_simpleParser.T__0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	procedureHeadParameter() {
	    let localctx = new ProcedureHeadParameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 254, Express_simpleParser.RULE_procedureHeadParameter);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1155;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===148) {
	            this.state = 1154;
	            this.match(Express_simpleParser.VAR);
	        }

	        this.state = 1157;
	        this.formalParameter();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	procedureId() {
	    let localctx = new ProcedureIdContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 256, Express_simpleParser.RULE_procedureId);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1159;
	        this.match(Express_simpleParser.SimpleId);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	qualifiableFactor() {
	    let localctx = new QualifiableFactorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 258, Express_simpleParser.RULE_qualifiableFactor);
	    try {
	        this.state = 1166;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,93,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1161;
	            this.attributeRef();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1162;
	            this.constantFactor();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1163;
	            this.functionCall();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1164;
	            this.generalRef();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1165;
	            this.population();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	qualifiedAttribute() {
	    let localctx = new QualifiedAttributeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 260, Express_simpleParser.RULE_qualifiedAttribute);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1168;
	        this.match(Express_simpleParser.SELF);
	        this.state = 1169;
	        this.groupQualifier();
	        this.state = 1170;
	        this.attributeQualifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	qualifier() {
	    let localctx = new QualifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 262, Express_simpleParser.RULE_qualifier);
	    try {
	        this.state = 1175;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 12:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1172;
	            this.attributeQualifier();
	            break;
	        case 19:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1173;
	            this.groupQualifier();
	            break;
	        case 7:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1174;
	            this.indexQualifier();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	queryExpression() {
	    let localctx = new QueryExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 264, Express_simpleParser.RULE_queryExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1177;
	        this.match(Express_simpleParser.QUERY);
	        this.state = 1178;
	        this.match(Express_simpleParser.T__1);
	        this.state = 1179;
	        this.variableId();
	        this.state = 1180;
	        this.match(Express_simpleParser.T__29);
	        this.state = 1181;
	        this.aggregateSource();
	        this.state = 1182;
	        this.match(Express_simpleParser.T__30);
	        this.state = 1183;
	        this.logicalExpression();
	        this.state = 1184;
	        this.match(Express_simpleParser.T__3);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	realType() {
	    let localctx = new RealTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 266, Express_simpleParser.RULE_realType);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1186;
	        this.match(Express_simpleParser.REAL);
	        this.state = 1191;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===2) {
	            this.state = 1187;
	            this.match(Express_simpleParser.T__1);
	            this.state = 1188;
	            this.precisionSpec();
	            this.state = 1189;
	            this.match(Express_simpleParser.T__3);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	redeclaredAttribute() {
	    let localctx = new RedeclaredAttributeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 268, Express_simpleParser.RULE_redeclaredAttribute);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1193;
	        this.qualifiedAttribute();
	        this.state = 1196;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===116) {
	            this.state = 1194;
	            this.match(Express_simpleParser.RENAMED);
	            this.state = 1195;
	            this.attributeId();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	referencedAttribute() {
	    let localctx = new ReferencedAttributeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 270, Express_simpleParser.RULE_referencedAttribute);
	    try {
	        this.state = 1200;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 157:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1198;
	            this.attributeRef();
	            break;
	        case 123:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1199;
	            this.qualifiedAttribute();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	referenceClause() {
	    let localctx = new ReferenceClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 272, Express_simpleParser.RULE_referenceClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1202;
	        this.match(Express_simpleParser.REFERENCE);
	        this.state = 1203;
	        this.match(Express_simpleParser.FROM);
	        this.state = 1204;
	        this.schemaRef();
	        this.state = 1216;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===2) {
	            this.state = 1205;
	            this.match(Express_simpleParser.T__1);
	            this.state = 1206;
	            this.resourceOrRename();
	            this.state = 1211;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===3) {
	                this.state = 1207;
	                this.match(Express_simpleParser.T__2);
	                this.state = 1208;
	                this.resourceOrRename();
	                this.state = 1213;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1214;
	            this.match(Express_simpleParser.T__3);
	        }

	        this.state = 1218;
	        this.match(Express_simpleParser.T__0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	relOp() {
	    let localctx = new RelOpContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 274, Express_simpleParser.RULE_relOp);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1220;
	        _la = this._input.LA(1);
	        if(!(((((_la - 23)) & ~0x1f) == 0 && ((1 << (_la - 23)) & 32259) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	relOpExtended() {
	    let localctx = new RelOpExtendedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 276, Express_simpleParser.RULE_relOpExtended);
	    try {
	        this.state = 1225;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 23:
	        case 24:
	        case 32:
	        case 33:
	        case 34:
	        case 35:
	        case 36:
	        case 37:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1222;
	            this.relOp();
	            break;
	        case 86:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1223;
	            this.match(Express_simpleParser.IN);
	            break;
	        case 91:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1224;
	            this.match(Express_simpleParser.LIKE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	renameId() {
	    let localctx = new RenameIdContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 278, Express_simpleParser.RULE_renameId);
	    try {
	        this.state = 1232;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,101,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1227;
	            this.constantId();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1228;
	            this.entityId();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1229;
	            this.functionId();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1230;
	            this.procedureId();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1231;
	            this.typeId();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	repeatControl() {
	    let localctx = new RepeatControlContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 280, Express_simpleParser.RULE_repeatControl);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1235;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===157) {
	            this.state = 1234;
	            this.incrementControl();
	        }

	        this.state = 1238;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===151) {
	            this.state = 1237;
	            this.whileControl();
	        }

	        this.state = 1241;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===142) {
	            this.state = 1240;
	            this.untilControl();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	repeatStmt() {
	    let localctx = new RepeatStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 282, Express_simpleParser.RULE_repeatStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1243;
	        this.match(Express_simpleParser.REPEAT);
	        this.state = 1244;
	        this.repeatControl();
	        this.state = 1245;
	        this.match(Express_simpleParser.T__0);
	        this.state = 1246;
	        this.stmt();
	        this.state = 1250;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===1 || ((((_la - 47)) & ~0x1f) == 0 && ((1 << (_la - 47)) & 16794113) !== 0) || ((((_la - 85)) & ~0x1f) == 0 && ((1 << (_la - 85)) & 1073741829) !== 0) || ((((_la - 117)) & ~0x1f) == 0 && ((1 << (_la - 117)) & 1027) !== 0) || _la===157) {
	            this.state = 1247;
	            this.stmt();
	            this.state = 1252;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1253;
	        this.match(Express_simpleParser.T__37);
	        this.state = 1254;
	        this.match(Express_simpleParser.T__0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	repetition() {
	    let localctx = new RepetitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 284, Express_simpleParser.RULE_repetition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1256;
	        this.numericExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resourceOrRename() {
	    let localctx = new ResourceOrRenameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 286, Express_simpleParser.RULE_resourceOrRename);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1258;
	        this.resourceRef();
	        this.state = 1261;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===51) {
	            this.state = 1259;
	            this.match(Express_simpleParser.AS);
	            this.state = 1260;
	            this.renameId();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resourceRef() {
	    let localctx = new ResourceRefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 288, Express_simpleParser.RULE_resourceRef);
	    try {
	        this.state = 1268;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,107,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1263;
	            this.constantRef();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1264;
	            this.entityRef();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1265;
	            this.functionRef();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1266;
	            this.procedureRef();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1267;
	            this.typeRef();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	returnStmt() {
	    let localctx = new ReturnStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 290, Express_simpleParser.RULE_returnStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1270;
	        this.match(Express_simpleParser.RETURN);
	        this.state = 1275;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===2) {
	            this.state = 1271;
	            this.match(Express_simpleParser.T__1);
	            this.state = 1272;
	            this.expression();
	            this.state = 1273;
	            this.match(Express_simpleParser.T__3);
	        }

	        this.state = 1277;
	        this.match(Express_simpleParser.T__0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ruleDecl() {
	    let localctx = new RuleDeclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 292, Express_simpleParser.RULE_ruleDecl);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1279;
	        this.ruleHead();
	        this.state = 1280;
	        this.algorithmHead();
	        this.state = 1284;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===1 || ((((_la - 47)) & ~0x1f) == 0 && ((1 << (_la - 47)) & 16794113) !== 0) || ((((_la - 85)) & ~0x1f) == 0 && ((1 << (_la - 85)) & 1073741829) !== 0) || ((((_la - 117)) & ~0x1f) == 0 && ((1 << (_la - 117)) & 1027) !== 0) || _la===157) {
	            this.state = 1281;
	            this.stmt();
	            this.state = 1286;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1287;
	        this.whereClause();
	        this.state = 1288;
	        this.match(Express_simpleParser.T__38);
	        this.state = 1289;
	        this.match(Express_simpleParser.T__0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ruleHead() {
	    let localctx = new RuleHeadContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 294, Express_simpleParser.RULE_ruleHead);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1291;
	        this.match(Express_simpleParser.RULE);
	        this.state = 1292;
	        this.ruleId();
	        this.state = 1293;
	        this.match(Express_simpleParser.FOR);
	        this.state = 1294;
	        this.match(Express_simpleParser.T__1);
	        this.state = 1295;
	        this.entityRef();
	        this.state = 1300;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===3) {
	            this.state = 1296;
	            this.match(Express_simpleParser.T__2);
	            this.state = 1297;
	            this.entityRef();
	            this.state = 1302;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1303;
	        this.match(Express_simpleParser.T__3);
	        this.state = 1304;
	        this.match(Express_simpleParser.T__0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ruleId() {
	    let localctx = new RuleIdContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 296, Express_simpleParser.RULE_ruleId);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1306;
	        this.match(Express_simpleParser.SimpleId);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ruleLabelId() {
	    let localctx = new RuleLabelIdContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 298, Express_simpleParser.RULE_ruleLabelId);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1308;
	        this.match(Express_simpleParser.SimpleId);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	schemaBody() {
	    let localctx = new SchemaBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 300, Express_simpleParser.RULE_schemaBody);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1313;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===114 || _la===143) {
	            this.state = 1310;
	            this.interfaceSpecification();
	            this.state = 1315;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1317;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===62) {
	            this.state = 1316;
	            this.constantDecl();
	        }

	        this.state = 1322;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===69 || _la===80 || ((((_la - 111)) & ~0x1f) == 0 && ((1 << (_la - 111)) & 68157953) !== 0)) {
	            this.state = 1319;
	            this.schemaBodyDeclaration();
	            this.state = 1324;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	schemaBodyDeclaration() {
	    let localctx = new SchemaBodyDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 302, Express_simpleParser.RULE_schemaBodyDeclaration);
	    try {
	        this.state = 1327;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 69:
	        case 80:
	        case 111:
	        case 131:
	        case 137:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1325;
	            this.declaration();
	            break;
	        case 120:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1326;
	            this.ruleDecl();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	schemaDecl() {
	    let localctx = new SchemaDeclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 304, Express_simpleParser.RULE_schemaDecl);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1329;
	        this.match(Express_simpleParser.SCHEMA);
	        this.state = 1330;
	        this.schemaId();
	        this.state = 1332;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===154 || _la===158) {
	            this.state = 1331;
	            this.schemaVersionId();
	        }

	        this.state = 1334;
	        this.match(Express_simpleParser.T__0);
	        this.state = 1335;
	        this.schemaBody();
	        this.state = 1336;
	        this.match(Express_simpleParser.T__39);
	        this.state = 1337;
	        this.match(Express_simpleParser.T__0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	schemaId() {
	    let localctx = new SchemaIdContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 306, Express_simpleParser.RULE_schemaId);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1339;
	        this.match(Express_simpleParser.SimpleId);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	schemaVersionId() {
	    let localctx = new SchemaVersionIdContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 308, Express_simpleParser.RULE_schemaVersionId);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1341;
	        this.stringLiteral();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selector() {
	    let localctx = new SelectorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 310, Express_simpleParser.RULE_selector);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1343;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectExtension() {
	    let localctx = new SelectExtensionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 312, Express_simpleParser.RULE_selectExtension);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1345;
	        this.match(Express_simpleParser.BASED_ON);
	        this.state = 1346;
	        this.typeRef();
	        this.state = 1349;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===149) {
	            this.state = 1347;
	            this.match(Express_simpleParser.WITH);
	            this.state = 1348;
	            this.selectList();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectList() {
	    let localctx = new SelectListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 314, Express_simpleParser.RULE_selectList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1351;
	        this.match(Express_simpleParser.T__1);
	        this.state = 1352;
	        this.namedTypes();
	        this.state = 1357;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===3) {
	            this.state = 1353;
	            this.match(Express_simpleParser.T__2);
	            this.state = 1354;
	            this.namedTypes();
	            this.state = 1359;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1360;
	        this.match(Express_simpleParser.T__3);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectType() {
	    let localctx = new SelectTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 316, Express_simpleParser.RULE_selectType);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1366;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===74) {
	            this.state = 1362;
	            this.match(Express_simpleParser.EXTENSIBLE);
	            this.state = 1364;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===82) {
	                this.state = 1363;
	                this.match(Express_simpleParser.GENERIC_ENTITY);
	            }

	        }

	        this.state = 1368;
	        this.match(Express_simpleParser.SELECT);
	        this.state = 1371;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case 2:
	        	this.state = 1369;
	        	this.selectList();
	        	break;
	        case 55:
	        	this.state = 1370;
	        	this.selectExtension();
	        	break;
	        case 1:
	        	break;
	        default:
	        	break;
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setType() {
	    let localctx = new SetTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 318, Express_simpleParser.RULE_setType);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1373;
	        this.match(Express_simpleParser.SET);
	        this.state = 1375;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===7) {
	            this.state = 1374;
	            this.boundSpec();
	        }

	        this.state = 1377;
	        this.match(Express_simpleParser.OF);
	        this.state = 1378;
	        this.instantiableType();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleExpression() {
	    let localctx = new SimpleExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 320, Express_simpleParser.RULE_simpleExpression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1380;
	        this.term();
	        this.state = 1386;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===5 || _la===6 || _la===108 || _la===152) {
	            this.state = 1381;
	            this.addLikeOp();
	            this.state = 1382;
	            this.term();
	            this.state = 1388;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleFactor() {
	    let localctx = new SimpleFactorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 322, Express_simpleParser.RULE_simpleFactor);
	    try {
	        this.state = 1396;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,123,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1389;
	            this.aggregateInitializer();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1390;
	            this.entityConstructor();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1391;
	            this.enumerationReference();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1392;
	            this.interval();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1393;
	            this.queryExpression();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1394;
	            this.simpleFactorExpression();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1395;
	            this.simpleFactorUnaryExpression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleFactorExpression() {
	    let localctx = new SimpleFactorExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 324, Express_simpleParser.RULE_simpleFactorExpression);
	    try {
	        this.state = 1403;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 2:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1398;
	            this.match(Express_simpleParser.T__1);
	            this.state = 1399;
	            this.expression();
	            this.state = 1400;
	            this.match(Express_simpleParser.T__3);
	            break;
	        case 13:
	        case 43:
	        case 45:
	        case 52:
	        case 53:
	        case 58:
	        case 63:
	        case 64:
	        case 72:
	        case 73:
	        case 75:
	        case 78:
	        case 83:
	        case 84:
	        case 90:
	        case 93:
	        case 95:
	        case 96:
	        case 97:
	        case 99:
	        case 103:
	        case 104:
	        case 110:
	        case 119:
	        case 123:
	        case 125:
	        case 126:
	        case 128:
	        case 133:
	        case 136:
	        case 138:
	        case 141:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 153:
	        case 154:
	        case 155:
	        case 156:
	        case 157:
	        case 158:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1402;
	            this.primary();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleFactorUnaryExpression() {
	    let localctx = new SimpleFactorUnaryExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 326, Express_simpleParser.RULE_simpleFactorUnaryExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1405;
	        this.unaryOp();
	        this.state = 1406;
	        this.simpleFactorExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleTypes() {
	    let localctx = new SimpleTypesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 328, Express_simpleParser.RULE_simpleTypes);
	    try {
	        this.state = 1415;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 57:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1408;
	            this.binaryType();
	            break;
	        case 59:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1409;
	            this.booleanType();
	            break;
	        case 88:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1410;
	            this.integerType();
	            break;
	        case 98:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1411;
	            this.logicalType();
	            break;
	        case 102:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1412;
	            this.numberType();
	            break;
	        case 113:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1413;
	            this.realType();
	            break;
	        case 129:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1414;
	            this.stringType();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	skipStmt() {
	    let localctx = new SkipStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 330, Express_simpleParser.RULE_skipStmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1417;
	        this.match(Express_simpleParser.SKIP_);
	        this.state = 1418;
	        this.match(Express_simpleParser.T__0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stmt() {
	    let localctx = new StmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 332, Express_simpleParser.RULE_stmt);
	    try {
	        this.state = 1431;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,126,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1420;
	            this.aliasStmt();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1421;
	            this.assignmentStmt();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1422;
	            this.caseStmt();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1423;
	            this.compoundStmt();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1424;
	            this.escapeStmt();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1425;
	            this.ifStmt();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1426;
	            this.nullStmt();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1427;
	            this.procedureCallStmt();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1428;
	            this.repeatStmt();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 1429;
	            this.returnStmt();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 1430;
	            this.skipStmt();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stringLiteral() {
	    let localctx = new StringLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 334, Express_simpleParser.RULE_stringLiteral);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1433;
	        _la = this._input.LA(1);
	        if(!(_la===154 || _la===158)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stringType() {
	    let localctx = new StringTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 336, Express_simpleParser.RULE_stringType);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1435;
	        this.match(Express_simpleParser.STRING);
	        this.state = 1437;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===2) {
	            this.state = 1436;
	            this.widthSpec();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	subsuper() {
	    let localctx = new SubsuperContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 338, Express_simpleParser.RULE_subsuper);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1440;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===44 || _la===132) {
	            this.state = 1439;
	            this.supertypeConstraint();
	        }

	        this.state = 1443;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===130) {
	            this.state = 1442;
	            this.subtypeDeclaration();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	subtypeConstraint() {
	    let localctx = new SubtypeConstraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 340, Express_simpleParser.RULE_subtypeConstraint);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1445;
	        this.match(Express_simpleParser.OF);
	        this.state = 1446;
	        this.match(Express_simpleParser.T__1);
	        this.state = 1447;
	        this.supertypeExpression();
	        this.state = 1448;
	        this.match(Express_simpleParser.T__3);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	subtypeConstraintBody() {
	    let localctx = new SubtypeConstraintBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 342, Express_simpleParser.RULE_subtypeConstraintBody);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1451;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===44) {
	            this.state = 1450;
	            this.abstractSupertype();
	        }

	        this.state = 1454;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===139) {
	            this.state = 1453;
	            this.totalOver();
	        }

	        this.state = 1459;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===2 || _la===106 || _la===157) {
	            this.state = 1456;
	            this.supertypeExpression();
	            this.state = 1457;
	            this.match(Express_simpleParser.T__0);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	subtypeConstraintDecl() {
	    let localctx = new SubtypeConstraintDeclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 344, Express_simpleParser.RULE_subtypeConstraintDecl);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1461;
	        this.subtypeConstraintHead();
	        this.state = 1462;
	        this.subtypeConstraintBody();
	        this.state = 1463;
	        this.match(Express_simpleParser.T__40);
	        this.state = 1464;
	        this.match(Express_simpleParser.T__0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	subtypeConstraintHead() {
	    let localctx = new SubtypeConstraintHeadContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 346, Express_simpleParser.RULE_subtypeConstraintHead);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1466;
	        this.match(Express_simpleParser.SUBTYPE_CONSTRAINT);
	        this.state = 1467;
	        this.subtypeConstraintId();
	        this.state = 1468;
	        this.match(Express_simpleParser.FOR);
	        this.state = 1469;
	        this.entityRef();
	        this.state = 1470;
	        this.match(Express_simpleParser.T__0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	subtypeConstraintId() {
	    let localctx = new SubtypeConstraintIdContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 348, Express_simpleParser.RULE_subtypeConstraintId);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1472;
	        this.match(Express_simpleParser.SimpleId);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	subtypeDeclaration() {
	    let localctx = new SubtypeDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 350, Express_simpleParser.RULE_subtypeDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1474;
	        this.match(Express_simpleParser.SUBTYPE);
	        this.state = 1475;
	        this.match(Express_simpleParser.OF);
	        this.state = 1476;
	        this.match(Express_simpleParser.T__1);
	        this.state = 1477;
	        this.entityRef();
	        this.state = 1482;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===3) {
	            this.state = 1478;
	            this.match(Express_simpleParser.T__2);
	            this.state = 1479;
	            this.entityRef();
	            this.state = 1484;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1485;
	        this.match(Express_simpleParser.T__3);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	supertypeConstraint() {
	    let localctx = new SupertypeConstraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 352, Express_simpleParser.RULE_supertypeConstraint);
	    try {
	        this.state = 1490;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,134,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1487;
	            this.abstractEntityDeclaration();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1488;
	            this.abstractSupertypeDeclaration();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1489;
	            this.supertypeRule();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	supertypeExpression() {
	    let localctx = new SupertypeExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 354, Express_simpleParser.RULE_supertypeExpression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1492;
	        this.supertypeFactor();
	        this.state = 1497;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===49) {
	            this.state = 1493;
	            this.match(Express_simpleParser.ANDOR);
	            this.state = 1494;
	            this.supertypeFactor();
	            this.state = 1499;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	supertypeFactor() {
	    let localctx = new SupertypeFactorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 356, Express_simpleParser.RULE_supertypeFactor);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1500;
	        this.supertypeTerm();
	        this.state = 1505;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===48) {
	            this.state = 1501;
	            this.match(Express_simpleParser.AND);
	            this.state = 1502;
	            this.supertypeTerm();
	            this.state = 1507;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	supertypeRule() {
	    let localctx = new SupertypeRuleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 358, Express_simpleParser.RULE_supertypeRule);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1508;
	        this.match(Express_simpleParser.SUPERTYPE);
	        this.state = 1509;
	        this.subtypeConstraint();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	supertypeTerm() {
	    let localctx = new SupertypeTermContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 360, Express_simpleParser.RULE_supertypeTerm);
	    try {
	        this.state = 1517;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 157:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1511;
	            this.entityRef();
	            break;
	        case 106:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1512;
	            this.oneOf();
	            break;
	        case 2:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1513;
	            this.match(Express_simpleParser.T__1);
	            this.state = 1514;
	            this.supertypeExpression();
	            this.state = 1515;
	            this.match(Express_simpleParser.T__3);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	syntax() {
	    let localctx = new SyntaxContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 362, Express_simpleParser.RULE_syntax);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1520; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1519;
	            this.schemaDecl();
	            this.state = 1522; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===121);
	        this.state = 1524;
	        this.match(Express_simpleParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	term() {
	    let localctx = new TermContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 364, Express_simpleParser.RULE_term);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1526;
	        this.factor();
	        this.state = 1532;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & 469762048) !== 0) || _la===48 || _la===66 || _la===100) {
	            this.state = 1527;
	            this.multiplicationLikeOp();
	            this.state = 1528;
	            this.factor();
	            this.state = 1534;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	totalOver() {
	    let localctx = new TotalOverContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 366, Express_simpleParser.RULE_totalOver);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1535;
	        this.match(Express_simpleParser.TOTAL_OVER);
	        this.state = 1536;
	        this.match(Express_simpleParser.T__1);
	        this.state = 1537;
	        this.entityRef();
	        this.state = 1542;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===3) {
	            this.state = 1538;
	            this.match(Express_simpleParser.T__2);
	            this.state = 1539;
	            this.entityRef();
	            this.state = 1544;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1545;
	        this.match(Express_simpleParser.T__3);
	        this.state = 1546;
	        this.match(Express_simpleParser.T__0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeDecl() {
	    let localctx = new TypeDeclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 368, Express_simpleParser.RULE_typeDecl);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1548;
	        this.match(Express_simpleParser.TYPE);
	        this.state = 1549;
	        this.typeId();
	        this.state = 1550;
	        this.match(Express_simpleParser.T__34);
	        this.state = 1551;
	        this.underlyingType();
	        this.state = 1552;
	        this.match(Express_simpleParser.T__0);
	        this.state = 1554;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===150) {
	            this.state = 1553;
	            this.whereClause();
	        }

	        this.state = 1556;
	        this.match(Express_simpleParser.T__41);
	        this.state = 1557;
	        this.match(Express_simpleParser.T__0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeId() {
	    let localctx = new TypeIdContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 370, Express_simpleParser.RULE_typeId);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1559;
	        this.match(Express_simpleParser.SimpleId);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeLabel() {
	    let localctx = new TypeLabelContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 372, Express_simpleParser.RULE_typeLabel);
	    try {
	        this.state = 1563;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,142,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1561;
	            this.typeLabelId();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1562;
	            this.typeLabelRef();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeLabelId() {
	    let localctx = new TypeLabelIdContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 374, Express_simpleParser.RULE_typeLabelId);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1565;
	        this.match(Express_simpleParser.SimpleId);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unaryOp() {
	    let localctx = new UnaryOpContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 376, Express_simpleParser.RULE_unaryOp);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1567;
	        _la = this._input.LA(1);
	        if(!(_la===5 || _la===6 || _la===101)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	underlyingType() {
	    let localctx = new UnderlyingTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 378, Express_simpleParser.RULE_underlyingType);
	    try {
	        this.state = 1571;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 50:
	        case 54:
	        case 57:
	        case 59:
	        case 88:
	        case 92:
	        case 98:
	        case 102:
	        case 113:
	        case 124:
	        case 129:
	        case 157:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1569;
	            this.concreteTypes();
	            break;
	        case 70:
	        case 74:
	        case 122:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1570;
	            this.constructedTypes();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	uniqueClause() {
	    let localctx = new UniqueClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 380, Express_simpleParser.RULE_uniqueClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1573;
	        this.match(Express_simpleParser.UNIQUE);
	        this.state = 1574;
	        this.uniqueRule();
	        this.state = 1575;
	        this.match(Express_simpleParser.T__0);
	        this.state = 1581;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===123 || _la===157) {
	            this.state = 1576;
	            this.uniqueRule();
	            this.state = 1577;
	            this.match(Express_simpleParser.T__0);
	            this.state = 1583;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	uniqueRule() {
	    let localctx = new UniqueRuleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 382, Express_simpleParser.RULE_uniqueRule);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1587;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,145,this._ctx);
	        if(la_===1) {
	            this.state = 1584;
	            this.ruleLabelId();
	            this.state = 1585;
	            this.match(Express_simpleParser.T__8);

	        }
	        this.state = 1589;
	        this.referencedAttribute();
	        this.state = 1594;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===3) {
	            this.state = 1590;
	            this.match(Express_simpleParser.T__2);
	            this.state = 1591;
	            this.referencedAttribute();
	            this.state = 1596;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	untilControl() {
	    let localctx = new UntilControlContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 384, Express_simpleParser.RULE_untilControl);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1597;
	        this.match(Express_simpleParser.UNTIL);
	        this.state = 1598;
	        this.logicalExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	useClause() {
	    let localctx = new UseClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 386, Express_simpleParser.RULE_useClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1600;
	        this.match(Express_simpleParser.USE);
	        this.state = 1601;
	        this.match(Express_simpleParser.FROM);
	        this.state = 1602;
	        this.schemaRef();
	        this.state = 1614;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===2) {
	            this.state = 1603;
	            this.match(Express_simpleParser.T__1);
	            this.state = 1604;
	            this.namedTypeOrRename();
	            this.state = 1609;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===3) {
	                this.state = 1605;
	                this.match(Express_simpleParser.T__2);
	                this.state = 1606;
	                this.namedTypeOrRename();
	                this.state = 1611;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1612;
	            this.match(Express_simpleParser.T__3);
	        }

	        this.state = 1616;
	        this.match(Express_simpleParser.T__0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableId() {
	    let localctx = new VariableIdContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 388, Express_simpleParser.RULE_variableId);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1618;
	        this.match(Express_simpleParser.SimpleId);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	whereClause() {
	    let localctx = new WhereClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 390, Express_simpleParser.RULE_whereClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1620;
	        this.match(Express_simpleParser.WHERE);
	        this.state = 1621;
	        this.domainRule();
	        this.state = 1622;
	        this.match(Express_simpleParser.T__0);
	        this.state = 1628;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & 2105572) !== 0) || ((((_la - 43)) & ~0x1f) == 0 && ((1 << (_la - 43)) & 1613792773) !== 0) || ((((_la - 75)) & ~0x1f) == 0 && ((1 << (_la - 75)) & 896828169) !== 0) || ((((_la - 110)) & ~0x1f) == 0 && ((1 << (_la - 110)) & 2491785733) !== 0) || ((((_la - 144)) & ~0x1f) == 0 && ((1 << (_la - 144)) & 32271) !== 0)) {
	            this.state = 1623;
	            this.domainRule();
	            this.state = 1624;
	            this.match(Express_simpleParser.T__0);
	            this.state = 1630;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	whileControl() {
	    let localctx = new WhileControlContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 392, Express_simpleParser.RULE_whileControl);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1631;
	        this.match(Express_simpleParser.WHILE);
	        this.state = 1632;
	        this.logicalExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	width() {
	    let localctx = new WidthContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 394, Express_simpleParser.RULE_width);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1634;
	        this.numericExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	widthSpec() {
	    let localctx = new WidthSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 396, Express_simpleParser.RULE_widthSpec);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1636;
	        this.match(Express_simpleParser.T__1);
	        this.state = 1637;
	        this.width();
	        this.state = 1638;
	        this.match(Express_simpleParser.T__3);
	        this.state = 1640;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===76) {
	            this.state = 1639;
	            this.match(Express_simpleParser.FIXED);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

Express_simpleParser.EOF = antlr4.Token.EOF;
Express_simpleParser.T__0 = 1;
Express_simpleParser.T__1 = 2;
Express_simpleParser.T__2 = 3;
Express_simpleParser.T__3 = 4;
Express_simpleParser.T__4 = 5;
Express_simpleParser.T__5 = 6;
Express_simpleParser.T__6 = 7;
Express_simpleParser.T__7 = 8;
Express_simpleParser.T__8 = 9;
Express_simpleParser.T__9 = 10;
Express_simpleParser.T__10 = 11;
Express_simpleParser.T__11 = 12;
Express_simpleParser.T__12 = 13;
Express_simpleParser.T__13 = 14;
Express_simpleParser.T__14 = 15;
Express_simpleParser.T__15 = 16;
Express_simpleParser.T__16 = 17;
Express_simpleParser.T__17 = 18;
Express_simpleParser.T__18 = 19;
Express_simpleParser.T__19 = 20;
Express_simpleParser.T__20 = 21;
Express_simpleParser.T__21 = 22;
Express_simpleParser.T__22 = 23;
Express_simpleParser.T__23 = 24;
Express_simpleParser.T__24 = 25;
Express_simpleParser.T__25 = 26;
Express_simpleParser.T__26 = 27;
Express_simpleParser.T__27 = 28;
Express_simpleParser.T__28 = 29;
Express_simpleParser.T__29 = 30;
Express_simpleParser.T__30 = 31;
Express_simpleParser.T__31 = 32;
Express_simpleParser.T__32 = 33;
Express_simpleParser.T__33 = 34;
Express_simpleParser.T__34 = 35;
Express_simpleParser.T__35 = 36;
Express_simpleParser.T__36 = 37;
Express_simpleParser.T__37 = 38;
Express_simpleParser.T__38 = 39;
Express_simpleParser.T__39 = 40;
Express_simpleParser.T__40 = 41;
Express_simpleParser.T__41 = 42;
Express_simpleParser.ABS = 43;
Express_simpleParser.ABSTRACT = 44;
Express_simpleParser.ACOS = 45;
Express_simpleParser.AGGREGATE = 46;
Express_simpleParser.ALIAS = 47;
Express_simpleParser.AND = 48;
Express_simpleParser.ANDOR = 49;
Express_simpleParser.ARRAY = 50;
Express_simpleParser.AS = 51;
Express_simpleParser.ASIN = 52;
Express_simpleParser.ATAN = 53;
Express_simpleParser.BAG = 54;
Express_simpleParser.BASED_ON = 55;
Express_simpleParser.BEGIN_ = 56;
Express_simpleParser.BINARY = 57;
Express_simpleParser.BLENGTH = 58;
Express_simpleParser.BOOLEAN = 59;
Express_simpleParser.BY = 60;
Express_simpleParser.CASE = 61;
Express_simpleParser.CONSTANT = 62;
Express_simpleParser.CONST_E = 63;
Express_simpleParser.COS = 64;
Express_simpleParser.DERIVE = 65;
Express_simpleParser.DIV = 66;
Express_simpleParser.ELSE = 67;
Express_simpleParser.END_ = 68;
Express_simpleParser.ENTITY = 69;
Express_simpleParser.ENUMERATION = 70;
Express_simpleParser.ESCAPE = 71;
Express_simpleParser.EXISTS = 72;
Express_simpleParser.EXP = 73;
Express_simpleParser.EXTENSIBLE = 74;
Express_simpleParser.FALSE = 75;
Express_simpleParser.FIXED = 76;
Express_simpleParser.FOR = 77;
Express_simpleParser.FORMAT = 78;
Express_simpleParser.FROM = 79;
Express_simpleParser.FUNCTION = 80;
Express_simpleParser.GENERIC = 81;
Express_simpleParser.GENERIC_ENTITY = 82;
Express_simpleParser.HIBOUND = 83;
Express_simpleParser.HIINDEX = 84;
Express_simpleParser.IF = 85;
Express_simpleParser.IN = 86;
Express_simpleParser.INSERT = 87;
Express_simpleParser.INTEGER = 88;
Express_simpleParser.INVERSE = 89;
Express_simpleParser.LENGTH = 90;
Express_simpleParser.LIKE = 91;
Express_simpleParser.LIST = 92;
Express_simpleParser.LOBOUND = 93;
Express_simpleParser.LOCAL = 94;
Express_simpleParser.LOG = 95;
Express_simpleParser.LOG10 = 96;
Express_simpleParser.LOG2 = 97;
Express_simpleParser.LOGICAL = 98;
Express_simpleParser.LOINDEX = 99;
Express_simpleParser.MOD = 100;
Express_simpleParser.NOT = 101;
Express_simpleParser.NUMBER = 102;
Express_simpleParser.NVL = 103;
Express_simpleParser.ODD = 104;
Express_simpleParser.OF = 105;
Express_simpleParser.ONEOF = 106;
Express_simpleParser.OPTIONAL = 107;
Express_simpleParser.OR = 108;
Express_simpleParser.OTHERWISE = 109;
Express_simpleParser.PI = 110;
Express_simpleParser.PROCEDURE = 111;
Express_simpleParser.QUERY = 112;
Express_simpleParser.REAL = 113;
Express_simpleParser.REFERENCE = 114;
Express_simpleParser.REMOVE = 115;
Express_simpleParser.RENAMED = 116;
Express_simpleParser.REPEAT = 117;
Express_simpleParser.RETURN = 118;
Express_simpleParser.ROLESOF = 119;
Express_simpleParser.RULE = 120;
Express_simpleParser.SCHEMA = 121;
Express_simpleParser.SELECT = 122;
Express_simpleParser.SELF = 123;
Express_simpleParser.SET = 124;
Express_simpleParser.SIN = 125;
Express_simpleParser.SIZEOF = 126;
Express_simpleParser.SKIP_ = 127;
Express_simpleParser.SQRT = 128;
Express_simpleParser.STRING = 129;
Express_simpleParser.SUBTYPE = 130;
Express_simpleParser.SUBTYPE_CONSTRAINT = 131;
Express_simpleParser.SUPERTYPE = 132;
Express_simpleParser.TAN = 133;
Express_simpleParser.THEN = 134;
Express_simpleParser.TO = 135;
Express_simpleParser.TRUE = 136;
Express_simpleParser.TYPE = 137;
Express_simpleParser.TYPEOF = 138;
Express_simpleParser.TOTAL_OVER = 139;
Express_simpleParser.UNIQUE = 140;
Express_simpleParser.UNKNOWN = 141;
Express_simpleParser.UNTIL = 142;
Express_simpleParser.USE = 143;
Express_simpleParser.USEDIN = 144;
Express_simpleParser.VALUE_ = 145;
Express_simpleParser.VALUE_IN = 146;
Express_simpleParser.VALUE_UNIQUE = 147;
Express_simpleParser.VAR = 148;
Express_simpleParser.WITH = 149;
Express_simpleParser.WHERE = 150;
Express_simpleParser.WHILE = 151;
Express_simpleParser.XOR = 152;
Express_simpleParser.BinaryLiteral = 153;
Express_simpleParser.EncodedStringLiteral = 154;
Express_simpleParser.IntegerLiteral = 155;
Express_simpleParser.RealLiteral = 156;
Express_simpleParser.SimpleId = 157;
Express_simpleParser.SimpleStringLiteral = 158;
Express_simpleParser.EmbeddedRemark = 159;
Express_simpleParser.TailRemark = 160;
Express_simpleParser.Whitespace = 161;

Express_simpleParser.RULE_attributeRef = 0;
Express_simpleParser.RULE_constantRef = 1;
Express_simpleParser.RULE_entityRef = 2;
Express_simpleParser.RULE_enumerationRef = 3;
Express_simpleParser.RULE_functionRef = 4;
Express_simpleParser.RULE_parameterRef = 5;
Express_simpleParser.RULE_procedureRef = 6;
Express_simpleParser.RULE_ruleLabelRef = 7;
Express_simpleParser.RULE_ruleRef = 8;
Express_simpleParser.RULE_schemaRef = 9;
Express_simpleParser.RULE_subtypeConstraintRef = 10;
Express_simpleParser.RULE_typeLabelRef = 11;
Express_simpleParser.RULE_typeRef = 12;
Express_simpleParser.RULE_variableRef = 13;
Express_simpleParser.RULE_abstractEntityDeclaration = 14;
Express_simpleParser.RULE_abstractSupertype = 15;
Express_simpleParser.RULE_abstractSupertypeDeclaration = 16;
Express_simpleParser.RULE_actualParameterList = 17;
Express_simpleParser.RULE_addLikeOp = 18;
Express_simpleParser.RULE_aggregateInitializer = 19;
Express_simpleParser.RULE_aggregateSource = 20;
Express_simpleParser.RULE_aggregateType = 21;
Express_simpleParser.RULE_aggregationTypes = 22;
Express_simpleParser.RULE_algorithmHead = 23;
Express_simpleParser.RULE_aliasStmt = 24;
Express_simpleParser.RULE_arrayType = 25;
Express_simpleParser.RULE_assignmentStmt = 26;
Express_simpleParser.RULE_attributeDecl = 27;
Express_simpleParser.RULE_attributeId = 28;
Express_simpleParser.RULE_attributeQualifier = 29;
Express_simpleParser.RULE_bagType = 30;
Express_simpleParser.RULE_binaryType = 31;
Express_simpleParser.RULE_booleanType = 32;
Express_simpleParser.RULE_bound1 = 33;
Express_simpleParser.RULE_bound2 = 34;
Express_simpleParser.RULE_boundSpec = 35;
Express_simpleParser.RULE_builtInConstant = 36;
Express_simpleParser.RULE_builtInFunction = 37;
Express_simpleParser.RULE_builtInProcedure = 38;
Express_simpleParser.RULE_caseAction = 39;
Express_simpleParser.RULE_caseLabel = 40;
Express_simpleParser.RULE_caseStmt = 41;
Express_simpleParser.RULE_compoundStmt = 42;
Express_simpleParser.RULE_concreteTypes = 43;
Express_simpleParser.RULE_constantBody = 44;
Express_simpleParser.RULE_constantDecl = 45;
Express_simpleParser.RULE_constantFactor = 46;
Express_simpleParser.RULE_constantId = 47;
Express_simpleParser.RULE_constructedTypes = 48;
Express_simpleParser.RULE_declaration = 49;
Express_simpleParser.RULE_derivedAttr = 50;
Express_simpleParser.RULE_deriveClause = 51;
Express_simpleParser.RULE_domainRule = 52;
Express_simpleParser.RULE_element = 53;
Express_simpleParser.RULE_entityBody = 54;
Express_simpleParser.RULE_entityConstructor = 55;
Express_simpleParser.RULE_entityDecl = 56;
Express_simpleParser.RULE_entityHead = 57;
Express_simpleParser.RULE_entityId = 58;
Express_simpleParser.RULE_enumerationExtension = 59;
Express_simpleParser.RULE_enumerationId = 60;
Express_simpleParser.RULE_enumerationItems = 61;
Express_simpleParser.RULE_enumerationItem = 62;
Express_simpleParser.RULE_enumerationReference = 63;
Express_simpleParser.RULE_enumerationType = 64;
Express_simpleParser.RULE_escapeStmt = 65;
Express_simpleParser.RULE_explicitAttr = 66;
Express_simpleParser.RULE_expression = 67;
Express_simpleParser.RULE_factor = 68;
Express_simpleParser.RULE_formalParameter = 69;
Express_simpleParser.RULE_functionCall = 70;
Express_simpleParser.RULE_functionDecl = 71;
Express_simpleParser.RULE_functionHead = 72;
Express_simpleParser.RULE_functionId = 73;
Express_simpleParser.RULE_generalizedTypes = 74;
Express_simpleParser.RULE_generalAggregationTypes = 75;
Express_simpleParser.RULE_generalArrayType = 76;
Express_simpleParser.RULE_generalBagType = 77;
Express_simpleParser.RULE_generalListType = 78;
Express_simpleParser.RULE_generalRef = 79;
Express_simpleParser.RULE_generalSetType = 80;
Express_simpleParser.RULE_genericEntityType = 81;
Express_simpleParser.RULE_genericType = 82;
Express_simpleParser.RULE_groupQualifier = 83;
Express_simpleParser.RULE_ifStmt = 84;
Express_simpleParser.RULE_ifStmtStatements = 85;
Express_simpleParser.RULE_ifStmtElseStatements = 86;
Express_simpleParser.RULE_increment = 87;
Express_simpleParser.RULE_incrementControl = 88;
Express_simpleParser.RULE_index = 89;
Express_simpleParser.RULE_index1 = 90;
Express_simpleParser.RULE_index2 = 91;
Express_simpleParser.RULE_indexQualifier = 92;
Express_simpleParser.RULE_instantiableType = 93;
Express_simpleParser.RULE_integerType = 94;
Express_simpleParser.RULE_interfaceSpecification = 95;
Express_simpleParser.RULE_interval = 96;
Express_simpleParser.RULE_intervalHigh = 97;
Express_simpleParser.RULE_intervalItem = 98;
Express_simpleParser.RULE_intervalLow = 99;
Express_simpleParser.RULE_intervalOp = 100;
Express_simpleParser.RULE_inverseAttr = 101;
Express_simpleParser.RULE_inverseAttrType = 102;
Express_simpleParser.RULE_inverseClause = 103;
Express_simpleParser.RULE_listType = 104;
Express_simpleParser.RULE_literal = 105;
Express_simpleParser.RULE_localDecl = 106;
Express_simpleParser.RULE_localVariable = 107;
Express_simpleParser.RULE_logicalExpression = 108;
Express_simpleParser.RULE_logicalLiteral = 109;
Express_simpleParser.RULE_logicalType = 110;
Express_simpleParser.RULE_multiplicationLikeOp = 111;
Express_simpleParser.RULE_namedTypes = 112;
Express_simpleParser.RULE_namedTypeOrRename = 113;
Express_simpleParser.RULE_nullStmt = 114;
Express_simpleParser.RULE_numberType = 115;
Express_simpleParser.RULE_numericExpression = 116;
Express_simpleParser.RULE_oneOf = 117;
Express_simpleParser.RULE_parameter = 118;
Express_simpleParser.RULE_parameterId = 119;
Express_simpleParser.RULE_parameterType = 120;
Express_simpleParser.RULE_population = 121;
Express_simpleParser.RULE_precisionSpec = 122;
Express_simpleParser.RULE_primary = 123;
Express_simpleParser.RULE_procedureCallStmt = 124;
Express_simpleParser.RULE_procedureDecl = 125;
Express_simpleParser.RULE_procedureHead = 126;
Express_simpleParser.RULE_procedureHeadParameter = 127;
Express_simpleParser.RULE_procedureId = 128;
Express_simpleParser.RULE_qualifiableFactor = 129;
Express_simpleParser.RULE_qualifiedAttribute = 130;
Express_simpleParser.RULE_qualifier = 131;
Express_simpleParser.RULE_queryExpression = 132;
Express_simpleParser.RULE_realType = 133;
Express_simpleParser.RULE_redeclaredAttribute = 134;
Express_simpleParser.RULE_referencedAttribute = 135;
Express_simpleParser.RULE_referenceClause = 136;
Express_simpleParser.RULE_relOp = 137;
Express_simpleParser.RULE_relOpExtended = 138;
Express_simpleParser.RULE_renameId = 139;
Express_simpleParser.RULE_repeatControl = 140;
Express_simpleParser.RULE_repeatStmt = 141;
Express_simpleParser.RULE_repetition = 142;
Express_simpleParser.RULE_resourceOrRename = 143;
Express_simpleParser.RULE_resourceRef = 144;
Express_simpleParser.RULE_returnStmt = 145;
Express_simpleParser.RULE_ruleDecl = 146;
Express_simpleParser.RULE_ruleHead = 147;
Express_simpleParser.RULE_ruleId = 148;
Express_simpleParser.RULE_ruleLabelId = 149;
Express_simpleParser.RULE_schemaBody = 150;
Express_simpleParser.RULE_schemaBodyDeclaration = 151;
Express_simpleParser.RULE_schemaDecl = 152;
Express_simpleParser.RULE_schemaId = 153;
Express_simpleParser.RULE_schemaVersionId = 154;
Express_simpleParser.RULE_selector = 155;
Express_simpleParser.RULE_selectExtension = 156;
Express_simpleParser.RULE_selectList = 157;
Express_simpleParser.RULE_selectType = 158;
Express_simpleParser.RULE_setType = 159;
Express_simpleParser.RULE_simpleExpression = 160;
Express_simpleParser.RULE_simpleFactor = 161;
Express_simpleParser.RULE_simpleFactorExpression = 162;
Express_simpleParser.RULE_simpleFactorUnaryExpression = 163;
Express_simpleParser.RULE_simpleTypes = 164;
Express_simpleParser.RULE_skipStmt = 165;
Express_simpleParser.RULE_stmt = 166;
Express_simpleParser.RULE_stringLiteral = 167;
Express_simpleParser.RULE_stringType = 168;
Express_simpleParser.RULE_subsuper = 169;
Express_simpleParser.RULE_subtypeConstraint = 170;
Express_simpleParser.RULE_subtypeConstraintBody = 171;
Express_simpleParser.RULE_subtypeConstraintDecl = 172;
Express_simpleParser.RULE_subtypeConstraintHead = 173;
Express_simpleParser.RULE_subtypeConstraintId = 174;
Express_simpleParser.RULE_subtypeDeclaration = 175;
Express_simpleParser.RULE_supertypeConstraint = 176;
Express_simpleParser.RULE_supertypeExpression = 177;
Express_simpleParser.RULE_supertypeFactor = 178;
Express_simpleParser.RULE_supertypeRule = 179;
Express_simpleParser.RULE_supertypeTerm = 180;
Express_simpleParser.RULE_syntax = 181;
Express_simpleParser.RULE_term = 182;
Express_simpleParser.RULE_totalOver = 183;
Express_simpleParser.RULE_typeDecl = 184;
Express_simpleParser.RULE_typeId = 185;
Express_simpleParser.RULE_typeLabel = 186;
Express_simpleParser.RULE_typeLabelId = 187;
Express_simpleParser.RULE_unaryOp = 188;
Express_simpleParser.RULE_underlyingType = 189;
Express_simpleParser.RULE_uniqueClause = 190;
Express_simpleParser.RULE_uniqueRule = 191;
Express_simpleParser.RULE_untilControl = 192;
Express_simpleParser.RULE_useClause = 193;
Express_simpleParser.RULE_variableId = 194;
Express_simpleParser.RULE_whereClause = 195;
Express_simpleParser.RULE_whileControl = 196;
Express_simpleParser.RULE_width = 197;
Express_simpleParser.RULE_widthSpec = 198;

class AttributeRefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_attributeRef;
    }

	attributeId() {
	    return this.getTypedRuleContext(AttributeIdContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterAttributeRef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitAttributeRef(this);
		}
	}


}



class ConstantRefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_constantRef;
    }

	constantId() {
	    return this.getTypedRuleContext(ConstantIdContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterConstantRef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitConstantRef(this);
		}
	}


}



class EntityRefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_entityRef;
    }

	entityId() {
	    return this.getTypedRuleContext(EntityIdContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterEntityRef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitEntityRef(this);
		}
	}


}



class EnumerationRefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_enumerationRef;
    }

	enumerationId() {
	    return this.getTypedRuleContext(EnumerationIdContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterEnumerationRef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitEnumerationRef(this);
		}
	}


}



class FunctionRefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_functionRef;
    }

	functionId() {
	    return this.getTypedRuleContext(FunctionIdContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterFunctionRef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitFunctionRef(this);
		}
	}


}



class ParameterRefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_parameterRef;
    }

	parameterId() {
	    return this.getTypedRuleContext(ParameterIdContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterParameterRef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitParameterRef(this);
		}
	}


}



class ProcedureRefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_procedureRef;
    }

	procedureId() {
	    return this.getTypedRuleContext(ProcedureIdContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterProcedureRef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitProcedureRef(this);
		}
	}


}



class RuleLabelRefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_ruleLabelRef;
    }

	ruleLabelId() {
	    return this.getTypedRuleContext(RuleLabelIdContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterRuleLabelRef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitRuleLabelRef(this);
		}
	}


}



class RuleRefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_ruleRef;
    }

	ruleId() {
	    return this.getTypedRuleContext(RuleIdContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterRuleRef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitRuleRef(this);
		}
	}


}



class SchemaRefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_schemaRef;
    }

	schemaId() {
	    return this.getTypedRuleContext(SchemaIdContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterSchemaRef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitSchemaRef(this);
		}
	}


}



class SubtypeConstraintRefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_subtypeConstraintRef;
    }

	subtypeConstraintId() {
	    return this.getTypedRuleContext(SubtypeConstraintIdContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterSubtypeConstraintRef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitSubtypeConstraintRef(this);
		}
	}


}



class TypeLabelRefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_typeLabelRef;
    }

	typeLabelId() {
	    return this.getTypedRuleContext(TypeLabelIdContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterTypeLabelRef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitTypeLabelRef(this);
		}
	}


}



class TypeRefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_typeRef;
    }

	typeId() {
	    return this.getTypedRuleContext(TypeIdContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterTypeRef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitTypeRef(this);
		}
	}


}



class VariableRefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_variableRef;
    }

	variableId() {
	    return this.getTypedRuleContext(VariableIdContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterVariableRef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitVariableRef(this);
		}
	}


}



class AbstractEntityDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_abstractEntityDeclaration;
    }

	ABSTRACT() {
	    return this.getToken(Express_simpleParser.ABSTRACT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterAbstractEntityDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitAbstractEntityDeclaration(this);
		}
	}


}



class AbstractSupertypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_abstractSupertype;
    }

	ABSTRACT() {
	    return this.getToken(Express_simpleParser.ABSTRACT, 0);
	};

	SUPERTYPE() {
	    return this.getToken(Express_simpleParser.SUPERTYPE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterAbstractSupertype(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitAbstractSupertype(this);
		}
	}


}



class AbstractSupertypeDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_abstractSupertypeDeclaration;
    }

	ABSTRACT() {
	    return this.getToken(Express_simpleParser.ABSTRACT, 0);
	};

	SUPERTYPE() {
	    return this.getToken(Express_simpleParser.SUPERTYPE, 0);
	};

	subtypeConstraint() {
	    return this.getTypedRuleContext(SubtypeConstraintContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterAbstractSupertypeDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitAbstractSupertypeDeclaration(this);
		}
	}


}



class ActualParameterListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_actualParameterList;
    }

	parameter = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ParameterContext);
	    } else {
	        return this.getTypedRuleContext(ParameterContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterActualParameterList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitActualParameterList(this);
		}
	}


}



class AddLikeOpContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_addLikeOp;
    }

	OR() {
	    return this.getToken(Express_simpleParser.OR, 0);
	};

	XOR() {
	    return this.getToken(Express_simpleParser.XOR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterAddLikeOp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitAddLikeOp(this);
		}
	}


}



class AggregateInitializerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_aggregateInitializer;
    }

	element = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ElementContext);
	    } else {
	        return this.getTypedRuleContext(ElementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterAggregateInitializer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitAggregateInitializer(this);
		}
	}


}



class AggregateSourceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_aggregateSource;
    }

	simpleExpression() {
	    return this.getTypedRuleContext(SimpleExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterAggregateSource(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitAggregateSource(this);
		}
	}


}



class AggregateTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_aggregateType;
    }

	AGGREGATE() {
	    return this.getToken(Express_simpleParser.AGGREGATE, 0);
	};

	OF() {
	    return this.getToken(Express_simpleParser.OF, 0);
	};

	parameterType() {
	    return this.getTypedRuleContext(ParameterTypeContext,0);
	};

	typeLabel() {
	    return this.getTypedRuleContext(TypeLabelContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterAggregateType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitAggregateType(this);
		}
	}


}



class AggregationTypesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_aggregationTypes;
    }

	arrayType() {
	    return this.getTypedRuleContext(ArrayTypeContext,0);
	};

	bagType() {
	    return this.getTypedRuleContext(BagTypeContext,0);
	};

	listType() {
	    return this.getTypedRuleContext(ListTypeContext,0);
	};

	setType() {
	    return this.getTypedRuleContext(SetTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterAggregationTypes(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitAggregationTypes(this);
		}
	}


}



class AlgorithmHeadContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_algorithmHead;
    }

	declaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DeclarationContext);
	    } else {
	        return this.getTypedRuleContext(DeclarationContext,i);
	    }
	};

	constantDecl() {
	    return this.getTypedRuleContext(ConstantDeclContext,0);
	};

	localDecl() {
	    return this.getTypedRuleContext(LocalDeclContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterAlgorithmHead(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitAlgorithmHead(this);
		}
	}


}



class AliasStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_aliasStmt;
    }

	ALIAS() {
	    return this.getToken(Express_simpleParser.ALIAS, 0);
	};

	variableId() {
	    return this.getTypedRuleContext(VariableIdContext,0);
	};

	FOR() {
	    return this.getToken(Express_simpleParser.FOR, 0);
	};

	generalRef() {
	    return this.getTypedRuleContext(GeneralRefContext,0);
	};

	stmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StmtContext);
	    } else {
	        return this.getTypedRuleContext(StmtContext,i);
	    }
	};

	qualifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(QualifierContext);
	    } else {
	        return this.getTypedRuleContext(QualifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterAliasStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitAliasStmt(this);
		}
	}


}



class ArrayTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_arrayType;
    }

	ARRAY() {
	    return this.getToken(Express_simpleParser.ARRAY, 0);
	};

	boundSpec() {
	    return this.getTypedRuleContext(BoundSpecContext,0);
	};

	OF() {
	    return this.getToken(Express_simpleParser.OF, 0);
	};

	instantiableType() {
	    return this.getTypedRuleContext(InstantiableTypeContext,0);
	};

	OPTIONAL() {
	    return this.getToken(Express_simpleParser.OPTIONAL, 0);
	};

	UNIQUE() {
	    return this.getToken(Express_simpleParser.UNIQUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterArrayType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitArrayType(this);
		}
	}


}



class AssignmentStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_assignmentStmt;
    }

	generalRef() {
	    return this.getTypedRuleContext(GeneralRefContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	qualifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(QualifierContext);
	    } else {
	        return this.getTypedRuleContext(QualifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterAssignmentStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitAssignmentStmt(this);
		}
	}


}



class AttributeDeclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_attributeDecl;
    }

	attributeId() {
	    return this.getTypedRuleContext(AttributeIdContext,0);
	};

	redeclaredAttribute() {
	    return this.getTypedRuleContext(RedeclaredAttributeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterAttributeDecl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitAttributeDecl(this);
		}
	}


}



class AttributeIdContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_attributeId;
    }

	SimpleId() {
	    return this.getToken(Express_simpleParser.SimpleId, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterAttributeId(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitAttributeId(this);
		}
	}


}



class AttributeQualifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_attributeQualifier;
    }

	attributeRef() {
	    return this.getTypedRuleContext(AttributeRefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterAttributeQualifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitAttributeQualifier(this);
		}
	}


}



class BagTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_bagType;
    }

	BAG() {
	    return this.getToken(Express_simpleParser.BAG, 0);
	};

	OF() {
	    return this.getToken(Express_simpleParser.OF, 0);
	};

	instantiableType() {
	    return this.getTypedRuleContext(InstantiableTypeContext,0);
	};

	boundSpec() {
	    return this.getTypedRuleContext(BoundSpecContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterBagType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitBagType(this);
		}
	}


}



class BinaryTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_binaryType;
    }

	BINARY() {
	    return this.getToken(Express_simpleParser.BINARY, 0);
	};

	widthSpec() {
	    return this.getTypedRuleContext(WidthSpecContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterBinaryType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitBinaryType(this);
		}
	}


}



class BooleanTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_booleanType;
    }

	BOOLEAN() {
	    return this.getToken(Express_simpleParser.BOOLEAN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterBooleanType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitBooleanType(this);
		}
	}


}



class Bound1Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_bound1;
    }

	numericExpression() {
	    return this.getTypedRuleContext(NumericExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterBound1(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitBound1(this);
		}
	}


}



class Bound2Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_bound2;
    }

	numericExpression() {
	    return this.getTypedRuleContext(NumericExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterBound2(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitBound2(this);
		}
	}


}



class BoundSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_boundSpec;
    }

	bound1() {
	    return this.getTypedRuleContext(Bound1Context,0);
	};

	bound2() {
	    return this.getTypedRuleContext(Bound2Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterBoundSpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitBoundSpec(this);
		}
	}


}



class BuiltInConstantContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_builtInConstant;
    }

	CONST_E() {
	    return this.getToken(Express_simpleParser.CONST_E, 0);
	};

	PI() {
	    return this.getToken(Express_simpleParser.PI, 0);
	};

	SELF() {
	    return this.getToken(Express_simpleParser.SELF, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterBuiltInConstant(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitBuiltInConstant(this);
		}
	}


}



class BuiltInFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_builtInFunction;
    }

	ABS() {
	    return this.getToken(Express_simpleParser.ABS, 0);
	};

	ACOS() {
	    return this.getToken(Express_simpleParser.ACOS, 0);
	};

	ASIN() {
	    return this.getToken(Express_simpleParser.ASIN, 0);
	};

	ATAN() {
	    return this.getToken(Express_simpleParser.ATAN, 0);
	};

	BLENGTH() {
	    return this.getToken(Express_simpleParser.BLENGTH, 0);
	};

	COS() {
	    return this.getToken(Express_simpleParser.COS, 0);
	};

	EXISTS() {
	    return this.getToken(Express_simpleParser.EXISTS, 0);
	};

	EXP() {
	    return this.getToken(Express_simpleParser.EXP, 0);
	};

	FORMAT() {
	    return this.getToken(Express_simpleParser.FORMAT, 0);
	};

	HIBOUND() {
	    return this.getToken(Express_simpleParser.HIBOUND, 0);
	};

	HIINDEX() {
	    return this.getToken(Express_simpleParser.HIINDEX, 0);
	};

	LENGTH() {
	    return this.getToken(Express_simpleParser.LENGTH, 0);
	};

	LOBOUND() {
	    return this.getToken(Express_simpleParser.LOBOUND, 0);
	};

	LOINDEX() {
	    return this.getToken(Express_simpleParser.LOINDEX, 0);
	};

	LOG() {
	    return this.getToken(Express_simpleParser.LOG, 0);
	};

	LOG2() {
	    return this.getToken(Express_simpleParser.LOG2, 0);
	};

	LOG10() {
	    return this.getToken(Express_simpleParser.LOG10, 0);
	};

	NVL() {
	    return this.getToken(Express_simpleParser.NVL, 0);
	};

	ODD() {
	    return this.getToken(Express_simpleParser.ODD, 0);
	};

	ROLESOF() {
	    return this.getToken(Express_simpleParser.ROLESOF, 0);
	};

	SIN() {
	    return this.getToken(Express_simpleParser.SIN, 0);
	};

	SIZEOF() {
	    return this.getToken(Express_simpleParser.SIZEOF, 0);
	};

	SQRT() {
	    return this.getToken(Express_simpleParser.SQRT, 0);
	};

	TAN() {
	    return this.getToken(Express_simpleParser.TAN, 0);
	};

	TYPEOF() {
	    return this.getToken(Express_simpleParser.TYPEOF, 0);
	};

	USEDIN() {
	    return this.getToken(Express_simpleParser.USEDIN, 0);
	};

	VALUE_() {
	    return this.getToken(Express_simpleParser.VALUE_, 0);
	};

	VALUE_IN() {
	    return this.getToken(Express_simpleParser.VALUE_IN, 0);
	};

	VALUE_UNIQUE() {
	    return this.getToken(Express_simpleParser.VALUE_UNIQUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterBuiltInFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitBuiltInFunction(this);
		}
	}


}



class BuiltInProcedureContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_builtInProcedure;
    }

	INSERT() {
	    return this.getToken(Express_simpleParser.INSERT, 0);
	};

	REMOVE() {
	    return this.getToken(Express_simpleParser.REMOVE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterBuiltInProcedure(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitBuiltInProcedure(this);
		}
	}


}



class CaseActionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_caseAction;
    }

	caseLabel = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CaseLabelContext);
	    } else {
	        return this.getTypedRuleContext(CaseLabelContext,i);
	    }
	};

	stmt() {
	    return this.getTypedRuleContext(StmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterCaseAction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitCaseAction(this);
		}
	}


}



class CaseLabelContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_caseLabel;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterCaseLabel(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitCaseLabel(this);
		}
	}


}



class CaseStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_caseStmt;
    }

	CASE() {
	    return this.getToken(Express_simpleParser.CASE, 0);
	};

	selector() {
	    return this.getTypedRuleContext(SelectorContext,0);
	};

	OF() {
	    return this.getToken(Express_simpleParser.OF, 0);
	};

	caseAction = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CaseActionContext);
	    } else {
	        return this.getTypedRuleContext(CaseActionContext,i);
	    }
	};

	OTHERWISE() {
	    return this.getToken(Express_simpleParser.OTHERWISE, 0);
	};

	stmt() {
	    return this.getTypedRuleContext(StmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterCaseStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitCaseStmt(this);
		}
	}


}



class CompoundStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_compoundStmt;
    }

	BEGIN_() {
	    return this.getToken(Express_simpleParser.BEGIN_, 0);
	};

	stmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StmtContext);
	    } else {
	        return this.getTypedRuleContext(StmtContext,i);
	    }
	};

	END_() {
	    return this.getToken(Express_simpleParser.END_, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterCompoundStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitCompoundStmt(this);
		}
	}


}



class ConcreteTypesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_concreteTypes;
    }

	aggregationTypes() {
	    return this.getTypedRuleContext(AggregationTypesContext,0);
	};

	simpleTypes() {
	    return this.getTypedRuleContext(SimpleTypesContext,0);
	};

	typeRef() {
	    return this.getTypedRuleContext(TypeRefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterConcreteTypes(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitConcreteTypes(this);
		}
	}


}



class ConstantBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_constantBody;
    }

	constantId() {
	    return this.getTypedRuleContext(ConstantIdContext,0);
	};

	instantiableType() {
	    return this.getTypedRuleContext(InstantiableTypeContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterConstantBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitConstantBody(this);
		}
	}


}



class ConstantDeclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_constantDecl;
    }

	CONSTANT() {
	    return this.getToken(Express_simpleParser.CONSTANT, 0);
	};

	constantBody = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConstantBodyContext);
	    } else {
	        return this.getTypedRuleContext(ConstantBodyContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterConstantDecl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitConstantDecl(this);
		}
	}


}



class ConstantFactorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_constantFactor;
    }

	builtInConstant() {
	    return this.getTypedRuleContext(BuiltInConstantContext,0);
	};

	constantRef() {
	    return this.getTypedRuleContext(ConstantRefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterConstantFactor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitConstantFactor(this);
		}
	}


}



class ConstantIdContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_constantId;
    }

	SimpleId() {
	    return this.getToken(Express_simpleParser.SimpleId, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterConstantId(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitConstantId(this);
		}
	}


}



class ConstructedTypesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_constructedTypes;
    }

	enumerationType() {
	    return this.getTypedRuleContext(EnumerationTypeContext,0);
	};

	selectType() {
	    return this.getTypedRuleContext(SelectTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterConstructedTypes(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitConstructedTypes(this);
		}
	}


}



class DeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_declaration;
    }

	entityDecl() {
	    return this.getTypedRuleContext(EntityDeclContext,0);
	};

	functionDecl() {
	    return this.getTypedRuleContext(FunctionDeclContext,0);
	};

	procedureDecl() {
	    return this.getTypedRuleContext(ProcedureDeclContext,0);
	};

	subtypeConstraintDecl() {
	    return this.getTypedRuleContext(SubtypeConstraintDeclContext,0);
	};

	typeDecl() {
	    return this.getTypedRuleContext(TypeDeclContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitDeclaration(this);
		}
	}


}



class DerivedAttrContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_derivedAttr;
    }

	attributeDecl() {
	    return this.getTypedRuleContext(AttributeDeclContext,0);
	};

	parameterType() {
	    return this.getTypedRuleContext(ParameterTypeContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterDerivedAttr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitDerivedAttr(this);
		}
	}


}



class DeriveClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_deriveClause;
    }

	DERIVE() {
	    return this.getToken(Express_simpleParser.DERIVE, 0);
	};

	derivedAttr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DerivedAttrContext);
	    } else {
	        return this.getTypedRuleContext(DerivedAttrContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterDeriveClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitDeriveClause(this);
		}
	}


}



class DomainRuleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_domainRule;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ruleLabelId() {
	    return this.getTypedRuleContext(RuleLabelIdContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterDomainRule(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitDomainRule(this);
		}
	}


}



class ElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_element;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	repetition() {
	    return this.getTypedRuleContext(RepetitionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitElement(this);
		}
	}


}



class EntityBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_entityBody;
    }

	explicitAttr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExplicitAttrContext);
	    } else {
	        return this.getTypedRuleContext(ExplicitAttrContext,i);
	    }
	};

	deriveClause() {
	    return this.getTypedRuleContext(DeriveClauseContext,0);
	};

	inverseClause() {
	    return this.getTypedRuleContext(InverseClauseContext,0);
	};

	uniqueClause() {
	    return this.getTypedRuleContext(UniqueClauseContext,0);
	};

	whereClause() {
	    return this.getTypedRuleContext(WhereClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterEntityBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitEntityBody(this);
		}
	}


}



class EntityConstructorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_entityConstructor;
    }

	entityRef() {
	    return this.getTypedRuleContext(EntityRefContext,0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterEntityConstructor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitEntityConstructor(this);
		}
	}


}



class EntityDeclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_entityDecl;
    }

	entityHead() {
	    return this.getTypedRuleContext(EntityHeadContext,0);
	};

	entityBody() {
	    return this.getTypedRuleContext(EntityBodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterEntityDecl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitEntityDecl(this);
		}
	}


}



class EntityHeadContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_entityHead;
    }

	ENTITY() {
	    return this.getToken(Express_simpleParser.ENTITY, 0);
	};

	entityId() {
	    return this.getTypedRuleContext(EntityIdContext,0);
	};

	subsuper() {
	    return this.getTypedRuleContext(SubsuperContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterEntityHead(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitEntityHead(this);
		}
	}


}



class EntityIdContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_entityId;
    }

	SimpleId() {
	    return this.getToken(Express_simpleParser.SimpleId, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterEntityId(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitEntityId(this);
		}
	}


}



class EnumerationExtensionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_enumerationExtension;
    }

	BASED_ON() {
	    return this.getToken(Express_simpleParser.BASED_ON, 0);
	};

	typeRef() {
	    return this.getTypedRuleContext(TypeRefContext,0);
	};

	WITH() {
	    return this.getToken(Express_simpleParser.WITH, 0);
	};

	enumerationItems() {
	    return this.getTypedRuleContext(EnumerationItemsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterEnumerationExtension(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitEnumerationExtension(this);
		}
	}


}



class EnumerationIdContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_enumerationId;
    }

	SimpleId() {
	    return this.getToken(Express_simpleParser.SimpleId, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterEnumerationId(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitEnumerationId(this);
		}
	}


}



class EnumerationItemsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_enumerationItems;
    }

	enumerationItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EnumerationItemContext);
	    } else {
	        return this.getTypedRuleContext(EnumerationItemContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterEnumerationItems(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitEnumerationItems(this);
		}
	}


}



class EnumerationItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_enumerationItem;
    }

	enumerationId() {
	    return this.getTypedRuleContext(EnumerationIdContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterEnumerationItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitEnumerationItem(this);
		}
	}


}



class EnumerationReferenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_enumerationReference;
    }

	enumerationRef() {
	    return this.getTypedRuleContext(EnumerationRefContext,0);
	};

	typeRef() {
	    return this.getTypedRuleContext(TypeRefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterEnumerationReference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitEnumerationReference(this);
		}
	}


}



class EnumerationTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_enumerationType;
    }

	ENUMERATION() {
	    return this.getToken(Express_simpleParser.ENUMERATION, 0);
	};

	EXTENSIBLE() {
	    return this.getToken(Express_simpleParser.EXTENSIBLE, 0);
	};

	OF() {
	    return this.getToken(Express_simpleParser.OF, 0);
	};

	enumerationItems() {
	    return this.getTypedRuleContext(EnumerationItemsContext,0);
	};

	enumerationExtension() {
	    return this.getTypedRuleContext(EnumerationExtensionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterEnumerationType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitEnumerationType(this);
		}
	}


}



class EscapeStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_escapeStmt;
    }

	ESCAPE() {
	    return this.getToken(Express_simpleParser.ESCAPE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterEscapeStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitEscapeStmt(this);
		}
	}


}



class ExplicitAttrContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_explicitAttr;
    }

	attributeDecl = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AttributeDeclContext);
	    } else {
	        return this.getTypedRuleContext(AttributeDeclContext,i);
	    }
	};

	parameterType() {
	    return this.getTypedRuleContext(ParameterTypeContext,0);
	};

	OPTIONAL() {
	    return this.getToken(Express_simpleParser.OPTIONAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterExplicitAttr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitExplicitAttr(this);
		}
	}


}



class ExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_expression;
    }

	simpleExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SimpleExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SimpleExpressionContext,i);
	    }
	};

	relOpExtended() {
	    return this.getTypedRuleContext(RelOpExtendedContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitExpression(this);
		}
	}


}



class FactorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_factor;
    }

	simpleFactor = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SimpleFactorContext);
	    } else {
	        return this.getTypedRuleContext(SimpleFactorContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterFactor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitFactor(this);
		}
	}


}



class FormalParameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_formalParameter;
    }

	parameterId = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ParameterIdContext);
	    } else {
	        return this.getTypedRuleContext(ParameterIdContext,i);
	    }
	};

	parameterType() {
	    return this.getTypedRuleContext(ParameterTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterFormalParameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitFormalParameter(this);
		}
	}


}



class FunctionCallContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_functionCall;
    }

	builtInFunction() {
	    return this.getTypedRuleContext(BuiltInFunctionContext,0);
	};

	functionRef() {
	    return this.getTypedRuleContext(FunctionRefContext,0);
	};

	actualParameterList() {
	    return this.getTypedRuleContext(ActualParameterListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterFunctionCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitFunctionCall(this);
		}
	}


}



class FunctionDeclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_functionDecl;
    }

	functionHead() {
	    return this.getTypedRuleContext(FunctionHeadContext,0);
	};

	algorithmHead() {
	    return this.getTypedRuleContext(AlgorithmHeadContext,0);
	};

	stmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StmtContext);
	    } else {
	        return this.getTypedRuleContext(StmtContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterFunctionDecl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitFunctionDecl(this);
		}
	}


}



class FunctionHeadContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_functionHead;
    }

	FUNCTION() {
	    return this.getToken(Express_simpleParser.FUNCTION, 0);
	};

	functionId() {
	    return this.getTypedRuleContext(FunctionIdContext,0);
	};

	parameterType() {
	    return this.getTypedRuleContext(ParameterTypeContext,0);
	};

	formalParameter = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FormalParameterContext);
	    } else {
	        return this.getTypedRuleContext(FormalParameterContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterFunctionHead(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitFunctionHead(this);
		}
	}


}



class FunctionIdContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_functionId;
    }

	SimpleId() {
	    return this.getToken(Express_simpleParser.SimpleId, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterFunctionId(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitFunctionId(this);
		}
	}


}



class GeneralizedTypesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_generalizedTypes;
    }

	aggregateType() {
	    return this.getTypedRuleContext(AggregateTypeContext,0);
	};

	generalAggregationTypes() {
	    return this.getTypedRuleContext(GeneralAggregationTypesContext,0);
	};

	genericEntityType() {
	    return this.getTypedRuleContext(GenericEntityTypeContext,0);
	};

	genericType() {
	    return this.getTypedRuleContext(GenericTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterGeneralizedTypes(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitGeneralizedTypes(this);
		}
	}


}



class GeneralAggregationTypesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_generalAggregationTypes;
    }

	generalArrayType() {
	    return this.getTypedRuleContext(GeneralArrayTypeContext,0);
	};

	generalBagType() {
	    return this.getTypedRuleContext(GeneralBagTypeContext,0);
	};

	generalListType() {
	    return this.getTypedRuleContext(GeneralListTypeContext,0);
	};

	generalSetType() {
	    return this.getTypedRuleContext(GeneralSetTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterGeneralAggregationTypes(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitGeneralAggregationTypes(this);
		}
	}


}



class GeneralArrayTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_generalArrayType;
    }

	ARRAY() {
	    return this.getToken(Express_simpleParser.ARRAY, 0);
	};

	OF() {
	    return this.getToken(Express_simpleParser.OF, 0);
	};

	parameterType() {
	    return this.getTypedRuleContext(ParameterTypeContext,0);
	};

	boundSpec() {
	    return this.getTypedRuleContext(BoundSpecContext,0);
	};

	OPTIONAL() {
	    return this.getToken(Express_simpleParser.OPTIONAL, 0);
	};

	UNIQUE() {
	    return this.getToken(Express_simpleParser.UNIQUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterGeneralArrayType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitGeneralArrayType(this);
		}
	}


}



class GeneralBagTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_generalBagType;
    }

	BAG() {
	    return this.getToken(Express_simpleParser.BAG, 0);
	};

	OF() {
	    return this.getToken(Express_simpleParser.OF, 0);
	};

	parameterType() {
	    return this.getTypedRuleContext(ParameterTypeContext,0);
	};

	boundSpec() {
	    return this.getTypedRuleContext(BoundSpecContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterGeneralBagType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitGeneralBagType(this);
		}
	}


}



class GeneralListTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_generalListType;
    }

	LIST() {
	    return this.getToken(Express_simpleParser.LIST, 0);
	};

	OF() {
	    return this.getToken(Express_simpleParser.OF, 0);
	};

	parameterType() {
	    return this.getTypedRuleContext(ParameterTypeContext,0);
	};

	boundSpec() {
	    return this.getTypedRuleContext(BoundSpecContext,0);
	};

	UNIQUE() {
	    return this.getToken(Express_simpleParser.UNIQUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterGeneralListType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitGeneralListType(this);
		}
	}


}



class GeneralRefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_generalRef;
    }

	parameterRef() {
	    return this.getTypedRuleContext(ParameterRefContext,0);
	};

	variableId() {
	    return this.getTypedRuleContext(VariableIdContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterGeneralRef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitGeneralRef(this);
		}
	}


}



class GeneralSetTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_generalSetType;
    }

	SET() {
	    return this.getToken(Express_simpleParser.SET, 0);
	};

	OF() {
	    return this.getToken(Express_simpleParser.OF, 0);
	};

	parameterType() {
	    return this.getTypedRuleContext(ParameterTypeContext,0);
	};

	boundSpec() {
	    return this.getTypedRuleContext(BoundSpecContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterGeneralSetType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitGeneralSetType(this);
		}
	}


}



class GenericEntityTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_genericEntityType;
    }

	GENERIC_ENTITY() {
	    return this.getToken(Express_simpleParser.GENERIC_ENTITY, 0);
	};

	typeLabel() {
	    return this.getTypedRuleContext(TypeLabelContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterGenericEntityType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitGenericEntityType(this);
		}
	}


}



class GenericTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_genericType;
    }

	GENERIC() {
	    return this.getToken(Express_simpleParser.GENERIC, 0);
	};

	typeLabel() {
	    return this.getTypedRuleContext(TypeLabelContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterGenericType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitGenericType(this);
		}
	}


}



class GroupQualifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_groupQualifier;
    }

	entityRef() {
	    return this.getTypedRuleContext(EntityRefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterGroupQualifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitGroupQualifier(this);
		}
	}


}



class IfStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_ifStmt;
    }

	IF() {
	    return this.getToken(Express_simpleParser.IF, 0);
	};

	logicalExpression() {
	    return this.getTypedRuleContext(LogicalExpressionContext,0);
	};

	THEN() {
	    return this.getToken(Express_simpleParser.THEN, 0);
	};

	ifStmtStatements() {
	    return this.getTypedRuleContext(IfStmtStatementsContext,0);
	};

	ELSE() {
	    return this.getToken(Express_simpleParser.ELSE, 0);
	};

	ifStmtElseStatements() {
	    return this.getTypedRuleContext(IfStmtElseStatementsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterIfStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitIfStmt(this);
		}
	}


}



class IfStmtStatementsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_ifStmtStatements;
    }

	stmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StmtContext);
	    } else {
	        return this.getTypedRuleContext(StmtContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterIfStmtStatements(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitIfStmtStatements(this);
		}
	}


}



class IfStmtElseStatementsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_ifStmtElseStatements;
    }

	stmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StmtContext);
	    } else {
	        return this.getTypedRuleContext(StmtContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterIfStmtElseStatements(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitIfStmtElseStatements(this);
		}
	}


}



class IncrementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_increment;
    }

	numericExpression() {
	    return this.getTypedRuleContext(NumericExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterIncrement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitIncrement(this);
		}
	}


}



class IncrementControlContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_incrementControl;
    }

	variableId() {
	    return this.getTypedRuleContext(VariableIdContext,0);
	};

	bound1() {
	    return this.getTypedRuleContext(Bound1Context,0);
	};

	TO() {
	    return this.getToken(Express_simpleParser.TO, 0);
	};

	bound2() {
	    return this.getTypedRuleContext(Bound2Context,0);
	};

	BY() {
	    return this.getToken(Express_simpleParser.BY, 0);
	};

	increment() {
	    return this.getTypedRuleContext(IncrementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterIncrementControl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitIncrementControl(this);
		}
	}


}



class IndexContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_index;
    }

	numericExpression() {
	    return this.getTypedRuleContext(NumericExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterIndex(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitIndex(this);
		}
	}


}



class Index1Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_index1;
    }

	index() {
	    return this.getTypedRuleContext(IndexContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterIndex1(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitIndex1(this);
		}
	}


}



class Index2Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_index2;
    }

	index() {
	    return this.getTypedRuleContext(IndexContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterIndex2(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitIndex2(this);
		}
	}


}



class IndexQualifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_indexQualifier;
    }

	index1() {
	    return this.getTypedRuleContext(Index1Context,0);
	};

	index2() {
	    return this.getTypedRuleContext(Index2Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterIndexQualifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitIndexQualifier(this);
		}
	}


}



class InstantiableTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_instantiableType;
    }

	concreteTypes() {
	    return this.getTypedRuleContext(ConcreteTypesContext,0);
	};

	entityRef() {
	    return this.getTypedRuleContext(EntityRefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterInstantiableType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitInstantiableType(this);
		}
	}


}



class IntegerTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_integerType;
    }

	INTEGER() {
	    return this.getToken(Express_simpleParser.INTEGER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterIntegerType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitIntegerType(this);
		}
	}


}



class InterfaceSpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_interfaceSpecification;
    }

	referenceClause() {
	    return this.getTypedRuleContext(ReferenceClauseContext,0);
	};

	useClause() {
	    return this.getTypedRuleContext(UseClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterInterfaceSpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitInterfaceSpecification(this);
		}
	}


}



class IntervalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_interval;
    }

	intervalLow() {
	    return this.getTypedRuleContext(IntervalLowContext,0);
	};

	intervalOp = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IntervalOpContext);
	    } else {
	        return this.getTypedRuleContext(IntervalOpContext,i);
	    }
	};

	intervalItem() {
	    return this.getTypedRuleContext(IntervalItemContext,0);
	};

	intervalHigh() {
	    return this.getTypedRuleContext(IntervalHighContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterInterval(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitInterval(this);
		}
	}


}



class IntervalHighContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_intervalHigh;
    }

	simpleExpression() {
	    return this.getTypedRuleContext(SimpleExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterIntervalHigh(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitIntervalHigh(this);
		}
	}


}



class IntervalItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_intervalItem;
    }

	simpleExpression() {
	    return this.getTypedRuleContext(SimpleExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterIntervalItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitIntervalItem(this);
		}
	}


}



class IntervalLowContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_intervalLow;
    }

	simpleExpression() {
	    return this.getTypedRuleContext(SimpleExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterIntervalLow(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitIntervalLow(this);
		}
	}


}



class IntervalOpContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_intervalOp;
    }


	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterIntervalOp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitIntervalOp(this);
		}
	}


}



class InverseAttrContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_inverseAttr;
    }

	attributeDecl() {
	    return this.getTypedRuleContext(AttributeDeclContext,0);
	};

	inverseAttrType() {
	    return this.getTypedRuleContext(InverseAttrTypeContext,0);
	};

	FOR() {
	    return this.getToken(Express_simpleParser.FOR, 0);
	};

	attributeRef() {
	    return this.getTypedRuleContext(AttributeRefContext,0);
	};

	entityRef() {
	    return this.getTypedRuleContext(EntityRefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterInverseAttr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitInverseAttr(this);
		}
	}


}



class InverseAttrTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_inverseAttrType;
    }

	entityRef() {
	    return this.getTypedRuleContext(EntityRefContext,0);
	};

	OF() {
	    return this.getToken(Express_simpleParser.OF, 0);
	};

	SET() {
	    return this.getToken(Express_simpleParser.SET, 0);
	};

	BAG() {
	    return this.getToken(Express_simpleParser.BAG, 0);
	};

	boundSpec() {
	    return this.getTypedRuleContext(BoundSpecContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterInverseAttrType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitInverseAttrType(this);
		}
	}


}



class InverseClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_inverseClause;
    }

	INVERSE() {
	    return this.getToken(Express_simpleParser.INVERSE, 0);
	};

	inverseAttr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InverseAttrContext);
	    } else {
	        return this.getTypedRuleContext(InverseAttrContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterInverseClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitInverseClause(this);
		}
	}


}



class ListTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_listType;
    }

	LIST() {
	    return this.getToken(Express_simpleParser.LIST, 0);
	};

	OF() {
	    return this.getToken(Express_simpleParser.OF, 0);
	};

	instantiableType() {
	    return this.getTypedRuleContext(InstantiableTypeContext,0);
	};

	boundSpec() {
	    return this.getTypedRuleContext(BoundSpecContext,0);
	};

	UNIQUE() {
	    return this.getToken(Express_simpleParser.UNIQUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterListType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitListType(this);
		}
	}


}



class LiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_literal;
    }

	BinaryLiteral() {
	    return this.getToken(Express_simpleParser.BinaryLiteral, 0);
	};

	IntegerLiteral() {
	    return this.getToken(Express_simpleParser.IntegerLiteral, 0);
	};

	logicalLiteral() {
	    return this.getTypedRuleContext(LogicalLiteralContext,0);
	};

	RealLiteral() {
	    return this.getToken(Express_simpleParser.RealLiteral, 0);
	};

	stringLiteral() {
	    return this.getTypedRuleContext(StringLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitLiteral(this);
		}
	}


}



class LocalDeclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_localDecl;
    }

	LOCAL() {
	    return this.getToken(Express_simpleParser.LOCAL, 0);
	};

	localVariable = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LocalVariableContext);
	    } else {
	        return this.getTypedRuleContext(LocalVariableContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterLocalDecl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitLocalDecl(this);
		}
	}


}



class LocalVariableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_localVariable;
    }

	variableId = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableIdContext);
	    } else {
	        return this.getTypedRuleContext(VariableIdContext,i);
	    }
	};

	parameterType() {
	    return this.getTypedRuleContext(ParameterTypeContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterLocalVariable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitLocalVariable(this);
		}
	}


}



class LogicalExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_logicalExpression;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterLogicalExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitLogicalExpression(this);
		}
	}


}



class LogicalLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_logicalLiteral;
    }

	FALSE() {
	    return this.getToken(Express_simpleParser.FALSE, 0);
	};

	TRUE() {
	    return this.getToken(Express_simpleParser.TRUE, 0);
	};

	UNKNOWN() {
	    return this.getToken(Express_simpleParser.UNKNOWN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterLogicalLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitLogicalLiteral(this);
		}
	}


}



class LogicalTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_logicalType;
    }

	LOGICAL() {
	    return this.getToken(Express_simpleParser.LOGICAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterLogicalType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitLogicalType(this);
		}
	}


}



class MultiplicationLikeOpContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_multiplicationLikeOp;
    }

	DIV() {
	    return this.getToken(Express_simpleParser.DIV, 0);
	};

	MOD() {
	    return this.getToken(Express_simpleParser.MOD, 0);
	};

	AND() {
	    return this.getToken(Express_simpleParser.AND, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterMultiplicationLikeOp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitMultiplicationLikeOp(this);
		}
	}


}



class NamedTypesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_namedTypes;
    }

	entityRef() {
	    return this.getTypedRuleContext(EntityRefContext,0);
	};

	typeRef() {
	    return this.getTypedRuleContext(TypeRefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterNamedTypes(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitNamedTypes(this);
		}
	}


}



class NamedTypeOrRenameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_namedTypeOrRename;
    }

	namedTypes() {
	    return this.getTypedRuleContext(NamedTypesContext,0);
	};

	AS() {
	    return this.getToken(Express_simpleParser.AS, 0);
	};

	entityId() {
	    return this.getTypedRuleContext(EntityIdContext,0);
	};

	typeId() {
	    return this.getTypedRuleContext(TypeIdContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterNamedTypeOrRename(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitNamedTypeOrRename(this);
		}
	}


}



class NullStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_nullStmt;
    }


	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterNullStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitNullStmt(this);
		}
	}


}



class NumberTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_numberType;
    }

	NUMBER() {
	    return this.getToken(Express_simpleParser.NUMBER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterNumberType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitNumberType(this);
		}
	}


}



class NumericExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_numericExpression;
    }

	simpleExpression() {
	    return this.getTypedRuleContext(SimpleExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterNumericExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitNumericExpression(this);
		}
	}


}



class OneOfContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_oneOf;
    }

	ONEOF() {
	    return this.getToken(Express_simpleParser.ONEOF, 0);
	};

	supertypeExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SupertypeExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SupertypeExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterOneOf(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitOneOf(this);
		}
	}


}



class ParameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_parameter;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterParameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitParameter(this);
		}
	}


}



class ParameterIdContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_parameterId;
    }

	SimpleId() {
	    return this.getToken(Express_simpleParser.SimpleId, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterParameterId(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitParameterId(this);
		}
	}


}



class ParameterTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_parameterType;
    }

	generalizedTypes() {
	    return this.getTypedRuleContext(GeneralizedTypesContext,0);
	};

	namedTypes() {
	    return this.getTypedRuleContext(NamedTypesContext,0);
	};

	simpleTypes() {
	    return this.getTypedRuleContext(SimpleTypesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterParameterType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitParameterType(this);
		}
	}


}



class PopulationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_population;
    }

	entityRef() {
	    return this.getTypedRuleContext(EntityRefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterPopulation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitPopulation(this);
		}
	}


}



class PrecisionSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_precisionSpec;
    }

	numericExpression() {
	    return this.getTypedRuleContext(NumericExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterPrecisionSpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitPrecisionSpec(this);
		}
	}


}



class PrimaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_primary;
    }

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	qualifiableFactor() {
	    return this.getTypedRuleContext(QualifiableFactorContext,0);
	};

	qualifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(QualifierContext);
	    } else {
	        return this.getTypedRuleContext(QualifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterPrimary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitPrimary(this);
		}
	}


}



class ProcedureCallStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_procedureCallStmt;
    }

	builtInProcedure() {
	    return this.getTypedRuleContext(BuiltInProcedureContext,0);
	};

	procedureRef() {
	    return this.getTypedRuleContext(ProcedureRefContext,0);
	};

	actualParameterList() {
	    return this.getTypedRuleContext(ActualParameterListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterProcedureCallStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitProcedureCallStmt(this);
		}
	}


}



class ProcedureDeclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_procedureDecl;
    }

	procedureHead() {
	    return this.getTypedRuleContext(ProcedureHeadContext,0);
	};

	algorithmHead() {
	    return this.getTypedRuleContext(AlgorithmHeadContext,0);
	};

	stmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StmtContext);
	    } else {
	        return this.getTypedRuleContext(StmtContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterProcedureDecl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitProcedureDecl(this);
		}
	}


}



class ProcedureHeadContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_procedureHead;
    }

	PROCEDURE() {
	    return this.getToken(Express_simpleParser.PROCEDURE, 0);
	};

	procedureId() {
	    return this.getTypedRuleContext(ProcedureIdContext,0);
	};

	procedureHeadParameter = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ProcedureHeadParameterContext);
	    } else {
	        return this.getTypedRuleContext(ProcedureHeadParameterContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterProcedureHead(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitProcedureHead(this);
		}
	}


}



class ProcedureHeadParameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_procedureHeadParameter;
    }

	formalParameter() {
	    return this.getTypedRuleContext(FormalParameterContext,0);
	};

	VAR() {
	    return this.getToken(Express_simpleParser.VAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterProcedureHeadParameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitProcedureHeadParameter(this);
		}
	}


}



class ProcedureIdContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_procedureId;
    }

	SimpleId() {
	    return this.getToken(Express_simpleParser.SimpleId, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterProcedureId(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitProcedureId(this);
		}
	}


}



class QualifiableFactorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_qualifiableFactor;
    }

	attributeRef() {
	    return this.getTypedRuleContext(AttributeRefContext,0);
	};

	constantFactor() {
	    return this.getTypedRuleContext(ConstantFactorContext,0);
	};

	functionCall() {
	    return this.getTypedRuleContext(FunctionCallContext,0);
	};

	generalRef() {
	    return this.getTypedRuleContext(GeneralRefContext,0);
	};

	population() {
	    return this.getTypedRuleContext(PopulationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterQualifiableFactor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitQualifiableFactor(this);
		}
	}


}



class QualifiedAttributeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_qualifiedAttribute;
    }

	SELF() {
	    return this.getToken(Express_simpleParser.SELF, 0);
	};

	groupQualifier() {
	    return this.getTypedRuleContext(GroupQualifierContext,0);
	};

	attributeQualifier() {
	    return this.getTypedRuleContext(AttributeQualifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterQualifiedAttribute(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitQualifiedAttribute(this);
		}
	}


}



class QualifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_qualifier;
    }

	attributeQualifier() {
	    return this.getTypedRuleContext(AttributeQualifierContext,0);
	};

	groupQualifier() {
	    return this.getTypedRuleContext(GroupQualifierContext,0);
	};

	indexQualifier() {
	    return this.getTypedRuleContext(IndexQualifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterQualifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitQualifier(this);
		}
	}


}



class QueryExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_queryExpression;
    }

	QUERY() {
	    return this.getToken(Express_simpleParser.QUERY, 0);
	};

	variableId() {
	    return this.getTypedRuleContext(VariableIdContext,0);
	};

	aggregateSource() {
	    return this.getTypedRuleContext(AggregateSourceContext,0);
	};

	logicalExpression() {
	    return this.getTypedRuleContext(LogicalExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterQueryExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitQueryExpression(this);
		}
	}


}



class RealTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_realType;
    }

	REAL() {
	    return this.getToken(Express_simpleParser.REAL, 0);
	};

	precisionSpec() {
	    return this.getTypedRuleContext(PrecisionSpecContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterRealType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitRealType(this);
		}
	}


}



class RedeclaredAttributeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_redeclaredAttribute;
    }

	qualifiedAttribute() {
	    return this.getTypedRuleContext(QualifiedAttributeContext,0);
	};

	RENAMED() {
	    return this.getToken(Express_simpleParser.RENAMED, 0);
	};

	attributeId() {
	    return this.getTypedRuleContext(AttributeIdContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterRedeclaredAttribute(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitRedeclaredAttribute(this);
		}
	}


}



class ReferencedAttributeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_referencedAttribute;
    }

	attributeRef() {
	    return this.getTypedRuleContext(AttributeRefContext,0);
	};

	qualifiedAttribute() {
	    return this.getTypedRuleContext(QualifiedAttributeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterReferencedAttribute(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitReferencedAttribute(this);
		}
	}


}



class ReferenceClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_referenceClause;
    }

	REFERENCE() {
	    return this.getToken(Express_simpleParser.REFERENCE, 0);
	};

	FROM() {
	    return this.getToken(Express_simpleParser.FROM, 0);
	};

	schemaRef() {
	    return this.getTypedRuleContext(SchemaRefContext,0);
	};

	resourceOrRename = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ResourceOrRenameContext);
	    } else {
	        return this.getTypedRuleContext(ResourceOrRenameContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterReferenceClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitReferenceClause(this);
		}
	}


}



class RelOpContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_relOp;
    }


	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterRelOp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitRelOp(this);
		}
	}


}



class RelOpExtendedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_relOpExtended;
    }

	relOp() {
	    return this.getTypedRuleContext(RelOpContext,0);
	};

	IN() {
	    return this.getToken(Express_simpleParser.IN, 0);
	};

	LIKE() {
	    return this.getToken(Express_simpleParser.LIKE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterRelOpExtended(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitRelOpExtended(this);
		}
	}


}



class RenameIdContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_renameId;
    }

	constantId() {
	    return this.getTypedRuleContext(ConstantIdContext,0);
	};

	entityId() {
	    return this.getTypedRuleContext(EntityIdContext,0);
	};

	functionId() {
	    return this.getTypedRuleContext(FunctionIdContext,0);
	};

	procedureId() {
	    return this.getTypedRuleContext(ProcedureIdContext,0);
	};

	typeId() {
	    return this.getTypedRuleContext(TypeIdContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterRenameId(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitRenameId(this);
		}
	}


}



class RepeatControlContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_repeatControl;
    }

	incrementControl() {
	    return this.getTypedRuleContext(IncrementControlContext,0);
	};

	whileControl() {
	    return this.getTypedRuleContext(WhileControlContext,0);
	};

	untilControl() {
	    return this.getTypedRuleContext(UntilControlContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterRepeatControl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitRepeatControl(this);
		}
	}


}



class RepeatStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_repeatStmt;
    }

	REPEAT() {
	    return this.getToken(Express_simpleParser.REPEAT, 0);
	};

	repeatControl() {
	    return this.getTypedRuleContext(RepeatControlContext,0);
	};

	stmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StmtContext);
	    } else {
	        return this.getTypedRuleContext(StmtContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterRepeatStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitRepeatStmt(this);
		}
	}


}



class RepetitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_repetition;
    }

	numericExpression() {
	    return this.getTypedRuleContext(NumericExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterRepetition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitRepetition(this);
		}
	}


}



class ResourceOrRenameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_resourceOrRename;
    }

	resourceRef() {
	    return this.getTypedRuleContext(ResourceRefContext,0);
	};

	AS() {
	    return this.getToken(Express_simpleParser.AS, 0);
	};

	renameId() {
	    return this.getTypedRuleContext(RenameIdContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterResourceOrRename(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitResourceOrRename(this);
		}
	}


}



class ResourceRefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_resourceRef;
    }

	constantRef() {
	    return this.getTypedRuleContext(ConstantRefContext,0);
	};

	entityRef() {
	    return this.getTypedRuleContext(EntityRefContext,0);
	};

	functionRef() {
	    return this.getTypedRuleContext(FunctionRefContext,0);
	};

	procedureRef() {
	    return this.getTypedRuleContext(ProcedureRefContext,0);
	};

	typeRef() {
	    return this.getTypedRuleContext(TypeRefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterResourceRef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitResourceRef(this);
		}
	}


}



class ReturnStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_returnStmt;
    }

	RETURN() {
	    return this.getToken(Express_simpleParser.RETURN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterReturnStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitReturnStmt(this);
		}
	}


}



class RuleDeclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_ruleDecl;
    }

	ruleHead() {
	    return this.getTypedRuleContext(RuleHeadContext,0);
	};

	algorithmHead() {
	    return this.getTypedRuleContext(AlgorithmHeadContext,0);
	};

	whereClause() {
	    return this.getTypedRuleContext(WhereClauseContext,0);
	};

	stmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StmtContext);
	    } else {
	        return this.getTypedRuleContext(StmtContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterRuleDecl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitRuleDecl(this);
		}
	}


}



class RuleHeadContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_ruleHead;
    }

	RULE() {
	    return this.getToken(Express_simpleParser.RULE, 0);
	};

	ruleId() {
	    return this.getTypedRuleContext(RuleIdContext,0);
	};

	FOR() {
	    return this.getToken(Express_simpleParser.FOR, 0);
	};

	entityRef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EntityRefContext);
	    } else {
	        return this.getTypedRuleContext(EntityRefContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterRuleHead(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitRuleHead(this);
		}
	}


}



class RuleIdContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_ruleId;
    }

	SimpleId() {
	    return this.getToken(Express_simpleParser.SimpleId, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterRuleId(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitRuleId(this);
		}
	}


}



class RuleLabelIdContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_ruleLabelId;
    }

	SimpleId() {
	    return this.getToken(Express_simpleParser.SimpleId, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterRuleLabelId(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitRuleLabelId(this);
		}
	}


}



class SchemaBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_schemaBody;
    }

	interfaceSpecification = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InterfaceSpecificationContext);
	    } else {
	        return this.getTypedRuleContext(InterfaceSpecificationContext,i);
	    }
	};

	constantDecl() {
	    return this.getTypedRuleContext(ConstantDeclContext,0);
	};

	schemaBodyDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SchemaBodyDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(SchemaBodyDeclarationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterSchemaBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitSchemaBody(this);
		}
	}


}



class SchemaBodyDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_schemaBodyDeclaration;
    }

	declaration() {
	    return this.getTypedRuleContext(DeclarationContext,0);
	};

	ruleDecl() {
	    return this.getTypedRuleContext(RuleDeclContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterSchemaBodyDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitSchemaBodyDeclaration(this);
		}
	}


}



class SchemaDeclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_schemaDecl;
    }

	SCHEMA() {
	    return this.getToken(Express_simpleParser.SCHEMA, 0);
	};

	schemaId() {
	    return this.getTypedRuleContext(SchemaIdContext,0);
	};

	schemaBody() {
	    return this.getTypedRuleContext(SchemaBodyContext,0);
	};

	schemaVersionId() {
	    return this.getTypedRuleContext(SchemaVersionIdContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterSchemaDecl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitSchemaDecl(this);
		}
	}


}



class SchemaIdContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_schemaId;
    }

	SimpleId() {
	    return this.getToken(Express_simpleParser.SimpleId, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterSchemaId(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitSchemaId(this);
		}
	}


}



class SchemaVersionIdContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_schemaVersionId;
    }

	stringLiteral() {
	    return this.getTypedRuleContext(StringLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterSchemaVersionId(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitSchemaVersionId(this);
		}
	}


}



class SelectorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_selector;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterSelector(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitSelector(this);
		}
	}


}



class SelectExtensionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_selectExtension;
    }

	BASED_ON() {
	    return this.getToken(Express_simpleParser.BASED_ON, 0);
	};

	typeRef() {
	    return this.getTypedRuleContext(TypeRefContext,0);
	};

	WITH() {
	    return this.getToken(Express_simpleParser.WITH, 0);
	};

	selectList() {
	    return this.getTypedRuleContext(SelectListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterSelectExtension(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitSelectExtension(this);
		}
	}


}



class SelectListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_selectList;
    }

	namedTypes = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NamedTypesContext);
	    } else {
	        return this.getTypedRuleContext(NamedTypesContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterSelectList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitSelectList(this);
		}
	}


}



class SelectTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_selectType;
    }

	SELECT() {
	    return this.getToken(Express_simpleParser.SELECT, 0);
	};

	EXTENSIBLE() {
	    return this.getToken(Express_simpleParser.EXTENSIBLE, 0);
	};

	selectList() {
	    return this.getTypedRuleContext(SelectListContext,0);
	};

	selectExtension() {
	    return this.getTypedRuleContext(SelectExtensionContext,0);
	};

	GENERIC_ENTITY() {
	    return this.getToken(Express_simpleParser.GENERIC_ENTITY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterSelectType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitSelectType(this);
		}
	}


}



class SetTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_setType;
    }

	SET() {
	    return this.getToken(Express_simpleParser.SET, 0);
	};

	OF() {
	    return this.getToken(Express_simpleParser.OF, 0);
	};

	instantiableType() {
	    return this.getTypedRuleContext(InstantiableTypeContext,0);
	};

	boundSpec() {
	    return this.getTypedRuleContext(BoundSpecContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterSetType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitSetType(this);
		}
	}


}



class SimpleExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_simpleExpression;
    }

	term = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TermContext);
	    } else {
	        return this.getTypedRuleContext(TermContext,i);
	    }
	};

	addLikeOp = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AddLikeOpContext);
	    } else {
	        return this.getTypedRuleContext(AddLikeOpContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterSimpleExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitSimpleExpression(this);
		}
	}


}



class SimpleFactorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_simpleFactor;
    }

	aggregateInitializer() {
	    return this.getTypedRuleContext(AggregateInitializerContext,0);
	};

	entityConstructor() {
	    return this.getTypedRuleContext(EntityConstructorContext,0);
	};

	enumerationReference() {
	    return this.getTypedRuleContext(EnumerationReferenceContext,0);
	};

	interval() {
	    return this.getTypedRuleContext(IntervalContext,0);
	};

	queryExpression() {
	    return this.getTypedRuleContext(QueryExpressionContext,0);
	};

	simpleFactorExpression() {
	    return this.getTypedRuleContext(SimpleFactorExpressionContext,0);
	};

	simpleFactorUnaryExpression() {
	    return this.getTypedRuleContext(SimpleFactorUnaryExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterSimpleFactor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitSimpleFactor(this);
		}
	}


}



class SimpleFactorExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_simpleFactorExpression;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	primary() {
	    return this.getTypedRuleContext(PrimaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterSimpleFactorExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitSimpleFactorExpression(this);
		}
	}


}



class SimpleFactorUnaryExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_simpleFactorUnaryExpression;
    }

	unaryOp() {
	    return this.getTypedRuleContext(UnaryOpContext,0);
	};

	simpleFactorExpression() {
	    return this.getTypedRuleContext(SimpleFactorExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterSimpleFactorUnaryExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitSimpleFactorUnaryExpression(this);
		}
	}


}



class SimpleTypesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_simpleTypes;
    }

	binaryType() {
	    return this.getTypedRuleContext(BinaryTypeContext,0);
	};

	booleanType() {
	    return this.getTypedRuleContext(BooleanTypeContext,0);
	};

	integerType() {
	    return this.getTypedRuleContext(IntegerTypeContext,0);
	};

	logicalType() {
	    return this.getTypedRuleContext(LogicalTypeContext,0);
	};

	numberType() {
	    return this.getTypedRuleContext(NumberTypeContext,0);
	};

	realType() {
	    return this.getTypedRuleContext(RealTypeContext,0);
	};

	stringType() {
	    return this.getTypedRuleContext(StringTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterSimpleTypes(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitSimpleTypes(this);
		}
	}


}



class SkipStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_skipStmt;
    }

	SKIP_() {
	    return this.getToken(Express_simpleParser.SKIP_, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterSkipStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitSkipStmt(this);
		}
	}


}



class StmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_stmt;
    }

	aliasStmt() {
	    return this.getTypedRuleContext(AliasStmtContext,0);
	};

	assignmentStmt() {
	    return this.getTypedRuleContext(AssignmentStmtContext,0);
	};

	caseStmt() {
	    return this.getTypedRuleContext(CaseStmtContext,0);
	};

	compoundStmt() {
	    return this.getTypedRuleContext(CompoundStmtContext,0);
	};

	escapeStmt() {
	    return this.getTypedRuleContext(EscapeStmtContext,0);
	};

	ifStmt() {
	    return this.getTypedRuleContext(IfStmtContext,0);
	};

	nullStmt() {
	    return this.getTypedRuleContext(NullStmtContext,0);
	};

	procedureCallStmt() {
	    return this.getTypedRuleContext(ProcedureCallStmtContext,0);
	};

	repeatStmt() {
	    return this.getTypedRuleContext(RepeatStmtContext,0);
	};

	returnStmt() {
	    return this.getTypedRuleContext(ReturnStmtContext,0);
	};

	skipStmt() {
	    return this.getTypedRuleContext(SkipStmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitStmt(this);
		}
	}


}



class StringLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_stringLiteral;
    }

	SimpleStringLiteral() {
	    return this.getToken(Express_simpleParser.SimpleStringLiteral, 0);
	};

	EncodedStringLiteral() {
	    return this.getToken(Express_simpleParser.EncodedStringLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterStringLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitStringLiteral(this);
		}
	}


}



class StringTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_stringType;
    }

	STRING() {
	    return this.getToken(Express_simpleParser.STRING, 0);
	};

	widthSpec() {
	    return this.getTypedRuleContext(WidthSpecContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterStringType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitStringType(this);
		}
	}


}



class SubsuperContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_subsuper;
    }

	supertypeConstraint() {
	    return this.getTypedRuleContext(SupertypeConstraintContext,0);
	};

	subtypeDeclaration() {
	    return this.getTypedRuleContext(SubtypeDeclarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterSubsuper(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitSubsuper(this);
		}
	}


}



class SubtypeConstraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_subtypeConstraint;
    }

	OF() {
	    return this.getToken(Express_simpleParser.OF, 0);
	};

	supertypeExpression() {
	    return this.getTypedRuleContext(SupertypeExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterSubtypeConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitSubtypeConstraint(this);
		}
	}


}



class SubtypeConstraintBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_subtypeConstraintBody;
    }

	abstractSupertype() {
	    return this.getTypedRuleContext(AbstractSupertypeContext,0);
	};

	totalOver() {
	    return this.getTypedRuleContext(TotalOverContext,0);
	};

	supertypeExpression() {
	    return this.getTypedRuleContext(SupertypeExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterSubtypeConstraintBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitSubtypeConstraintBody(this);
		}
	}


}



class SubtypeConstraintDeclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_subtypeConstraintDecl;
    }

	subtypeConstraintHead() {
	    return this.getTypedRuleContext(SubtypeConstraintHeadContext,0);
	};

	subtypeConstraintBody() {
	    return this.getTypedRuleContext(SubtypeConstraintBodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterSubtypeConstraintDecl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitSubtypeConstraintDecl(this);
		}
	}


}



class SubtypeConstraintHeadContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_subtypeConstraintHead;
    }

	SUBTYPE_CONSTRAINT() {
	    return this.getToken(Express_simpleParser.SUBTYPE_CONSTRAINT, 0);
	};

	subtypeConstraintId() {
	    return this.getTypedRuleContext(SubtypeConstraintIdContext,0);
	};

	FOR() {
	    return this.getToken(Express_simpleParser.FOR, 0);
	};

	entityRef() {
	    return this.getTypedRuleContext(EntityRefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterSubtypeConstraintHead(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitSubtypeConstraintHead(this);
		}
	}


}



class SubtypeConstraintIdContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_subtypeConstraintId;
    }

	SimpleId() {
	    return this.getToken(Express_simpleParser.SimpleId, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterSubtypeConstraintId(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitSubtypeConstraintId(this);
		}
	}


}



class SubtypeDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_subtypeDeclaration;
    }

	SUBTYPE() {
	    return this.getToken(Express_simpleParser.SUBTYPE, 0);
	};

	OF() {
	    return this.getToken(Express_simpleParser.OF, 0);
	};

	entityRef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EntityRefContext);
	    } else {
	        return this.getTypedRuleContext(EntityRefContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterSubtypeDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitSubtypeDeclaration(this);
		}
	}


}



class SupertypeConstraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_supertypeConstraint;
    }

	abstractEntityDeclaration() {
	    return this.getTypedRuleContext(AbstractEntityDeclarationContext,0);
	};

	abstractSupertypeDeclaration() {
	    return this.getTypedRuleContext(AbstractSupertypeDeclarationContext,0);
	};

	supertypeRule() {
	    return this.getTypedRuleContext(SupertypeRuleContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterSupertypeConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitSupertypeConstraint(this);
		}
	}


}



class SupertypeExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_supertypeExpression;
    }

	supertypeFactor = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SupertypeFactorContext);
	    } else {
	        return this.getTypedRuleContext(SupertypeFactorContext,i);
	    }
	};

	ANDOR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Express_simpleParser.ANDOR);
	    } else {
	        return this.getToken(Express_simpleParser.ANDOR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterSupertypeExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitSupertypeExpression(this);
		}
	}


}



class SupertypeFactorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_supertypeFactor;
    }

	supertypeTerm = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SupertypeTermContext);
	    } else {
	        return this.getTypedRuleContext(SupertypeTermContext,i);
	    }
	};

	AND = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Express_simpleParser.AND);
	    } else {
	        return this.getToken(Express_simpleParser.AND, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterSupertypeFactor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitSupertypeFactor(this);
		}
	}


}



class SupertypeRuleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_supertypeRule;
    }

	SUPERTYPE() {
	    return this.getToken(Express_simpleParser.SUPERTYPE, 0);
	};

	subtypeConstraint() {
	    return this.getTypedRuleContext(SubtypeConstraintContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterSupertypeRule(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitSupertypeRule(this);
		}
	}


}



class SupertypeTermContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_supertypeTerm;
    }

	entityRef() {
	    return this.getTypedRuleContext(EntityRefContext,0);
	};

	oneOf() {
	    return this.getTypedRuleContext(OneOfContext,0);
	};

	supertypeExpression() {
	    return this.getTypedRuleContext(SupertypeExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterSupertypeTerm(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitSupertypeTerm(this);
		}
	}


}



class SyntaxContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_syntax;
    }

	EOF() {
	    return this.getToken(Express_simpleParser.EOF, 0);
	};

	schemaDecl = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SchemaDeclContext);
	    } else {
	        return this.getTypedRuleContext(SchemaDeclContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterSyntax(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitSyntax(this);
		}
	}


}



class TermContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_term;
    }

	factor = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FactorContext);
	    } else {
	        return this.getTypedRuleContext(FactorContext,i);
	    }
	};

	multiplicationLikeOp = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MultiplicationLikeOpContext);
	    } else {
	        return this.getTypedRuleContext(MultiplicationLikeOpContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterTerm(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitTerm(this);
		}
	}


}



class TotalOverContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_totalOver;
    }

	TOTAL_OVER() {
	    return this.getToken(Express_simpleParser.TOTAL_OVER, 0);
	};

	entityRef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EntityRefContext);
	    } else {
	        return this.getTypedRuleContext(EntityRefContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterTotalOver(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitTotalOver(this);
		}
	}


}



class TypeDeclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_typeDecl;
    }

	TYPE() {
	    return this.getToken(Express_simpleParser.TYPE, 0);
	};

	typeId() {
	    return this.getTypedRuleContext(TypeIdContext,0);
	};

	underlyingType() {
	    return this.getTypedRuleContext(UnderlyingTypeContext,0);
	};

	whereClause() {
	    return this.getTypedRuleContext(WhereClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterTypeDecl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitTypeDecl(this);
		}
	}


}



class TypeIdContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_typeId;
    }

	SimpleId() {
	    return this.getToken(Express_simpleParser.SimpleId, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterTypeId(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitTypeId(this);
		}
	}


}



class TypeLabelContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_typeLabel;
    }

	typeLabelId() {
	    return this.getTypedRuleContext(TypeLabelIdContext,0);
	};

	typeLabelRef() {
	    return this.getTypedRuleContext(TypeLabelRefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterTypeLabel(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitTypeLabel(this);
		}
	}


}



class TypeLabelIdContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_typeLabelId;
    }

	SimpleId() {
	    return this.getToken(Express_simpleParser.SimpleId, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterTypeLabelId(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitTypeLabelId(this);
		}
	}


}



class UnaryOpContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_unaryOp;
    }

	NOT() {
	    return this.getToken(Express_simpleParser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterUnaryOp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitUnaryOp(this);
		}
	}


}



class UnderlyingTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_underlyingType;
    }

	concreteTypes() {
	    return this.getTypedRuleContext(ConcreteTypesContext,0);
	};

	constructedTypes() {
	    return this.getTypedRuleContext(ConstructedTypesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterUnderlyingType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitUnderlyingType(this);
		}
	}


}



class UniqueClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_uniqueClause;
    }

	UNIQUE() {
	    return this.getToken(Express_simpleParser.UNIQUE, 0);
	};

	uniqueRule = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UniqueRuleContext);
	    } else {
	        return this.getTypedRuleContext(UniqueRuleContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterUniqueClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitUniqueClause(this);
		}
	}


}



class UniqueRuleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_uniqueRule;
    }

	referencedAttribute = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ReferencedAttributeContext);
	    } else {
	        return this.getTypedRuleContext(ReferencedAttributeContext,i);
	    }
	};

	ruleLabelId() {
	    return this.getTypedRuleContext(RuleLabelIdContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterUniqueRule(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitUniqueRule(this);
		}
	}


}



class UntilControlContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_untilControl;
    }

	UNTIL() {
	    return this.getToken(Express_simpleParser.UNTIL, 0);
	};

	logicalExpression() {
	    return this.getTypedRuleContext(LogicalExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterUntilControl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitUntilControl(this);
		}
	}


}



class UseClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_useClause;
    }

	USE() {
	    return this.getToken(Express_simpleParser.USE, 0);
	};

	FROM() {
	    return this.getToken(Express_simpleParser.FROM, 0);
	};

	schemaRef() {
	    return this.getTypedRuleContext(SchemaRefContext,0);
	};

	namedTypeOrRename = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NamedTypeOrRenameContext);
	    } else {
	        return this.getTypedRuleContext(NamedTypeOrRenameContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterUseClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitUseClause(this);
		}
	}


}



class VariableIdContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_variableId;
    }

	SimpleId() {
	    return this.getToken(Express_simpleParser.SimpleId, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterVariableId(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitVariableId(this);
		}
	}


}



class WhereClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_whereClause;
    }

	WHERE() {
	    return this.getToken(Express_simpleParser.WHERE, 0);
	};

	domainRule = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DomainRuleContext);
	    } else {
	        return this.getTypedRuleContext(DomainRuleContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterWhereClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitWhereClause(this);
		}
	}


}



class WhileControlContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_whileControl;
    }

	WHILE() {
	    return this.getToken(Express_simpleParser.WHILE, 0);
	};

	logicalExpression() {
	    return this.getTypedRuleContext(LogicalExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterWhileControl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitWhileControl(this);
		}
	}


}



class WidthContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_width;
    }

	numericExpression() {
	    return this.getTypedRuleContext(NumericExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterWidth(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitWidth(this);
		}
	}


}



class WidthSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Express_simpleParser.RULE_widthSpec;
    }

	width() {
	    return this.getTypedRuleContext(WidthContext,0);
	};

	FIXED() {
	    return this.getToken(Express_simpleParser.FIXED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.enterWidthSpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Express_simpleListener ) {
	        listener.exitWidthSpec(this);
		}
	}


}




Express_simpleParser.AttributeRefContext = AttributeRefContext; 
Express_simpleParser.ConstantRefContext = ConstantRefContext; 
Express_simpleParser.EntityRefContext = EntityRefContext; 
Express_simpleParser.EnumerationRefContext = EnumerationRefContext; 
Express_simpleParser.FunctionRefContext = FunctionRefContext; 
Express_simpleParser.ParameterRefContext = ParameterRefContext; 
Express_simpleParser.ProcedureRefContext = ProcedureRefContext; 
Express_simpleParser.RuleLabelRefContext = RuleLabelRefContext; 
Express_simpleParser.RuleRefContext = RuleRefContext; 
Express_simpleParser.SchemaRefContext = SchemaRefContext; 
Express_simpleParser.SubtypeConstraintRefContext = SubtypeConstraintRefContext; 
Express_simpleParser.TypeLabelRefContext = TypeLabelRefContext; 
Express_simpleParser.TypeRefContext = TypeRefContext; 
Express_simpleParser.VariableRefContext = VariableRefContext; 
Express_simpleParser.AbstractEntityDeclarationContext = AbstractEntityDeclarationContext; 
Express_simpleParser.AbstractSupertypeContext = AbstractSupertypeContext; 
Express_simpleParser.AbstractSupertypeDeclarationContext = AbstractSupertypeDeclarationContext; 
Express_simpleParser.ActualParameterListContext = ActualParameterListContext; 
Express_simpleParser.AddLikeOpContext = AddLikeOpContext; 
Express_simpleParser.AggregateInitializerContext = AggregateInitializerContext; 
Express_simpleParser.AggregateSourceContext = AggregateSourceContext; 
Express_simpleParser.AggregateTypeContext = AggregateTypeContext; 
Express_simpleParser.AggregationTypesContext = AggregationTypesContext; 
Express_simpleParser.AlgorithmHeadContext = AlgorithmHeadContext; 
Express_simpleParser.AliasStmtContext = AliasStmtContext; 
Express_simpleParser.ArrayTypeContext = ArrayTypeContext; 
Express_simpleParser.AssignmentStmtContext = AssignmentStmtContext; 
Express_simpleParser.AttributeDeclContext = AttributeDeclContext; 
Express_simpleParser.AttributeIdContext = AttributeIdContext; 
Express_simpleParser.AttributeQualifierContext = AttributeQualifierContext; 
Express_simpleParser.BagTypeContext = BagTypeContext; 
Express_simpleParser.BinaryTypeContext = BinaryTypeContext; 
Express_simpleParser.BooleanTypeContext = BooleanTypeContext; 
Express_simpleParser.Bound1Context = Bound1Context; 
Express_simpleParser.Bound2Context = Bound2Context; 
Express_simpleParser.BoundSpecContext = BoundSpecContext; 
Express_simpleParser.BuiltInConstantContext = BuiltInConstantContext; 
Express_simpleParser.BuiltInFunctionContext = BuiltInFunctionContext; 
Express_simpleParser.BuiltInProcedureContext = BuiltInProcedureContext; 
Express_simpleParser.CaseActionContext = CaseActionContext; 
Express_simpleParser.CaseLabelContext = CaseLabelContext; 
Express_simpleParser.CaseStmtContext = CaseStmtContext; 
Express_simpleParser.CompoundStmtContext = CompoundStmtContext; 
Express_simpleParser.ConcreteTypesContext = ConcreteTypesContext; 
Express_simpleParser.ConstantBodyContext = ConstantBodyContext; 
Express_simpleParser.ConstantDeclContext = ConstantDeclContext; 
Express_simpleParser.ConstantFactorContext = ConstantFactorContext; 
Express_simpleParser.ConstantIdContext = ConstantIdContext; 
Express_simpleParser.ConstructedTypesContext = ConstructedTypesContext; 
Express_simpleParser.DeclarationContext = DeclarationContext; 
Express_simpleParser.DerivedAttrContext = DerivedAttrContext; 
Express_simpleParser.DeriveClauseContext = DeriveClauseContext; 
Express_simpleParser.DomainRuleContext = DomainRuleContext; 
Express_simpleParser.ElementContext = ElementContext; 
Express_simpleParser.EntityBodyContext = EntityBodyContext; 
Express_simpleParser.EntityConstructorContext = EntityConstructorContext; 
Express_simpleParser.EntityDeclContext = EntityDeclContext; 
Express_simpleParser.EntityHeadContext = EntityHeadContext; 
Express_simpleParser.EntityIdContext = EntityIdContext; 
Express_simpleParser.EnumerationExtensionContext = EnumerationExtensionContext; 
Express_simpleParser.EnumerationIdContext = EnumerationIdContext; 
Express_simpleParser.EnumerationItemsContext = EnumerationItemsContext; 
Express_simpleParser.EnumerationItemContext = EnumerationItemContext; 
Express_simpleParser.EnumerationReferenceContext = EnumerationReferenceContext; 
Express_simpleParser.EnumerationTypeContext = EnumerationTypeContext; 
Express_simpleParser.EscapeStmtContext = EscapeStmtContext; 
Express_simpleParser.ExplicitAttrContext = ExplicitAttrContext; 
Express_simpleParser.ExpressionContext = ExpressionContext; 
Express_simpleParser.FactorContext = FactorContext; 
Express_simpleParser.FormalParameterContext = FormalParameterContext; 
Express_simpleParser.FunctionCallContext = FunctionCallContext; 
Express_simpleParser.FunctionDeclContext = FunctionDeclContext; 
Express_simpleParser.FunctionHeadContext = FunctionHeadContext; 
Express_simpleParser.FunctionIdContext = FunctionIdContext; 
Express_simpleParser.GeneralizedTypesContext = GeneralizedTypesContext; 
Express_simpleParser.GeneralAggregationTypesContext = GeneralAggregationTypesContext; 
Express_simpleParser.GeneralArrayTypeContext = GeneralArrayTypeContext; 
Express_simpleParser.GeneralBagTypeContext = GeneralBagTypeContext; 
Express_simpleParser.GeneralListTypeContext = GeneralListTypeContext; 
Express_simpleParser.GeneralRefContext = GeneralRefContext; 
Express_simpleParser.GeneralSetTypeContext = GeneralSetTypeContext; 
Express_simpleParser.GenericEntityTypeContext = GenericEntityTypeContext; 
Express_simpleParser.GenericTypeContext = GenericTypeContext; 
Express_simpleParser.GroupQualifierContext = GroupQualifierContext; 
Express_simpleParser.IfStmtContext = IfStmtContext; 
Express_simpleParser.IfStmtStatementsContext = IfStmtStatementsContext; 
Express_simpleParser.IfStmtElseStatementsContext = IfStmtElseStatementsContext; 
Express_simpleParser.IncrementContext = IncrementContext; 
Express_simpleParser.IncrementControlContext = IncrementControlContext; 
Express_simpleParser.IndexContext = IndexContext; 
Express_simpleParser.Index1Context = Index1Context; 
Express_simpleParser.Index2Context = Index2Context; 
Express_simpleParser.IndexQualifierContext = IndexQualifierContext; 
Express_simpleParser.InstantiableTypeContext = InstantiableTypeContext; 
Express_simpleParser.IntegerTypeContext = IntegerTypeContext; 
Express_simpleParser.InterfaceSpecificationContext = InterfaceSpecificationContext; 
Express_simpleParser.IntervalContext = IntervalContext; 
Express_simpleParser.IntervalHighContext = IntervalHighContext; 
Express_simpleParser.IntervalItemContext = IntervalItemContext; 
Express_simpleParser.IntervalLowContext = IntervalLowContext; 
Express_simpleParser.IntervalOpContext = IntervalOpContext; 
Express_simpleParser.InverseAttrContext = InverseAttrContext; 
Express_simpleParser.InverseAttrTypeContext = InverseAttrTypeContext; 
Express_simpleParser.InverseClauseContext = InverseClauseContext; 
Express_simpleParser.ListTypeContext = ListTypeContext; 
Express_simpleParser.LiteralContext = LiteralContext; 
Express_simpleParser.LocalDeclContext = LocalDeclContext; 
Express_simpleParser.LocalVariableContext = LocalVariableContext; 
Express_simpleParser.LogicalExpressionContext = LogicalExpressionContext; 
Express_simpleParser.LogicalLiteralContext = LogicalLiteralContext; 
Express_simpleParser.LogicalTypeContext = LogicalTypeContext; 
Express_simpleParser.MultiplicationLikeOpContext = MultiplicationLikeOpContext; 
Express_simpleParser.NamedTypesContext = NamedTypesContext; 
Express_simpleParser.NamedTypeOrRenameContext = NamedTypeOrRenameContext; 
Express_simpleParser.NullStmtContext = NullStmtContext; 
Express_simpleParser.NumberTypeContext = NumberTypeContext; 
Express_simpleParser.NumericExpressionContext = NumericExpressionContext; 
Express_simpleParser.OneOfContext = OneOfContext; 
Express_simpleParser.ParameterContext = ParameterContext; 
Express_simpleParser.ParameterIdContext = ParameterIdContext; 
Express_simpleParser.ParameterTypeContext = ParameterTypeContext; 
Express_simpleParser.PopulationContext = PopulationContext; 
Express_simpleParser.PrecisionSpecContext = PrecisionSpecContext; 
Express_simpleParser.PrimaryContext = PrimaryContext; 
Express_simpleParser.ProcedureCallStmtContext = ProcedureCallStmtContext; 
Express_simpleParser.ProcedureDeclContext = ProcedureDeclContext; 
Express_simpleParser.ProcedureHeadContext = ProcedureHeadContext; 
Express_simpleParser.ProcedureHeadParameterContext = ProcedureHeadParameterContext; 
Express_simpleParser.ProcedureIdContext = ProcedureIdContext; 
Express_simpleParser.QualifiableFactorContext = QualifiableFactorContext; 
Express_simpleParser.QualifiedAttributeContext = QualifiedAttributeContext; 
Express_simpleParser.QualifierContext = QualifierContext; 
Express_simpleParser.QueryExpressionContext = QueryExpressionContext; 
Express_simpleParser.RealTypeContext = RealTypeContext; 
Express_simpleParser.RedeclaredAttributeContext = RedeclaredAttributeContext; 
Express_simpleParser.ReferencedAttributeContext = ReferencedAttributeContext; 
Express_simpleParser.ReferenceClauseContext = ReferenceClauseContext; 
Express_simpleParser.RelOpContext = RelOpContext; 
Express_simpleParser.RelOpExtendedContext = RelOpExtendedContext; 
Express_simpleParser.RenameIdContext = RenameIdContext; 
Express_simpleParser.RepeatControlContext = RepeatControlContext; 
Express_simpleParser.RepeatStmtContext = RepeatStmtContext; 
Express_simpleParser.RepetitionContext = RepetitionContext; 
Express_simpleParser.ResourceOrRenameContext = ResourceOrRenameContext; 
Express_simpleParser.ResourceRefContext = ResourceRefContext; 
Express_simpleParser.ReturnStmtContext = ReturnStmtContext; 
Express_simpleParser.RuleDeclContext = RuleDeclContext; 
Express_simpleParser.RuleHeadContext = RuleHeadContext; 
Express_simpleParser.RuleIdContext = RuleIdContext; 
Express_simpleParser.RuleLabelIdContext = RuleLabelIdContext; 
Express_simpleParser.SchemaBodyContext = SchemaBodyContext; 
Express_simpleParser.SchemaBodyDeclarationContext = SchemaBodyDeclarationContext; 
Express_simpleParser.SchemaDeclContext = SchemaDeclContext; 
Express_simpleParser.SchemaIdContext = SchemaIdContext; 
Express_simpleParser.SchemaVersionIdContext = SchemaVersionIdContext; 
Express_simpleParser.SelectorContext = SelectorContext; 
Express_simpleParser.SelectExtensionContext = SelectExtensionContext; 
Express_simpleParser.SelectListContext = SelectListContext; 
Express_simpleParser.SelectTypeContext = SelectTypeContext; 
Express_simpleParser.SetTypeContext = SetTypeContext; 
Express_simpleParser.SimpleExpressionContext = SimpleExpressionContext; 
Express_simpleParser.SimpleFactorContext = SimpleFactorContext; 
Express_simpleParser.SimpleFactorExpressionContext = SimpleFactorExpressionContext; 
Express_simpleParser.SimpleFactorUnaryExpressionContext = SimpleFactorUnaryExpressionContext; 
Express_simpleParser.SimpleTypesContext = SimpleTypesContext; 
Express_simpleParser.SkipStmtContext = SkipStmtContext; 
Express_simpleParser.StmtContext = StmtContext; 
Express_simpleParser.StringLiteralContext = StringLiteralContext; 
Express_simpleParser.StringTypeContext = StringTypeContext; 
Express_simpleParser.SubsuperContext = SubsuperContext; 
Express_simpleParser.SubtypeConstraintContext = SubtypeConstraintContext; 
Express_simpleParser.SubtypeConstraintBodyContext = SubtypeConstraintBodyContext; 
Express_simpleParser.SubtypeConstraintDeclContext = SubtypeConstraintDeclContext; 
Express_simpleParser.SubtypeConstraintHeadContext = SubtypeConstraintHeadContext; 
Express_simpleParser.SubtypeConstraintIdContext = SubtypeConstraintIdContext; 
Express_simpleParser.SubtypeDeclarationContext = SubtypeDeclarationContext; 
Express_simpleParser.SupertypeConstraintContext = SupertypeConstraintContext; 
Express_simpleParser.SupertypeExpressionContext = SupertypeExpressionContext; 
Express_simpleParser.SupertypeFactorContext = SupertypeFactorContext; 
Express_simpleParser.SupertypeRuleContext = SupertypeRuleContext; 
Express_simpleParser.SupertypeTermContext = SupertypeTermContext; 
Express_simpleParser.SyntaxContext = SyntaxContext; 
Express_simpleParser.TermContext = TermContext; 
Express_simpleParser.TotalOverContext = TotalOverContext; 
Express_simpleParser.TypeDeclContext = TypeDeclContext; 
Express_simpleParser.TypeIdContext = TypeIdContext; 
Express_simpleParser.TypeLabelContext = TypeLabelContext; 
Express_simpleParser.TypeLabelIdContext = TypeLabelIdContext; 
Express_simpleParser.UnaryOpContext = UnaryOpContext; 
Express_simpleParser.UnderlyingTypeContext = UnderlyingTypeContext; 
Express_simpleParser.UniqueClauseContext = UniqueClauseContext; 
Express_simpleParser.UniqueRuleContext = UniqueRuleContext; 
Express_simpleParser.UntilControlContext = UntilControlContext; 
Express_simpleParser.UseClauseContext = UseClauseContext; 
Express_simpleParser.VariableIdContext = VariableIdContext; 
Express_simpleParser.WhereClauseContext = WhereClauseContext; 
Express_simpleParser.WhileControlContext = WhileControlContext; 
Express_simpleParser.WidthContext = WidthContext; 
Express_simpleParser.WidthSpecContext = WidthSpecContext; 
